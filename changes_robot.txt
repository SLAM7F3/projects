============================================================================
ROBOT code changes made on Weds, Dec 18, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Dec 18, 2013 at
11:25 am (pfiles12_8a.tgz) on ROBOT laptop.  Bluegrass server DOES again
respond to thin client buttons events.

============================================================================
ROBOT code changes made on Sat, Dec 7, 2013:

*.  ISDS demos and standard pgms almost work OK as of Sat, Dec 7, 2013 at
12:27 pm (pfiles12_7a.tgz) on ROBOT laptop.  But bluegrass server again
doesn't respond to thin client buttons events.

============================================================================
ROBOT code changes made on Weds, Nov 27, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Nov 27, 2013
at  4:17 pm (pfiles11_27a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Tues, Nov 19, 2013:

*.  ISDS demos and standard pgms almost work OK as of Tues, Nov 19, 2013
at  11:15 am (pfiles11_19a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Weds, Nov 6, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Nov 6, 2013
at  11:08 am (pfiles11_6a.tgz) on ROBOT laptop.  But ran out of disk
space.  So not sure how many executables were recently recompiled.

============================================================================
ROBOT code changes made on Weds, Oct 30, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Oct 30, 2013
at  4:35 pm (pfiles10_30a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Mon, Oct 21, 2013:

*.  ISDS demos and standard pgms almost work OK as of Mon, Oct 21, 2013
at  12:15 pm (pfiles10_21a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Fri, Oct 11, 2013:

*.  ISDS demos and standard pgms almost work OK as of Fri, Oct 11, 2013
at  6:01 pm (pfiles10_11a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Tues, Oct 1, 2013:

*.  ISDS demos and standard pgms almost work OK as of Tues, Oct 1, 2013
at 4:06 pm (pfiles10_1a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Tues, Sep 10, 2013:

*.  ISDS demos and standard pgms almost work OK as of Tues, Sept 10, 2013
at 1:51 pm (pfiles9_10a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Fri, Aug 30, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Aug 30, 2013 at
4:46 pm (pfiles8_30a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Weds, Aug 21, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Aug 21, 2013 at
12:11 pm (pfiles8_21a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Fri, Aug 9, 2013:

*.  ISDS demos and standard pgms almost work OK as of Fri, Aug 9, 2013 at
3:30 pm (pfiles8_9a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made early on Fri, July 19, 2013:

*.  ISDS demos and standard pgms almost work OK as of Fri, July 19, 2013 at
9:28 am (pfiles7_19a.tgz) on ROBOT laptop.  But cannot yet test Qt programs
due to dlib statistics #include problem in sift_detector.h.

============================================================================
ROBOT code changes made early on Fri, July 5, 2013:

*.  ISDS demos and standard pgms almost work OK as of Fri, July 5, 2013 at
8:56 am (pfiles7_5a.tgz) on ROBOT laptop.  Bluegrass demo is working
again!


============================================================================
ROBOT code changes made early on Weds, Jun 24, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Jun 24, 2013 at
7:55 am (pfiles6_24a.tgz) on ROBOT laptop.  Bluegrass demo is working
again!

============================================================================
ROBOT code changes made early on Weds, Jun 19, 2013:

*.  In FFMPEGVideo::decodeNextFrame(), call to avcodec_decode_video() must
be enabled in order for SIFT main lobby demo to run.

*.  ISDS demos and standard pgms almost work OK as of Weds, Jun 19, 2013 at
7:55 am (pfiles6_19a.tgz) on ROBOT laptop.  But thin client messaging in
Bluegrass demo is massively messed up!

============================================================================
ROBOT code changes made on Sun, Jun 16, 2013:

*.  Fixed fundamental matrix exporting by program RESTRICTED_ASIFT.

============================================================================
ROBOT code changes made early on Thurs, Jun 13, 2013:

*.  Added friend functions operator+, operator-, operator* and operator= to
descriptor class.

*.  Overloaded mathfunc::recursive_mean() to take in descriptors as well as
genvectors.

============================================================================
ROBOT code changes made early on Weds, Jun 12, 2013:

*.  ISDS demos and standard pgms almost work OK as of Weds, Jun 12, 2013 at
8:35 am (pfiles6_12a.tgz) on ROBOT laptop.  But thin client messaging in
Bluegrass demo is massively messed up!


============================================================================
ROBOT code changes made on Sat, May 25, 2013; Sun, May 26, 2013; Mon, May
27, 2013; early Tues, May 28, 2013:

*.  mains/photosynth/GENERATE_PHOTO_HIERARCHY now exports SQL commands
which insert connected graph component information into
connected_components table of IMAGERY database.

*.  GENERATE_PHOTO_HIERARCHY now allows graph_component_ID to be passed as
input parameter.

*.  Added graph_component_ID and max_child_node_ID members to PassesGroup
class along with setter methods.

*.  mains/textsearch/DISPLAY_DOC_TEXT queries the user to enter a document
ID.  It then displays the document's beginning text.  We wrote this little
utility program in order to debug MALLET clustering.

*.  mains/photosynth/GENERATE_COMPONENT_HIERARCHY is a variant of
GENERATE_PHOTO_HIERARCHY which we created for MALLET-based text document
graph generation purposes.  It is called by
mains/textsearch/POPULATE_GRAPH_DIRS for each text graph component
corresponding to a fine topic.  GENERATE_COMPONENT_HIERARCHY reads in a
graph edge list generated by SIFT_PARSER which establishes links between
text documents within a particular fine topic.  It also reads in graph
clustering information output by the K-means algorithm.
GENERATE_COMPONENT_HIERARCHY writes out a set of SQL files which insert or
update graphs, nodes, connected component and graph annotations for the
text document graph pyramid.

*.  MALLET-based text document processing pipeline has finally yielded a
reasonable 2D layout for Michael Yee's 43K+ Reuters articles!

============================================================================
ROBOT code changes made early on Fri, May 24, 2013:

*.  ISDS demos and standard pgms almost work OK as of Fri, May 24, 2013 at
7 pm (pfiles5_24a.tgz) on ROBOT laptop.  But thin client messaging in
Bluegrass demo is massively messed up!

============================================================================
ROBOT code changes made early on Weds, May 22, 2013:

*.  sift_detector::match_image_pair_features() matches SIFT/ASIFT features
extracted from the ith images with those from j=j_start to j_stop.

*.  Starting to implement parallelized feature matching in sift_detector
class.

============================================================================
ROBOT code changes made on Sat, May 18, 2013; Sun, May 19, 2013:

*.  Trying to eliminate face constructor which takes no arguments.

*.  [Failed to remove all dependence of vertices_handler class upon our
ancient, deprecated hashtable class in favor of STL map.]

*.  In vertices_handler::reset_vertex_posn() and
polyhedron::reset_vertex_posn(), we discovered the hard and painful way
that passing input parameter old_posn as a const reference into these
methods incorrectly ended up changing their values!  So we now pass
old_posn by value rather than by reference into these methods.

*.  In track::get_interpolated_posn_rpy_sensor_aer_FOV(), we now 
explicitly check sizes of sensor_az_el_roll and sensor_FOV STL vectors
before attempting to interpolate their values.

*.  In LOSMODELSGROUP class, added altitude_dependent_MODEL_scale_flag bool
member along with set method.

*.  mains/aerosynth/EARTHBUNDLER can now display Puma aerial video
backprojected onto a Google Image as a function of time.  

*.  ISDS demos and standard pgms almost work OK as of Sun, May 19, 2013 at
9:45 pm (pfiles5_19d.tgz) on ROBOT laptop.  But thin client messaging in
Bluegrass demo is massively messed up!

============================================================================
ROBOT code changes made on Sun, May 12, 2013; early Mon, May 13, 2013:

*.  In sift_detector::parse_Lowe_features(), experiment with randomly
discarding candidate features when they pile up within relatively coarse,
quantized image cell bins.

*.  ISDS demos and standard pgms almost work OK as of Mon, May 13, 2013 at
6:24 am (pfiles5_13a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made early on Thurs, May 9, 2013:

*.  In mains/geo/TRIANGULATE, discard any raw triangulated intersection
points whose uncertainties are excessively large.

============================================================================
ROBOT code changes made on Sat, May 4, 2013:

*.  mains/graph/PARSE_2317 imports MIT2317 node IDs versus their
reconstructed relative easting,northing,altitude camera geolocations.  It
assigns each node to one of n_itervals x n_intervals "sectors" based upon
their easting,northing geocoordinates.  PARSE_2317 exports sector
assignments versus node ID to an output text file.  It also generates a
metafile plot where each node is colored according to its sector
assignment.

============================================================================
ROBOT code changes made on Sat, Apr 27, 2013; Sun, Apr 28, 2013:

*.  Added max_quadruple_index and SOH_binsize members to sift_detector
class.

*.  sift_detector::quadruple_neighborhood() takes in quadruple labeling
some sub-orientation histogram cell.  It adds/subtracts unity from each of
the quadruple's 4-dimensional integer indices.  The set of 8 neighboring
quadruples along with the original quadruple are returned within an STL
vector of quadruples.

*.  sift_detector::renormalize_quadruple_indices() takes in curr_quadruple
and resets all its entries to range from 0 to max_quadruple_index-1.

*.  sift_detector::curr_feature_SOH_neighborhood() takes in the quadruple
for some particular sub-orientation histogram cell.  If the cell is
nonempty, it fills output STL vector curr_feature_neighborhood_info with
all feature pairs corresponding to the cell and its immediate 4D neighbors.

*.  In
sift_detector::identify_candidate_FLANN_feature_matches_for_image_pair(),
we now require at least SOH corner angles to match in order for current
tiepoint pair to be considered a candidate.

*.  In sift_detector::identify_inliers_via_fundamental_matrix(), we replace
the number of inliers as the RANSAC score function with the robust error
term in eqn 17 of "MLESAC: A new robust estimator with application to
estimating image geometry" by Torr and Zisserman (1996).

*.  akm::find_only_forward_SIFT_matches() finds one-directional candidate
matches between the features within *SIFT_descriptors_matrix_ptr and
*SIFT_descriptors2_matrix_ptr.  The IDs for such one-directional tiepoint
pairs are returned within an STL vector.

*.  Created new src/math/binaryfunc namespace.

*.  binaryfunc::binary_string_to_eight_byte_integer() takes in a string
such as "0101" and returns its 64-bit unsigned integer equivalent 5.

*.  binaryfunc::eight_byte_integer_to_binary_string() takes in a 64-bit
integer such as 5 and returns its binary string equivalent "101".

*.  binaryfunc::hamming_distance() computes the Hamming distance of two
integers ( considered as binary sequences of bits).  The run time of this
procedure is proportional to the Hamming distnace rather than to the number
of input bits.  It computes the bitwise exclusive or of the 2 inputs.  It
then returns the Hamming weight of the result (= number of nonzero bits)
using an algorithm of Wegner (1960) that repeatedly finds and clears the
lowest-order nonzero bit.

============================================================================
ROBOT code changes made on early Thurs, Apr 25, 2013:

*.  ISDS demos and standard pgms almost work OK as of Thurs, Apr 25, 2013 at
7:08 am (pfiles4_25a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on early Tues, Apr 23, 2013:

*.  Split apart akm::initialize_SIFT_feature_search() into
initialize_forward[backward]_SIFT_feature_search().

*.  sift_detector::prepare_SIFT_descriptors[2] imports SIFT feature
information for image i into FLANN matrix *SIFT_descriptors[2]_matrix_ptr
within *akm_ptr.  It also initializes the backward [forward] KDtrees in
*akm_ptr.

============================================================================
ROBOT code changes made on Sat, Apr 20, 2013; Sun, Apr 21, 2013; early Mon,
Apr 22, 2013:

*.  sift_detector::compute_tiepoint_corner_angles() takes in integers i,j
labeling input images.  Scanning through all features (F_ptr,D_ptr) for
image i and image j, it identifies those which do [NOT] represent tiepoint
pairs.  For this subset of tiepoint pairs [NOT], this method computes the 4
subregion orientation histogram corner angles defined in

"VF-SIFT: Very Fast SIFT Feature Matching" by F. Alhwarin,
D. Ristic-Durrant and A. Graser, 2010, pp 222-231.

According to this paper, the corner angles should [NOT] match for genuine
tiepoint pairs [NOT].  So this method tabulates the fractions of tiepoint
pairs [NOT] which have 0, 1, 2, 3 and 4 matching corner angles.

As of 4/20/13, we have empirically confirmed that at least 90% of genuine
tiepoint pairs have 3 or 4 matching corner angles.  In contrast, over 90%
of non-tiepoint pairs have fewer than 3 matching corner angles!

*.  sift_detector::count_SOH_corner_angle_matches() takes in two 128-dim
SIFT descriptors.  It computes 4 sub-region orientation histogram angles
from both descriptors.  This method returns the number of SOH angles that
lie within 36 degrees of each other.

*.  sift_detector::compute_SOH_angle() takes in indices 0 <= i,j <= 3 that
label one of 16 subregions.  It computes the subregion's angle as defined
in eqn (1) of "VF-SIFT: Very Fast SIFT Feature Matching" by F. Alhwarin et
al.

*.  Streamlined akm::load_SIFT_descriptors[2] methods.

============================================================================
ROBOT code changes made on Sun, Apr 14, 2013; Mon, Apr 15, 2013:

*.  mains/gist/REMOVE_DANGLING_GIST_FILES scans through all gist files
within the testing images subdirs.  For each gist file, it searches for a
corresponding test image.  If no such test image exists, this program
deletes the dangling gist file.

*.  mains/gist/REPLACE_WHITESPACES_W_UNDERSCORES scans through all flickr
image filenames.  It replaces any space, tab or parentheses in input flickr
image filenames with underscores.

*.  mains/gist/DELETE_EMPTY_FLICKR_IMAGES scans through a specified
subdirectory containing new, raw images semi-automatically downloaded from
flickr.  In April 2013, we empirically found that several downloaded flickr
images are essentially content-free.  Such empty flickr images all seem to
have byte-size = 9218.  So this program deletes any flickr image with this
particular byte count.

*.  ISDS demos and standard pgms almost work OK as of Mon, Apr 15, 2013 at
9:10 pm (pfiles4_15a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Sat, Apr 6, 2013; Sun, Apr 7, 2013; early Mon,
Apr 8, 2013:

*.  Created new src/video/gistfuncs.cc namespace.

*.  gistfunc::compute_gist_descriptor() takes an input image and first
rescales/crops it down to output_width x output_height (256x256).  It next
converts the resized image to PPM format.  The Lear GIST descriptor is
calculated and exported to output text file gist_filename.

*. mains/gist/CLASSIFY_IMAGES recursively imports all image files from some
specified subdirectory.  It also imports probabilistic decision functions
for several scene categories previously generated via progarm SVM_GIST.
Looping over each input image, CLASSIFY_IMAGES computes its GIST descriptor
and scene category probability.  Any probability below some input threshold
is ignored.  The maximal surviving probability is used to classify the
scene for the input image.  A soft link is generated between classified
images and scene subdirectories.

*.  mains/gist/QUANTIZE_COLORS imports a set of images and computes their
color histograms.  Each image's histogram is exported to a text file with a
.colorhist suffix.

*.  gistfunc::compute_color_histogram() takes an input image and computes
its color histogram.  It exports the results to the output text file
specified by input argument color_histogram_filename.  If the histogram is
successfully exported, this boolean method returns true.

============================================================================
ROBOT code changes made on Thurs, Apr 4, 2013:

*.  ISDS demos and standard pgms almost work OK as of Apr 4, 2013 at 12:41 pm
(pfiles4_4a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sun, Mar 31, 2013:

*.  Created new mains/gist/ subdir.

*.  mains/gist/COMPUTE_GIST imports images from a series of input
subdirectories. Each input image is first rescaled and cropped down to
256x256 pixels in size.  The LEAR C program is then called to compute a
3*512 dimensional descriptor for the subsampled image.  All GIST descriptor
vectors are written to output text files.

*.  mains/gist/COMPRESS_GIST imports GIST descriptor files from a set of
input subdirectories.  A binary hdf5 file is generated which contains all
GIST descriptors for each input subdirectory.

*.  mains/gist/GIST_RECOG imports gist descriptors for 8 outdoor scenes.
It classifies each descriptor as belonging or not to each of the 8
categories based upon their thresholded probability values.

============================================================================
ROBOT code changes made early on Fri, Mar 29, 2013:

*.  imagefunc::extract_subimage() invokes ImageMagick's convert -extract
command in order to excise a specified region from an input image to an
output file.

============================================================================
ROBOT code changes made on Mon, Mar 25, 2013:

*.  ISDS demos and standard pgms almost work OK as of Mar 25, 2013 at 4:57 pm
(pfiles3_25c.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sun, Mar 24, 2013:

*.  camerafunc::vcorrect_WISP_image() takes in a raw WISP-360 panorama
along with parameters A and phi for its sinusoidal horizon fit.  This
method vertically translates each column of pixels within the input
panorama by a U-dependent V-offset so that the physical horizon appears as
a horizontal line in the output image.

*.  mains/dime/VCORRECT_PANOS imports fitted sinusoid horizon parameters
generated by program FIT_HORIZONS.  Looping over a set of raw WISP
panoramas, it applies U-dependent V-offsets to each input image.  The
physical horizon within a corrected panorama appears as a horizontal line
in the output image.  VCORRECT_PANOS also generates subsampled versions of
the corrected panoramas on which SIFT/ASIFT can later be run in order to
fix residual U-warping.

*.  camerafunc::ucorrect_WISP_image() takes in a previously v-corrected
WISP panorama generated by program VCORRECT_PANOS.  It also imports
parameters for a periodic U-coordinate fit that were derived via SIFT/ASIFT
feature matching between the 0th and some later WISP frame stored in
*input_texture_rectangle_ptr.  Looping over all pixels within an
"un-U-warped" version of the later panorama frame panorama, this method
finds their progenitor pixels within the later frame.  Progenitor pixel RGB
values are transfered to their "un-U-warped" counterparts within
*output_texture_rectangle_ptr.  The "un-U-warped" image returned in
*output_texture_rectangle_ptr should (hopefully) closely match the 0th WISP
panorama.

*.  mains/dime/UCORRECT_PANOS first imports a set of subsampled,
"V-corrected" WISP panoramas separated in time generated by program
VCORRECT_PANOS.  It extracts SIFT and ASIFT features via calls to Lowe's
SIFT binary and the affine SIFT library.  Consolidated SIFT & ASIFT
interest points and descriptors are exported to key files following Lowe's
conventions. UCORRECT_PANOS performs tiepoint matching via homography
estimation and RANSAC.

Each tiepoint pair between a 0th and later WISP frame establishes a
correspondence between some horizontal "X" and and counterpart "U"
coordinate.  Define Delta=U-X.  We fit a periodic function of the form

Delta = U-X = avg_Delta + beta sin(2 PI x/Umax+phi)
		+ gamma sin(4 PI x/Umax+phi)

to all tiepoint pairs between the 0th and later WISP frames.  A brute-force
search is conducted for parameters beta, gamma and phi.  The fitted
function for Delta is subsequently used to "un-U-warp" the input
"V-corrected" panorama.

UCORRECT_PANOS exports a set of full-resolution WISP panoramas which should
(theoretically) be stabilized relative to the 0th frame's V-corrected
panorama.

============================================================================
ROBOT code changes made on Sat, Mar 23, 2013:

*.  Starting to successfully extract horizon from Deer island WISP panos.

============================================================================
ROBOT code changes made early on Thurs, Mar 21, 2013:

*.  Still trying to debug flood filling.

============================================================================
ROBOT code changes made on Tues, Mar 19, 2013:

*.  Renamed mains/dime/ASIFTVID.cc as TEMPORAL_MATCHER.cc

============================================================================
ROBOT code changes made on Sat, Mar 16, 2013; Sun, Mar 17, 2013; early Mon,
Mar 18, 2013:

*.  mains/dime/HORIZON imports a set of 2D feature pixel coordinates
(px,py) that were manually selected via GIMP from a Wisp-360 panorama.  The
pixels all lie along the horizon separating sky from sea.  HORIZION
performs a brute-force sinusoidal fit of the form py = py_avg + A sin[
(2*PI/lambda)*px + phi_0 ] for parameters A, phi_0 and py_avg.


*.  mains/dime/RESET_HORIZON takes in sinusoidal fit parameter py_avg found
in program HORIZON.  It shifts WISP panel jpgs so that py_avg --> 0.5*pixel
height.  After this shift, the horizon separating sky from sea lies (on
average) at the vertical mid-line of each WISP panel image.

*.  In OBSFRUSTUM::draw_rays_thru_imageplane_features_to_worldplane(), now
explicitly set stationary_Graphical_flag=false for newly instantiated
ground_cylinder and imageplane_cylinder.  Cylinders appear again in NYC ESB
demo program.

*.  ISDS demos and standard pgms almost work OK as of Mar 17, 2013 at 1:30
pm (pfiles3_17b.tgz) on ROBOT laptop.  


*.  In 2nd texture_rectangle constructor, changed input filename argument
from string& to string.

*.  mains/geo/RESTRICTED_ASIFT can now display one camera's footprint
within another's image plane.

============================================================================
ROBOT code changes made early on Tues, Mar 12, 2013:

*.  mains/geo/TRIANGULATE exports hardware-based camera parameters and
triangulated ground points to bundle_raw.out.  BUNDLER is subsequently
called to perform (re)bundle adjustment with camera focal parameters held
fixed at their previously calibrated values.  Bundle-adjusted camera
positions are written to an output text file.

============================================================================
ROBOT code changes made on Fri, Mar 8, 2013; Sat, Mar 9, 2013; Sun Mar 10,
2013; early Mon, Mar 11, 2013:

*.  Starting to angularly bin candidate tiepoint pairs used for fundamental
matrix estimation.

*.  Added int_array_ptr, float_array_ptr and nn_queries_times_nn member
vars to akm class.

*.  In akm::find_forward[backward]_SIFT_matches(), we now check if
exisiting array objects are not large enough to hold current query
information.  Only if not do we destroy existing and create new array
objects.

*.  Overloaded mathfunc::random_sequence() to return first sequence_length
entries within a randomized sequence of [istart , istart+1 , ... , istop].

*.  mains/geo/FLIR_FOCAL imports 3D/2D tiepoints selected from HAFB ALIRT
and FLIR video frames as well as corresponding GPS camera position
measurements.  FLIR_FOCAL computes world-space angles between all tiepoint
pairs and derives a dimensionless focal parameter from each angle.  We
wrote this utility program in order to calibrate "five deg" f.

*.  Added elevation_bias to mains/geo/TRIANGULATE.  Lat-lon georegistration
of flight facility orbit pass becomes respectable when elevation_bias=-1.5
degs.

*.  ISDS demos and standard pgms almost work OK as of Mar 11, 2013 at 8:25
am (pfiles3_11a.tgz) on ROBOT laptop.  But cylinders in NYC demo program
no longer appear on road!

============================================================================
ROBOT code changes made early on Tues, Mar 5, 2013:

*.  Placed copy of ASIFTVID into mains/dime to for WISP panel stabilization
purposes.

============================================================================
ROBOT code changes made on Sun, Mar 3, 2013; early Mon, Mar 4, 2013:

*.  Program PARSE_DOC_TOPICS parses the document-topics text file generated
by MALLET.  It sorts coarse topics according to their document membership.
PARSE_DOC_TOPICS next exports the sorted coarse topics and lists their
associated fine topics sorted by fine document membership.  The top words
for each sorted coarse topic and the associated fine topics are also
exported.

Finally, PARSE_DOC_TOPICS generates a second output file that contains
document IDs sorted by the coarse and fine topics to which they correspond.

*. Program POPULATE_TOPIC_DOC_DIRS generates a set of subdirectories
labeled by coarse and fine topic IDs.  It then fills these subdirectories
with soft links to document files for each coarse and fine topic.

*.  Program TOPIC_DOCRELNS imports the "Bag of words" generated by
TEXT2WORDS into an STL map.  Looping over components corresponding to
corresponding coarse and fine topics, it also reads in text files from a
series of specified subdirectories.  TOPIC_DOCRELNS first outputs a file
containing document ID vs document filename.  Looping over all strings
within all text documents, TOPIC_DOCRELNS next performs the same cleaning
operations on each string as TEXT2WORDS did to generate the bag of words.
It then computes a normalized term frequency for each cleaned string as
well as an inverse document frequency.  TOPIC_DOCRELNS exports the file
"word_importance.dat" which contains cleaned words sorted according to
their inverse document frequencies.

TOPIC_DOCRELNS performs an SVD on the word-document matrix and reduces its
dimensionality to k_dims=300 x n_text_files.  Working with the reduced
word-document matrix, it subsequently computes tfidf genvectors for each
document which have unit magnitude.  Genmatrix *docs_overlap_ptr holds the
dotproducts between every document tfidf genvector with every
other. Finally, TOPIC_DOCRELNS exports an edge list where nodes correspond
to document IDs and edge weights equal scaled versions of the
document-document inner products.

============================================================================
ROBOT code changes made early on Fri, Mar 1, 2013:

*.  ISDS demos and standard pgms almost work OK as of Mar 1, 2013 at 8:03 am
pm (pfiles3_1a.tgz) on ROBOT laptop.

................

*.  mains/textsearch/PARSE_DOC_TOPICS parses the document-topics text file
generated by MALLET.  It sorts coarse topics according to their document
membership.  PARSE_DOC_TOPICS next exports the sorted coarse topics and
lists their associated fine topics.  Finally, it exports the top words for
each sorted coarse topic and the associated fine topics.

============================================================================
ROBOT code changes made on early Tues, Feb 26, 2013:

*.  mains/textsearch/TOPIC_HIERARCHY reads in a set of document words
corresponding to "coarse" and fine topics generated by MALLET.  For each
fine topic, it counts the number of document words associated with all
coarse topics.  Based upon the maxima of these document word counts,
TOPIC_HIERARCHY associates each fine topic with a unique coarse topic.  It
exports a text file containing fine topic vs coarse topic IDs and max
document word overlap counts.

============================================================================
ROBOT code changes made on Sun, Feb 24, 2013; early Mon, Feb 25, 2013:

*.  Generalized mains/imagesearch/update_image_times.cc to handle Reuters
news articles.

*.  Added mains/textsearch/README.mallet to repository.

*.  mains/textsearch/SYNTHESIZE_MALLET_TOPIC_DOCS is a variant of
SYNTHESIZE_TOPIC_DOCS. It imports topic words generated by the Machine
learning for language toolkit (MALLET).  For each topic, it generates a
text document containing topic keywords whose repetition frequencies are
correlate with individual topic words' importance. The synthesized text
documents are exported to topic_subdir/topic_doc_NNN.txt.

============================================================================
ROBOT code changes made early on Fri, Feb 22, 2013:

*.  mains/dime/DIME_SA is a variant of program LOS.  It will become a 3D
situational awareness tool for the DIME project.

============================================================================
ROBOT code changes made early on Weds, Feb 20, 2013:

*.  Starting to add capability to display graphs within Michael Yee's
viewer which come from files rather than the image database.

============================================================================
ROBOT code changes made on Tues, Feb 19, 2013:

*.  ISDS demos and standard pgms almost work OK as of Feb 19, 2013 at 12:41 pm
(pfiles2_19a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Mon, Feb 11, 2013:

*.  homography::compute_camera_params_from_zplane_homography() takes in
imageplane center point (u0,v0).  It also works with the current homography
which is assumed to have been derived from matching an aerial image of a
ground Z-plane.  It computes a 7-parameter pinhole model approximation for
the camera (f, rotation, translation) and returns its projection matrix P.

============================================================================
ROBOT code changes made on Fri, Feb 8, 2013; Sat, Feb 9, 2013; Sun, Feb 10,
2013;

*.  In geomfunc::multi_line_intersection_point(), the 3x3 denom matrix can
have nearly zero determinant.  So we explicitly evaluate the determinant
and return false if it's too small.

*.  mains/geo/ORTHORECTIFY is finally starting to yield reasonable results
for 21 image subset of pass 15!

*.  In Terrain_Manipulator class, added max_camera_height_above_grid_factor
member with default value of 10 along with set method.  Reset this
parameter to 100 in mains/photosynth/VIEWBUNDLER for GEO frusta viewing
purposes.

*.  Added root_sift_matching_flag member to sift_detector class with
default true value along with set method.

*.  In sift_detector::compute_fundamental_matrix_via_RANSAC(), increased
minimal_number_of_inliers from 10 to 25.

*.  If SIFT, ASIFT or ALL key files already exist in their sift_keys/,
asift_keys/ or all_keys/ subdirs of bundler_IO_subdir, we assume they do
NOT need be regenerated.

*.  mains/geo/RESTRICTED_ASIFT is a variant of program ASIFTVID.  It
performs expensive feature matching only between pairs of aerial video
frames whose hardware estimates for camera orientations indicate that the
separation angle between image planes is less than some threshold value.

============================================================================
ROBOT code changes made on Sun, Feb 3, 2013; early Mon, Feb 4, 2013:

*.  camerafunc::rectify_image() takes in some image within
*texture_rectangle_ptr which is to be rectified via homography H.  The
new, rectified image's width and height are passed as input parameters
along with pixel bounding box limits in the warped image plane.
Rectify_image exports a warped version of the input image to output
rectified_image_filename.

*.  Moved analyze_SAR.cc, generate_SAR.cc and SAR_propagator.cc out of
mains/geo into mains/falconI

*.  In akm class, we now instantiated forward_matches_map_ptr and
backward_matches_map_ptr within allocate_member_objects() rather than
deleting and creating inside of find_forward[backward]_SIFT_matches().
This change seems to fix a memory bug.

*.  geometryfunc::multi_line_intersection_point() now returns bool flag
indicating computation's success or failure.

*.  mains/geo/ORTHORECTIFY imports bundle-adjusted triangulated points and
camera parameters for some set of input aerial images.  It fits a world
z-plane to the triangulate points (which we assume provides a good
approximation to the groundplane). ORTHORECTIFY then reprojects each aerial
image onto the ground plane and outputs an orthorectified image.

============================================================================
ROBOT code changes made on Fri, Feb 1, 2013:

*.  ISDS demos and standard pgms almost work OK as of Feb 1, 2013 at 2:46
pm (pfiles2_1a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Thurs, Jan 31, 2013:

*.  mathfunc::n_real_cubic_roots() computes the discriminant for a cubic
polynomial.  It returns the number of real roots based upon the sign of the
discriminant.

============================================================================
ROBOT code changes made on Mon, Jan 28, 2013:

*.  ISDS demos and standard pgms almost work OK as of Jan 28, 2013
at 11:08 am (pfiles1_28b.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sun, Jan 27, 2013:

*.  mains/geo/GROUNDPLANE imports the sparse point cloud generated by
PARSE_SSBA.  It fits a plane to the cloud and computes the distribution of
point distances to the fitted plane.  Any point that lies more than 5
quartile-widths away from the median distance is assumed to be an outlier.
GROUNDPLANE exports a cleaned TDP file consisting of just inlier points.

*.  mains/photosynth/RECTIFY implements the rectification algorithm
presented by A. Fusiello, E. Trucco and A. Verri in "A compact algorithm
for rectification of stereo pairs".  For each image pair labeled by indices
i and j, RECTIFY computes homographies Hi and Hj which warp the input
images.  Corresponding pixels in the warped images have the same height
values.  The warped image pairs are exported to jpg files.

============================================================================
ROBOT code changes made early on Thurs, Jan 24, 2013:

*.  mathfunc::getRandomInteger() returns an integer uniformly distributed
among 0, 1, 2, ..., N-1.

============================================================================
ROBOT code changes made on Tues, Jan 22, 2013:

*.  ISDS demos and standard pgms almost work OK as of Jan 22, 2013
at 10:11 am (pfiles1_22a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sun, Jan 20, 2013; Mon, Jan 21, 2013:

*.  sift_detector::export_features_to_Lowe_keyfile() generates an output
text file which follows Lowe's SIFT keyfile conventions.  We wrote this
method so that we could export SIFT + ASIFT features to a keyfile which
could subsequently be imported into BUNDLER.

*.  Added f_dims and d_dims integer member variables to sift_detector
class.  Increased f_dims from 9 to 10.

*.  Added mains/geo/README.geo . 

*.  FeaturesGroup::generate_features_map_for_photos() now stores feature
index as the last element within fourvector
(pass_number,U,V,feature_index).

*.  Added INT_MAP* multiple_image_index_ptr member to instantaneous_obs
class along with several methods analogous to those for score member.

*.  Privatized FeaturesGroup::accumulate_feature_info().

============================================================================
ROBOT code changes made on Weds, Jan 16, 2013:

*.  mains/plume/DBVISIBILITY now imports temporal composite masks generated
by TEMPORAL_COMPOSITES.  It generates and exports thresholded versions of
these mosaics.  It also can use the thresholded masks to restrict the
3D visibility volume.

============================================================================
ROBOT code changes made on Tues, Jan 15, 2013:

*.  mains/plume/TEMPORAL_MOSAICS loops over all tripod cameras.  For each
pixel in a tripod camera's mask, it computes the maximum intensity value
over all time-slices.  The resulting temporal mosaic mask (hopefully)
provides a good indication as to where plume activity actually occurred
within a particular camera's image plane.  We intend to use the temporal
mosaics to ignore image plane regions where no smoke ever passed from 3D
volume reconstruction.

============================================================================
ROBOT code changes made on Mon, Jan 14, 2013:

*.  Moved files out of bundler onto orange disk #6.  Moved files off orange
disk #6 onto orange disk #4.

============================================================================
ROBOT code changes made on Sat, Jan 12, 2013; Sun, Jan 13, 2013:

*.  sift_detector::export_fundamental_matrix() takes in integer indices i
and j that label the current photo pair.  It writes out the 3x3 fundamental
matrix corresponding for this pair to a text file whose name contains those
of the two photos.

*.  genmatrix::flipud() intentionally mimics matlab's "flip upside-down"
function.  It swaps the current matrix's top row with its bottom, its
next-to-top row with its next-to-bottom, etc.

*.  genmatrix::QR() calls the Householder method in the Eigen library in
order to decompose the current genmatrix into a product Q*R where Q is an
orthogonal matrix and R is an upper triangular matrix.

*.  genmatrix::RQ_decomposition() performs a series of row & column
upside-down flips, left-right reversals and transpositions.  It yields a
decomposition of *this into the product R*Q where R is an upper triangular
matrix while Q is an orthogonal matrix.

*.  Practical autocalibration is starting to show signs of promise!

*.  ISDS demos and standard pgms almost work OK as of Jan 13, 2013
at 7 pm (pfiles1_13d.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sun, Jan 6, 2013; early Mon, Jan 7, 2013:

*.  mains/plume/GEOREG_TRIPOD8 is a specialized utility that we wrote in
order to calibrate some of the camera parameters for video camera sitting
on tripod #8 for the Nov 2012 plume experiment in South Carolina.  Bundler
failed to reasonably reconstruct the camera parameters for video camera #8.
So we have to resort to semi-automatically calibrating this particular
camera.

*.  ISDS demos and standard pgms almost work OK as of Jan 7, 2013 at
8:35 am  (pfiles1_7a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Jan 4, 2013:

*.  Starting to add adjusting OBSFRUSTUM functionality.

============================================================================
ROBOT code changes made on Sat, Dec 29, 2012; Sun, Dec 30, 2012; Mon, Dec
31, 2012:

*.  stringfunc::integer_to_letters() takes in integer i ranging from 0 to
675.  It maps these input integers onto one and two letter combinations.

*.  mains/textsearch/SYNTHESIZE_TOPIC_DOCS imports final.beta files
generated by David Blei's Latent Dirichlet Allocation codes.  For each
connected coponent within a specified image graph hierarchy, it generates a
text document containing topic keywords whose repetition frequencies are
proportional to the probabilities imported from the LDA-C beta files.  The
synthesized text documents are exported to topic_subdir/topic_doc_NNN.txt.

*.  mains/textsearch/CLUSTER_CCS imports the edge list calculated by
DOCRELNS from synthesized topic keyword text files generated by
SYNTHESIZE_TOPIC_DOCS.  It then fills STL map cc_cluster_map with connected
component integer IDs as a function of cluster ID.  Connected component
cluster information is exported to an output file along with all topic
keywords corresponding to the clusters.

*.  In graph_hierarchy class, generalized COMPONENTS_LEVELS_NODES_MAP type
COMPONENTS_LEVELS_MAP which includes cc position, label and topic dependent
vars.

*.  After lots of trial and error, we have generated a quasi-reasonable 2D
layout for the 43K Reuters articles data set!

*.  ISDS demos and standard pgms almost work OK as of Dec 31, 2012 at
9:27 am  (pfiles12_31a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Weds, Dec 26, 2012:

*.  mains/textsearch/CCKEYWORDS iterates over all connected components
for a specified image graph hierarchy.  For each component, it
imports the text files corresponding to node members.  Sparse word
histograms are written to an output file which can be ingested by David
Blei's Latent Dirichlet Allocation codes.  An executable script that calls
Blei's codes is also generated by CCKEYWORDS.  When the script is run, the
top 5 terms in the top 5 topics for each connected component are written to
an output file within a topics subdirectory of the connected components
directory.

============================================================================
ROBOT code changes made on Sat, Dec 22, 2012; Sun, Dec 23, 2012; Mon, Dec
24, 2012; Tues, Dec 25, 2012; early Weds, Dec 26, 2012:

*.  mains/textsearch/TEXT2HTML reads in a set of text files (e.g. scraped
from Reuters' new feed) from a specified subdirectory.  It generates simple
html versions of the input text files with rudimentary formatting.
TEXT2HTML then converts the html into postscript and jpg formats.  The html
and jpg files are archived while the postscript versions are deleted.

*.  mains/textsearch/REMOVE_DUPLICATES searches through all text files
within a specified subdirectory.  It checks if a file and its immediate
successor are identical via the unix "diff" command.  If so, the successor
text file along with any html and jpg versions are moved into duplicate
subdirectories.

*.  Forced to comment out calls to isfinite() in genvector, threevector and
linesegment classes.  Do NOT understand why compiler is forcing us to make
these changes now after having worked with isfinite() for many years...

*.  mains/textsearch/HEADLINE2THUMBNAIL is a specialized utility which we
wrote for Reuters news articles.  It extracts the first headline from each
input Reuters text file and generates an HTML file containing just the
headline in large font.  The HTML output is converted to postscript and
then to jpg via ImageMagick.  Final thumbnails are deposited within the
thumbnails_subdir specified below.

*.  imagesdatabasefunc::get_connected_component_image_URLs() queries the
images table within *gis_database_ptr for all URLs corresponding to the
specified graph hierarchy and connected component.  It returns the
retrieved URLs within STL vector image_URLs.

============================================================================
ROBOT code changes made on Sat, Dec 8, 2012 through early Mon, Dec 17,
2012:

*.  Added mains/textsearch to repository

*.  mains/textsearch/PDF2TEXT runs the built-in unix command pdftotext on
a set of PDF files within a specified subdirectory.

*.  mains/textsearch/TEXT2WORDS imports all text files from a specified
subdirectory as well as a stop list of common words.  It loops over all
strings within all of the input documents.  TEXT2WORDS drops any non-letter
characters it encounters within a string and converts all upper-case
letters to lower-case.  It also discards very short strings and stems all
surviving strings.  TEXT2WORDS exports a "Bag of words" file which is
ordered according to stemmed string frequency.

*.  mains/textsearch/DOCRELNS imports the "Bag of words" generated by
TEXT2WORDS into an STL map.  It also reads in all text files from a
specified subdirectory.  DOCRELNS first outputs a file containing document
ID vs document filename.  Looping over all strings within all text
documents, DOCRELNS next performs the same cleaning and stemming operations
on each string as TEXT2WORDS did to generate the bag of words.  It then
computes a normalized term frequency for each cleaned, stemmed string as
well as an inverse document frequency.  DOC_RELNS exports the file
"word_importance.dat" which contains stemmed words sorted according to
their inverse document frequencies.  It next computes tfidf genvectors for
each document which have unit magnitude.  Genmatrix *docs_overlap_ptr holds
the dotproducts between every document tfidf genvector with every other.
Finally, DOCRELNS exports an edge list where nodes correspond to document
IDs and edge weights equal scaled versions of the document-document inner
products.

*.  mains/textsearch/PDF2JPG reads in pdf files from a specified
subdirectory.  It generates JPG files of the PDF documents' first pages
using ImageMagick's convert utility.

*.  Modified program mains/textsearch/LOAD_IMAGE_METADATA queries the user
to enter campaign and mission IDs for a set of text document images to be
loaded into the images table of the IMAGERY database.  It also requests a
subdirectory of /data/ImageEngine/ where a set of image and thumbnail files
must already exist.  LOAD_IMAGE_METADATA then inserts metadata for images
within image_list_filename into the images database table.

..............

*.  mains/textsearch/RESET_EDGE_THRESHOLD imports the edge list output by
program DOCRELNS.  It queries the user to enter a more strict edge weight
threshold and exports a new version of the edge list.

*.  mains/textsearch/KEYWORD_ATTRIBUTES queries the user to enter some
keyword.  It then scans all text files corresponding to URLs within the
images table of the imagery database that match onto a particular
graph_hierarchy_ID.  Any text file whose title/abstract contains a stemmed
version of the input keyword is considered to have the keyword as an
attribute.  Keyword attribute information is inserted into the
image_attributes table.

*.  mains/geo/ASIFTVID extracts 2D tiepoint pairs using Lowe's SIFT binary,
the OpenCV FREAK detector and the affine SIFT library.

*.  ISDS demos and standard pgms almost work OK as of Dec 17, 2012 at
9:02 am  (pfiles12_17b.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Thurs, Dec 6, 2012:

*.  Added mains/TOC12/writeup subdir to SVN repository.

============================================================================
ROBOT code changes made on Mon, Dec 3, 2012:

*.  Updated 3rd-party library lists in config/common_all.pro and
common_VMware.pro

*.  ISDS demos and standard pgms almost work OK as of Dec 2, 2012 at
1 pm (pfiles12_3a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Sun, Dec 2, 2012:

*.  To avoid circular dependence of sift_detector class upon FeaturesGroup
class, we have copied the FEATURES_MAP typedef from FeaturesGroup.h to
sift_detector.h.

*.  mains/geo/MATCHER pops open two windows containing 2D images.  It
imports and displays a set of previously calculated feature tiepoints for
both images.  The user may then enter new features in either window.
MATCHER performs affine fitting to the previously calculated tiepoints in
order to estimate and display the corresponding location for the new
feature in the other window.

==========================================================
ROBOT code changes made on Fri, Nov 30, 2012:

*.  mains/plume/BINARY_2_IMAGE reads in bzipped files generated by
CSV_2_BINARY which compresses change-detection masks from CSV to a
quantized binary format.  It parses each binary file and exports a
corresponding JPG.

............

*.  mains/plume/REMOVE_LEADING_WHITESPACE is a specialized utility which we
wrote in order to eliminate a leading space that appeared in the filenames
for CSV mask files generated by Joe Isaacson in Nov 2012.

===============================================
ROBOT code changes made on Tues, Nov 27, 2012 & Weds, Nov 28, 2012:

*.  Created new src/image/arrayfuncs namespace.

*.  arrayfunc::parse_CSV_file() imports a comma-separated-value file which
is assumed to be filled with a rectangular array of double-precision
numbers.  It instantiates and returns *ztwoDarray_ptr which is filled with
the parsed values.

*.  Added filefunc::bzip2_file() and bunzip2_file().

*.  mains/plume/CSV_2_BINARY reads in comma-separated value files ending
"txt" suffixes from the present working directory.  Entries within these
CSV files are assumed to correspond to logs of 3D gaussian change-detection
probabilities generated by Joe Isaacson.  This program parses the input CSV
files, quantizes their gaussian probabilities and exports a binary array of
short (2 byte) integers.  The exported binary files are bzipped2 in order
to minimize their disk usage.

============================================================================
ROBOT code changes made on Fri, Nov 23, 2012; Sat, Nov 24, 2012; Mon, Nov
26, 2012:

*.  texture_rectangle::refresh_ptwoDarray_ptr() and
fill_ptwoDarray_from_single_channel_byte_data() now return ptwoDarray_ptr.

*.  In tree::get_next_leafnode_ptr(), added missing leafnode_iter++
statement.

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 26, 2012 at
8:20 am (pfiles11_26a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Sat, Nov 10, 2012; Sun, Nov 11, 2012:

*.  sift_detector::import_asift_matches() imports the matchings text file
generated by demo_ASIFT.  It parses the UV coordinates for tiepoint pairs.
This method fills image_feature_info[i] and image_feature_info[j] with the
parsed tiepoint pair information.

*.  sift_detector::recover_inlier_tiepoints() extracts XY and UV
coordinates for tiepoint pairs from inlier_tiepoint_pairs.  Results are
returned within member STL vecdtors inlier_XY and inlier_UV.

*.  Added vector<int> inlier_tiepoint_ID member to sift_detector class
along with get methods.

*.  Spun off image_matcher class from sift_detector class.  

*.  mathfunc::fit_2D_affine_transformation() takes in at least 3 pairs of
twovectors q_vecs and p_vecs.  It performs a least-squares fit for 2x2
matrix A and translation twovector trans which optimally satisfy p_i = A_ij
* q_j + trans_i .  This method returns score function S = sum_i (p_i -
[Aq+t]_i )**2

============================================================================
ROBOT code changes made on Tues, Nov 6, 2012:

*.  ISDS demos and standard pgms almost work OK as of Tues, Nov 6, 2012 at
10 am (pfiles11_6a.tgz) on ROBOT laptop.

..............

*.  Small changes to PG_RECOG_PROCESSOR and TANKSIGN_PROCESSOR before
transfering to Minitaur TOC12 laptop.

============================================================================
ROBOT code changes made on Sat, Nov 3, 2012 & early Sun, Nov 4, 2012:

*.  videofunc::annotate_image_with_text() takes in *texture_rectangle_ptr
which is assumed to already contain an image as well as
*text_texture_rectangle_ptr whose width and height must equal that of
*texture_rectangle_ptr.  Looping over all text entries within STL vector
text_lines, this method generates a png file with colored text strings
against a black background.  It subsequently fills
*text_texture_rectangle_ptr with the colored text strings superposed
against the original image.

*.  signrecogfunc::export_bbox_polygons() draws colored rectangles around
classified TOC12 signs.  It also annotates these boxes with the symbols'
labels in their lower left corners.

*.  mains/TOC12/IMAGE_FILLER writes a stream of images to a hardwired
output images subdir.  We wrote this program to simulate PointGrey imagery
being dumped to some subdirectory from which our TANK_SIGNS and PG_RECOG
programs should take their imagery input.

*.  mains/TOC12/IMAGE_READER is a playground which reads the current set of
images within a specified subdirectory.  It moves all images except the
latest one to an archive subdirectory which is time-stamped.  We wrote this
playground program to simulate TANK_SIGNS and PG_RECOG taking input from
some hardwired subdirectory where TOC12 PointGrey will be dumped.

============================================================================
ROBOT code changes made on Fri, Nov 2, 2012:

*.  Checking in version of Makefile_TOC12_laptop which works on Minitaur
laptop.

============================================================================
ROBOT code changes made on Thurs, Nov 1, 2012:

*.  Creating Makefile_TOC12 which has as many libraries stripped from it as
possible.

................

*.  Continuing to strip down Makefile_TOC12_laptop.

*.  Had to insert ugly #define, #ifdef and #endif C-preprocessing commands
into astro_geo/geofuncs.cc, astro_geo/Ellipsoid_model.cc and
image/raster_parser.cc in order to avoid needing to link against libgdal
which cannot be installed onto minitaur TOC12 laptop.


============================================================================
ROBOT code changes made on Weds, Oct 31, 2012:

*.  mains/TOC12/DETECT_CORRUPTED searches for a grey-colored vertical
stripe located on the RHS of PointGrey images after they have had white
borders removed.

*.  signrecogfunc::detect_corrupted_PointGrey_image() takes in the filename
for some PointGrey image.  It searches for a grey-colored vertical stripe
located on the RHS of the input image.  If such a stripe is found, this
boolean method returns true.

============================================================================
ROBOT code changes made on Tues, Oct 30, 2012:

*.  GENERATE_SYMBOL_IMAGES draws non-sign backgrounds from more_internet
rather than internet subdir of TOC12/images/non_signs

============================================================================
ROBOT code changes made on Mon, Oct 29, 2012:

*.  Tweaked liberalized color parameters in RGB_analyzer class based upon
tennis bubble photos of 4'x4' TOC12 signs shot with PointGrey cameras.

*.  signrecogfunc::crop_white_border() removes white border pixels
surrounding PointGrey images captured within Tennis Bubble on Saturday, Oct
27, 2012.

*.  mains/TOC12/PG_RECOG is a variant of SIGN_RECOG which is specialized
for the PointGrey cameras.

============================================================================
ROBOT code changes made on Fri, Oct 26, 2012:

*.  Reworked mains/TOC12/TANK_SIGNS so that it handles checkerboard 10th
TOC12 sign.  

============================================================================
ROBOT code changes made on Sat, Oct 20, 2012:

*.  Updated mains/TOC12/generate_symbol_images.cc for truly final set of
TOC12 signs.

============================================================================
ROBOT code changes made early on Tues, Oct 16, 2012:

*.  ISDS demos and standard pgms almost work OK as of Tues, Oct 16, 2012 at
8:10 am (pfiles10_16a.tgz) on ROBOT laptop.

*.  bounding_box::overlap() takes in bounding box bbox.  If bbox
overlaps any part of *this, this boolean method returns true.

============================================================================
ROBOT code changes made on Sat Oct 13, 2012; Sun, Oct 14, 2012 & early Mon,
Oct 15, 2012:

*.  Added adjacent_regions_map member to extremal_region class.

*.  Created new class src/image/extremal_regions_group.cc 


*.  Add new bright_region_flag bool member to extremal region class along
with set/get methods.

*.  Eliminated most mserfunc references in BLACK_SIGNS in favor of new
extremal_regions_group class.

============================================================================
ROBOT code changes made early on Weds, Oct 3, 2012:

*.  mains/geo/ANALYZE_SAR now uses union_find datastructure to cluster
together backprojected SAR blob rays whose ground intersection points lie
close together in 3D world-space.

*.  Trying to add increment frame forward/backward functionality to
MovieKeyHandler class.

...........

*.   Added project_frames_onto_zplane_flag member to OBSFRUSTAGROUP class
along with set method.

*.  Added get_prev_framenumber() member to AnimationController class.

*.  AC::increment[decrement]_frame_counter() now calls
set_curr_framenumber().

============================================================================
ROBOT code changes made early on Mon, Oct 1, 2012:

*.  Added mains/geo/PROPAGATOR.cc to repository.

============================================================================
ROBOT code changes made on Sat, Sep 29, 2012:

*.  Added counter conditions into
filefunc::alternative_files_in_just_subdir().

*.  mains/TOC12/SYMBOL_DESCRIPTORS now implements sign-dependent color ->
greyscale conversion.

*.  ISDS demos and standard pgms almost work OK as of Sat, Sep 29, 2912 at
3:24 pm (pfiles9_29b.tgz) on ROBOT laptop.


============================================================================
ROBOT code changes made early on Thurs, Sep 27, 2012:

*.  mains/sift/TIEPOINTS now exports html file containing multi-coord
tiepoints.

...........

============================================================================
ROBOT code changes made early on Tues, Sep 25, 2012:

*.  SIGN_RECOG can start to take in arbitrary color sign ID.

============================================================================
ROBOT code changes made early on Thurs, Sep 20, 2012:

*.  mains/TOC12/MSERS can now display bright and dark MSERS.

============================================================================
ROBOT code changes made on Sat, Sep 15, 2012; early Mon, Sep 17, 2012:

*. Added PolyLinesGroup::set_PolygonsGroup_ptr().

*.  filefunc::files_in_just_subdir() now executes unix find command with
maxdepth = 1 rather than c-like listing command.

*.  ISDS demos and standard pgms almost work OK as of Mon, Sep 17, 2012 at
7:30 am (pfiles9_17a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made early on Thurs, Sep 13, 2012:

*.  Dark grey flood filling is showing promise.

============================================================================
ROBOT code changes made early on Weds, Sep 12, 2012:

*.  FIND_COLORED_SIGNS is starting to reasonably nominate blue radiation
and gas TOC12 signs.

============================================================================
ROBOT code changes made on Sat, Sep 8, 2012; Sun, Sep 9, 2012; early Mon,
Sep 10, 2012:

*. mains/TOC12/FIND_COLORED_SIGNS is a playpen for experimenting with
nominating TOC12 ppt sign regions based primarily upon their color content.

*.  mains/TOC12/QUANTIZE_COLORNAMES loops over all HSV coordinates.  For
each color, it exports a quantized color name.  As of 9/10/12, we
do NOT need to use this program in order to generate a lookup table
for 16M RGB triples.

*.  RGB_analyzer::initialize_color_maps() breaks apart HSV color
space into distinct regions.  For example if hue=green, we work
with green, dark green, black, light green, grey-green and grey
depending upon combinations of saturation and value color
coordinates.  After much trial and error in Sep 2012, we
empirically found that 256x256x256=16M RGB triples can be
reasonably approximated by the O(30) quantized colors below.  But
smaller numbers of quantized colors do NOT work well.  

*.  RGB_analyzer::isolate_quantized_colors() takes in an image with
quantized colors along with a set of desired quantized color names.  It
exports in *filtered_texture_rectangle_ptr a new quantized image where all
colors not among the desired set are recolored dark purple.  This method
next performs a few rounds of recursive filling in order to eliminate small
noise islands.  Finally, it exports a binary mask for the desired quantized
color regions in *binary_texture_rectangle_ptr.

*. connected_components::select_extremal_regions() imports one particular
level within the *tree_ptr and loops over all its extremal regions.  It
culls out and returns those regions whose aspect_ratio, compactness, number
of holes and number of horizontal crossings lie within specified bounds.

*.  Added 16M binary file color/RGB_lookup.table to repository.

*.  ISDS demos and standard pgms almost work OK as of Mon, Sep 10, 2012 at
8 am (pfiles9_10b.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made early on Fri, Sep 7, 2012:

*.  videofunc::compute_RGB_fluctuations() converts the 1-pixel runs within
input STL vector member RLE_pixel_IDs into pixel locations.  It retrieves
RGB values for those pixels from *texture_rectangle_ptr.  This method
returns the quartile widths of the pixels' RGB values.

============================================================================
ROBOT code changes made on Weds, Sep 5, 2012:

*.  LOCATE_SYMBOLS now draws differently-colored bboxes around the 9 TOC12
ppt signs.

*.  colorfunc::get_color_index() takes in a color's string and returns its
corresponding integer index:

============================================================================
ROBOT code changes made on Tues, Sep 4, 2012:

*.  ISDS demos and standard pgms almost work OK as of Tues, Sept 4, 2012 at
10:40 am (pfiles9_4a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Sat, Sep 1, 2012; Sun, Sep 2, 2012:

*.  Created new src/video/RGB_analyzer class

*.  Added README.gimp to repository.

*.  In colorfunc::string_to_color(string colorstr), fixed black -> brown
bug.

*.  Added lttriple.h to repository.

*.  mains/TOC12/QUANTIZED_LOOKUP exports or imports a binary file
containing 256x256x256=16M bytes. If exporting, this program reads in a set
of hand-picked RGB triples with assigned quantized color names.  It
essentially sets up a Voronoi diagram with 3D RGB space and maps all 16M
RGB triples to their closest Voronoi neighbor.  If importing,
QUANTIZED_LOOKUP queries the user to enter an RGB triple and returns their
quantized values.


============================================================================
ROBOT code changes made on Sat, Aug 25, 2012; Sun, Aug 26, 2012; early Mon,
Aug 27, 2012:

*.  Installed OpenCV_2.4.2 in favor of OpenCV_2.3.1a.  Needed to comment
out sift_detector::extract_SUFT_features() which is now broken as a result
of OpenCV upgrade.

*.  ISDS demos and standard pgms almost work OK as of Mon, Aug 27, 2012 at
7:40 am (pfiles8_27a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Mon, Aug 20, 2012:

*.  ISDS demos and standard pgms almost work OK as of Mon, Aug 20, 2012 at
12:32 pm (pfiles8_20b.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Sun, Aug 19, 2012:

*.  Privatized text_detector::compute_patch_histogram() member funcs.

============================================================================
ROBOT code changes made early on Tues, Aug 14, 2012:

*.  Added more test images to mains/TOC12/FLOODFILL.

============================================================================
ROBOT code changes made on Fri, Aug 10, 2012; early Mon, Aug 13, 2012

*.  Cleaned up dtfunc::compute_distance_transform().

*.  dtfunc::chamfer_matching_score() takes in two binary images
*pbinary_twoDarray_ptr and *qbinary_twoDarray_ptr.  It computes and
returns the average distance of each non-null entry in
*qbinary_twoDarray_ptr to the closest non-null entry in
*pbinary_twoDarray_ptr.

*.  extremal_region::run_length_encode() takes in integer-valued
*cc_twoDarray.  It encodes each run of 1-pixels by its starting and ending
pixels' IDs.  This method follows the RLE conventions spelled out in
section 2.3.6 of "Computer and Robot Vision" by Haralick and Shapiro (TA
1632.H37 vol 1, 1992).

*.  extremal_region::run_length_decode() converts the 1-pixel runs stored
within STL vector member RLE_pixel_IDs into pixel locations.  It resets the
values of those pixels within *cc_twoDarray_ptr equal to the current
extremal region's ID.

*.  ISDS demos and standard pgms almost work OK as of Mon, Aug 13, 2012 at 7:15
am (pfiles8_13a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sat, Aug 4, 2012; Sun, Aug 5, 2012:

*.  connected_components::update_changed_pixels_map() iterates through
*changed_pixels_map_ptr.  It replaces original connected component labels
within the map's independent variables with their updated counterparts
following the call to update_connected_component_labels().

*.  In connected_components::recompute_connected_components(), changed
neighbor_px_sum, neighbor_py_sum, ..., neighbor_cube_py_sum &
neighbor_cube_z_sum from int to double in order to avoid 4-byte overflow.

*.  connected_components::build_extremal_regions_tree() first instantiates
treenodes for each entry wtihin *labels_map_ptr corresponding to
the input level.  It next loops over all pixels in
*cc_twoDarray_ptr and *prev_cc_twoDarray_ptr.  After comparing cc
labels, this method establishes parent-child relationships between
treenodes at current and previous levels.

*.  connected_components::update_treenodes_maps() sets
prev_treenodes_map_ptr=curr_treenodes_map_ptr.

*.  In compositefunc::average_pixels(), explicitly ensure xlow,xhigh,ylow
and yhigh remain within ztwoDarray bounds.

*.  ISDS demos and standard pgms almost work OK as of Mon, Aug 6, 2012 at 8
am (pfiles8_6a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Aug 3, 2012:

*.  Trying to get new vector_union_find approach to work in new_locate.
Badly failing so far.

*.  Reworked and simplified LOCATE_CHARS.

============================================================================
ROBOT code changes made early on Weds, Aug 1, 2012:

*.  In binaryimagefunc::compute_delta_Euler_number(), fixed marking of
upper left pixels in visited_twoDarray_ptr.  Euler computation is starting
to work for new version of recursive extremal region feature description.


============================================================================
ROBOT code changes made on Sat, Jul 28, 2012; Sun, Jul 29, 2012:

*.  Moved symbols2pngs.cc from mains/imagetext to mains/TOC12

*.  mains/TOC12/RESIZE_IMAGES needs to be executed from within some
subdirectory containg a set of PNG or JPG files.  It generates subsampled
versions of each input image whose maximum width and height do not exceed
640 x 480.  The output resized images are exported to ./resized_images.

*.  In connected_components::reset_image(), we now explicitly call
cc_twoDarray_ptr->clear_values().

*.  In videofunc methods display_line_segments() and display_polygons(),
we now delete dynamically instantiated but temporary ztwoDarray_ptr.

*.  connectfunc::create_extremal_region_pooled_memory() generates large
pools for treenodes and extremal regions to minimize dynamic creation times
for these objects.  As of 7/5/12, we believe a typical image can easily
have 100K extremal regions across 255 thresholds.


*.  connectfunc::delete_extremal_region_pooled_memory() deletes large
memory pools for treenodes and extremal regions.

*.  vector_union_find class now has TRIPLE type for dependent node.  Last
field holds void* data pointer.

*.  ISDS demos and standard pgms almost work OK as of Sun, Jul 29, 2012 at
10:20 pm (pfiles7_29j.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made early on Weds, Jul 25, 2012:

*.  Added several member functions to connected_components class which
start to iteratively compute component tree.  

============================================================================
ROBOT code changes made early on Tues, Jul 24, 2012:

*.  Reworked union_find class based on wikipedia discussion.

============================================================================
ROBOT code changes made on Mon, Jul 23, 2012:

*.  mains/afghanistan/REDGREEN is a specialized utility which we wrote in
July 2012 for Andrew Silberfarb's RCO demo.  This program reads in a set of
instantaneous visibility results generated by LOST from geotif files named
ptwoDarray_OBSFRUSTUM_0_frame_N.tif.  The input geotifs have 3 possible "z"
values corresponding to black, red and green colorings.  REDGREEN converts
greyscale input tifs into colored version and exports the results to
cropped geotif files.


============================================================================
ROBOT code changes made on Mon, Jul 16, 2012 - Mon, Jul 23, 2012:

*.  ISDS demos and standard pgms almost work OK as of Mon, July 23, 2012 at
7:10 am (pfiles7_23a.tgz) on ROBOT laptop.  

*.  Added templatized datastructures/Forest class to repository

*.  Added image/pixel_location, pixelNode and pixelForest classes to
repository.

============================================================================
ROBOT code changes made on Weds, July 11, 2012:

*.  Increased number of digits to 5 which are written to
connected_component file names in
conncted_components::export_connected_components().

============================================================================
ROBOT code changes made on Sat, July 7, 2012; Sun, Jul 8, 2012:

*.  Added previously_visited_flag member to treenode class along with
set/get methods.

*.  Added is_leaf_flag() member to treenode class.

*.  Add leaf_treenodes_map_ptr member to tree class along with leaf
treenode member functions

*.  Candidate char bbox placement works noticeably better after retraining
on 6K rotated text samples and 5K non-text samples!

============================================================================
ROBOT code changes made late on Thurs, July 5, 2012:

*.  Added reset_curr_treenodes_map_ptr() & get_next_treenode_ptr() members
to tree class.

*.  Added reset_child_treenode_ptr() and get_next_child_treenode_ptr()
members to treenode class.

*.  ISDS demos and standard pgms almost work OK as of Fri, Jul 6, 2012
at 8:20 am (pfiles7_6a.tgz) on ROBOT laptop.  


============================================================================
ROBOT code changes made on Weds, July 4, 2012:

*.  Created new image/extremal_region class.

*.  Created new datastructures/treenode and tree classes.

*.  Eliminated all dependence of connected_components class upon expensive
graph and node classes.  Work now with tree and treenode classes instead.

*.  Computation of std_dev and entropy slows KERMIT to a halt in
locate_chars!

*.  Completely overhauled connected_components class and LOCATE_CHARS.
Latter program now runs acceptably fast on KERMIT image.

============================================================================
ROBOT code changes made on Sat, Jun 30, 2012; Sun, July 1, 2012; Mon, July
2, 2012:

*.  Eliminated wasteful prev_pbinary_twoDarray_ptr, min_fill_frac and
max_fill_frac members from connected_components class.

*.  Added libconnexe to Makefile.

*.  videofunc::label_connected_components() takes in binary-thresholded
array *ptwoDarray_ptr which is assumed to be integer valued.  It
also takes in the number of neighbors (4,8) which define
connectivity in the binary input image.

This method calls the connected components extraction routines of
Gregoir Malandain.  This method returns a dynamically instantiated
twoDarray which contains integer labels corresponding to the
non-null valued connected components within *ptwoDarray_ptr.


*. connected_components::label_ccs() works with *pbinary_twoDarray_ptr and
assumes that null-valued entries equal zero.  It instantiates
*cc_twoDarray_ptr and fills its contents with connected component integer
labels.  The total number of connected components within
*pbinary_twoDarray_ptr is returned.

*.  binaryimagefunc::compute_delta_euler_number() takes in binary image
*pbinary_twoDarray_ptr whose null valued pixels are assumed to equal zero.
It also takes in an STL vector of pixel coordinates which are assumed to
have recently changed values from null to pfill.  This method returns the
change in Euler number associated with all pixels in pixel_pairs having
turned on from zero to pfill.

============================================================================
ROBOT code changes made on Thurs, Jun 28, 2012:

*.  Starting to enable plane picking with QTVIEWLADAR.

============================================================================
ROBOT code changes made early on Weds, Jun 27, 2012:

*.  In LOSMODELSGROUP::write_out_skymap_PNG_files(), changed
arrowhead_size_prefactor from 1 to 0.001*mdim/3.  LOST skymap flowfield
arrows look OK again.

*.  Saving state in LOST no longer works on ROBOT!

============================================================================
ROBOT code changes made on Fri, Jun 22, 2012; Sat, Jun 23, 2012; Sun, Jun
24, 2012; early Mon, Jun 25, 2012:

*.  geometry_func::compute_convex_hull() takes in a set of twovectors
within STL vector V.  It calls the qhull program and returns the convex
hull of the input points within a dynamically instantiated polygon.

*.  Added delete_graph_edge(), purge_nodes() and purge_graph_edges()
members to graph class. 

*.  Added XtwoDarray_ptr where X=p,R,G,B,A members to texture_rectangle
class.  At least partially fixed memory leak where we previously did NOT
destroy these dynamically allocated twoDarrays.

*.  texture_rectangle::convert_single_twoDarray_to_three_channels() takes
in twoDarray *qtwoDarray_ptr which we assume is filled with intensity
values ranging from 0 to 255.  We further assume *this has already been
initialized to have 3 color channels [e.g. via call to constructor #2
followed by call to generate_blank_image_file()].  This method sets the
R,G,B values for each pixel within the mdim x ndim texture rectangel equal
to the corresponding intensity within *qtwoDarray_ptr.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jun 25, 2012
at 7:24 am (pfiles6_25a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Sat, Jun 16, 2012 & Sun, Jun 17, 2012; Thu, Jun
21, 2012:

*.  Trying to extract character bboxes within input imagery.  Not working
at all...

*.  Character bboxes around words is starting to work.

============================================================================
ROBOT code changes made on Tues, Jun 12, 2012:

*.  geometry_func::polygon_difference() returns poly1-poly2 - i.e. the part
of polygon #1 which does not overlap with polygon #2.  The returned result
may be the null set.

*.  mains/modeling/POLY_DIFFERENCE reads in a set of OFF files derived from
Geoff Brown's parking lot and road PLY files (which he created in April
2012).  It first extracts the footprint polygons for each MIT model
building and each parking lot.  POLY_DIFFERENCE then subtracts all building
footprint polygons from each parking lot polygon.  Polyhedra corresponding
to trimmed parking lots are exported to OFF files.

============================================================================
ROBOT code changes made on Sat, Jun 9, 2012; Sun, Jun 10, 2012 and early
Mon, Jun 11, 2012:

*.  Created new class src/video/connected_components.cc

*.  connected_components::color_connected_components() takes in twoDarray
*ptwoDarray_ptr which is assumed to be filled with integer values.  Any
pixels corresponding to non-positive values are colored black.  Otherwise,
pixels with positive integer values are assigned quantized colors.  The
colored visualization of *ptwoDarray_ptr is exported to
output_image_filename.

*.  connected_components::compute_connected_components() takes in
*pbinary_twoDarray_ptr which is assumed to hold a binary image.  It scans
over all pixels within the binary image and looks for any which is non-zero
valued.  When it finds a non-zero valued pixel, it calls the basic fill
algorithm described in "Tint Fill" by Alvy Ray Smith.  The connected
component region is labeled with a single integer value within
*cc_twoDarray_ptr.  This method returns the total number of connected
components that it finds in
*pbinary_twoDarray_ptr.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jun 11, 2012
at 8 am (pfiles6_11a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Sat, Jun 2, 2012; Sun, Jun 3, 2012:

*.  Added mains/imagesearch/text_recognition/README.text_recog to
repository

*.  ISDS demos and standard pgms almost work OK as of Mon, Jun 4, 2012
at 7 am (pfiles6_4a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Fri, May 25, 2012:

*.  Created new mains/imagesearch/text_recognition subdir,

*.  mains/imagesearch/text_recogntion/NORMALIZE_CHARS reads in a set of JPG
files which contain single text characters from a directory tree.  It
reassigns uniform names to the input files of the form "12345.jpg".
NORMALIZE_CHARS also resizes each input jpg file so that its new height
precisely equals 32 pixels.

============================================================================
ROBOT code changes made on Mon, May 21, 2012:

*.  ISDS demos and standard pgms almost work OK as of Mon, May 21, 2012
at 8:20 am (pfiles5_12a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Mon, May 14, 2012:

*.  TOMCAT is totally fouled up on ROBOT as of morning of Tues, May 15, 2012!

============================================================================
ROBOT code changes made on Sat, May 12, 2012; Sun, May 13, 2012:

*.  ISDS demos and standard pgms almost work OK as of Sat, May 12, 2012
at 8:53 am (pfiles5_12a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

*. On 5/11/12, Jennifer Drexler suggested performing OpenLayers zoom
operations in order to force the main image to be recentered whenever a new
tab is entered.  After trial and error, we found that zooming in and out
results in the main image being successfully recentered.

*.  mains/imagesearch/LSD runs the line segment detector algorithm/code of
von Gioi (version 1.6 Nov 2011) on some specified input image.  It bins the
detected line segments into (segment azimuthal orientation angle,impact
parameter) cells.  Within each cell, LSD tries to concatenate line segments
into longer "super" segments.  Super segments whose lengths exceed some
minimal threshold are randomly colored within an output copy of the
original input image.

============================================================================
ROBOT code changes made on Sat, May 5, 2012; Sun, May 6, 2012:

*.  Temporal stepping buttons now appear to right of main image in IMAGE
thin client.  User can step forward/backward in time as well as to
beginning/ending images.  Thin client events are synced with graph viewer
and sauron_client responses.

============================================================================
ROBOT code changes made on early Tues, May 1, 2012:

*.  ISDS demos and standard pgms almost work OK as of Tues, May 1, 2012
at 8:11 am (pfiles5_1a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Sun, Apr 29, 2012 & early Mon, Apr 30, 2012:

*.  Added term_frequency float array member to akm class.

.................

*. mains/image_vocab/TFIDF reads in word counts for text files calculated
by program GENERATE_IMAGE_WORDS.  It counts the number of words for each
image.  TFIDF exports renormalized term frequencies to output text files
within a term_freqs subdirectory of sift_keys_subdir.  It also computes
inverse document frequencies within an output binary HDF5 file.

*.  mains/image_vocab/TFIDF2 reads in term frequencies and inverse document
frequencies generated by program TFIDF.  It forms TFIDF products for each
of N archive images and exports them to text files within a tfidf
subdirectory of sift_keys_subdir.  It also gzips all text files within the
term_freqs subdir.

*.  Added parse_exif_metadata_flag arguments to photograph and photogroup
constructors with default false values.

*.  Cleaning again IMAGEVOCAB main programs...

============================================================================
ROBOT code changes made on Thurs, Apr 26, 2012:

*.  mains/plume/GENERATE_SCRIPTS queries the user to enter a subdirectory of
./bundler/ in which some set of tripod images and bundler output reside.
It exports executable scripts for several programs that must be run in
order to georegister the tripod cameras, populate database tables and
reconstruct 3D point clouds from calibrated 2D tripod camera stills.

============================================================================
ROBOT code changes made early on Tues, Apr 24, 2012:

*.  Added CLIPPEDPOLYGON_BUILDING_POLYHEDRON_RECTANGLE_MAP member to
BuildingsGroup class along with get method.

*.  In Clipping::warp_texturable_rectangles(), label exported rectified
"decal" images with building, polyhedron and rectangle IDs.

.............

*.  Renamed mains/plume/print_params.cc as archive_camera_params.cc.

============================================================================
ROBOT code changes made on Mon, Apr 23, 2012:

*.  mains/models/COLORBLEND is a playground where we try to blend together
multiple rectified images corresponding to a particular rectangular
building panel.

============================================================================
ROBOT code changes made on Sat, Apr 21, 2012; early Mon, Apr 23, 2012:

*.  Updated config/common_all.pro and common_VMWARE.pro

*.  In PhotoServer::display_face_circles(), we restrict size of
human_faces_images so that purple face circles show up clearly.

*.  Created src/models/ParkingLot, ParkingLotsGroup, Road and RoadsGroup
classes.

*.  ISDS demos and standard pgms almost work OK as of Mon, Apr 23, 2012
at 6:30 am (pfiles4_23a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!
	
============================================================================
ROBOT code changes made on Thurs, Apr 19, 2012:

*.  jsonfunc::generate_human_faces_JSON_string() produces a
"SET_CONDITION_COLOR_MAPPER" JSON string which follows the schema specified
by Michael Yee in March 2012.  It takes in STL vector n_human_faces which
contains one or more number of faces to be marked in Michael's graph
viewer.  This method uses the "|=" syntax to indicate "one of " in order to
mark nodes containing multiple different numbers of faces.

============================================================================
ROBOT code changes made on Sat, Apr 14, 2012; Sun, Apr 15, 2012; Mon, Apr
16, 2012; early on Tues, Apr 17, 2012:

*.  In mains/imagesearch/LOAD_IMAGE_METADATA, UPDATE_IMAGE_TIMES and
FINDFACES, we now only insert metadata for images within the
image_list_filename and NOT for all images within images_subdir.  This
ensures consistency between SIFT graph calculated via parallelized bundler
on TXX and the images table within the imagery database!  GC SIFT graph
makes sense again after this change.

*.  Tried to robustify EO/IR discrimination in mains/imagesearach/EOVSIR.cc

*.  polyhedron::reconstruct_rectangular_sides_from_OFF_file() assumes the
input OFF file corresponds to a rectangular prism.  In this special case,
the first n_vertices worth of face indices correspond to upper and lower
triangle pairs which form rectangular side faces.  This method recovers the
4 vertices for each rectangular side and reconstructs a face from them.
The set of all polyhedron rectangle sides is returned within an STL vector.

*.   Added rectangle_side_faces STL vector member to Building class along
with get method.

*.  Clipping::tally_unoccluded_clipped_polygons() now ignores any polygons
whose unoccluded pixel content is negligibly small.

*.  In polyhedron class, added triangleface_rectangle_map_ptr member which
holds association between unclipped triangular polyhedron faces and
rectangle side face IDs.

*.  Added occluded_flag member to polygon class along with set/get methods
and default false value.

*.  Building::identify_occluded_rectangle_sidefaces() loops over all
rectangular side faces within the current building.  For each side face, it
searches for any others which are anti-parallel.  This method then computes
the distances of the first rectangle's corners to the second.  If the
distances are all small, the first rectangle abuts the second and is
completely occluded.  The occluded flag for the first rectangle polygon is
then set to true.

*.  Added MoviesGroup_ptr member to Clipping class along with set method.

*.  ISDS demos and standard pgms almost work OK as of Tues, Apr 17, 2012
at 7:16 am (pfiles4_17a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made early on Weds, Apr 11, 2012:

*.  mains/imagevocab/NPLUSONE queries the user to enter a full path to some
"N+1st" image.  It then calls Lowe's binary and generates a SIFT key file
in text and HDF5 binary formats.  The SIFT descriptors are subsequently
whitened via multiplication with the inverse square root SIFT feature
covariance matrix.  The whitened SIFT descriptors for the N+1st image are
exported to an output HDF5 binary file.

*.  Added mains/sift/README.match_features to repository

============================================================================
ROBOT code changes made late on Mon, Apr 9, 2012:

*.  Cleaned up Qt/web/qtlos.pro.

*.  ISDS demos and standard pgms almost work OK as of Mon, Apr 9, 2012
at 10:18 pm (pfiles4_9e.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Sat, Apr 7, 2012; Sun, Apr 8, 2012; early Mon,
Apr 9, 2012:

*.  As of Sunday, Apr 8, 2012, we have pushed fundamental matrix estimation
about as far as we can reasonably go at this time.  We have implemented the
automatic computation of F procedure outlined in section 11.6 of H&Z.  Yet
as of April 2012, we do NOT believe it is generally possible to recover
reliable epipoles for two pictures whose contents overlap and yet appear
significantly different.  Various articles (e.g. Overall view regarding
fundamental matrix estimation by Armangue and Salvi, 2003) also seem to
indicate other researchers have great difficulty recoving reliable epipolar
geometry for anything but the easiest of image pairs.

*.  mains/sift/EXTRACT_HESSIAN_AFFINE runs the Oxford
extract_features_64bit.ln binary on all input images and writes their ascii
key files to the keys subdirectory.

*.  mains/sift/CONSOLIDATE_FEATURES imports ascii SIFT and Hessian-affine
key files generated by EXTRACT_SIFT_FEATURES and EXTRACT_HESSIAN_AFFINE.
It ignores any hessian_affine feature whose pixel location lies too close
to some existing SIFT feature.  A consolidated set of "F" and "D"
genvectors is subsequently written to hdf5 binary format files for each
image.

*.  sift_detector::parse_consolidated_features() imports F and D
descriptors stored within binary hdf5 files for the input *photograph_ptr.
It reconstructs 9-dimensional *F_ptr and 128-dimensional *D_ptr genvectors
from the input binary files.  This method returns STL vector
currimage_feature_info containing pairs of feature genvector pointers
(F_ptr,D_ptr).

============================================================================
ROBOT code changes made early on Fri, Apr 6, 2012:

*.  mains/sift/LMFIT_TEST is a playground for Joachim Wuttke's LMFIT C/C++
library which performs LevenBerg-Marquardt least-squares minimization and
curve fitting.  As of April 2012, we suspect this package is better and
much easier to use than the older LEVMAR library!

*.  Moved compute_trivial[nontrivial]_projection_matrix() method out of
camerafuncs namespace into fundamental class.  Added P_ptr and Pprime_ptr
members to fundamental class along with get methods.


*.  fundamental::triangulate_noisy_tiepoints() takes in a pair of 2D
tiepoints UV and XY that only approximately satisfy XY * F * UV = 0 .  We
assume that *P_ptr and *Pprime_ptr corresponding to the current fundamental
matrix have already been calculated.  This method first computes a
corrected set of tiepoints that nearly precisely obey the epipolar
relation.  It then returns the corrected tiepoints' 3D progenitor.

*.  Added vector<twovector> inlier_XY, inlier_UV members to sift_detector
class.

============================================================================
ROBOT code changes made early on Weds, Apr 4, 2012:

*.  camerafunc::calculate_fundamental_matrix() computes F from two cameras
3x4 projection matrices.  It implements eqn (17.4) in "Multiple View
Geometry in Computer Vision" by Harlety and Zisserman (2nd edition).

*.  fundamental::compute_from_projection_matrices() also implements eqn
17.4.  

*.  camerafunc::compute_nontrivial_projection_matrix() takes in a
fundamental matrix.  The first camera's 3x4 projection matrix may be taken
to equal P = [ I_3x3 | 0 ] .  This method returns the second camera's 3x4
projection matrix which is consistent with the input fundamental matrix.
This method implements eqn 9.10 in "Multiple view geometry in computer
vision" by Hartley and Zisserman (2nd edition).

============================================================================
ROBOT code changes made on Sat, Mar 31, 2012; Sun, Apr 1, 2012; early Mon,
Apr 2, 2012:

*.  Completely reworked ancient complex class so that it's now based upon
std::complex<double> class.  Made necessary alterations to fourier and
waveform classes.

*.  Added new complexfuncs namespace to math dir.

*.  complexfunc::eigen_decomposition() takes in an nxn matrix *M_ptr.  It
returns the matrix eigenvalues within an STL vector of complex numbers.

*.  complexfunc::polynomial_value() takes in the (complex) coefficient for
the higest order term in a polynomial along with all its (complex) roots.
This method returns the (complex) value of the polynomial evaluated at
(complex) z.

*.  Implement Hartley normalization for input tiepoint coordinates in
fundamental::hartley_normalize_homogenous vectors().

*.  ISDS demos and standard pgms almost work OK as of Mon, Apr 2, 2012
at 7:19 am (pfiles4_2a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made late on Thurs, Mar 29, 2012 and early on Fri, Mar
30, 2012:

*.  Created new mains/imagetext subdir.

*.  mains/imagetext/WORDS2JPGS is a specialized program which tries to
generate text truth data for Geoff Brown's image text classifier.  It uses
the PNGWRITER library in order to convert words containing at least 8
characters into png images which are subsequently transformed to JPEG
format.  We intentionally vary the text foreground and background colorings
as well as its font.

*.  mains/sift/EXTRACT_SIFT_FEATURES now exports cumulative set of SIFT
feature descriptors as unsigned chars within an output binary file.

*.  Overloaded akm::load_SIFT_descriptors() to take in an unsigned char
array which presumably was read in from a binary file wherein SIFT
descriptors were represented as bytes.

============================================================================
ROBOT code changes made on Weds, Mar 28, 2012 & early Thurs, Mar 29, 2012:

*.  Starting to generate image vocabularies!

....................

*.  mathfunc::recursive_mean() sequentially takes in a set of genvectors.
Starting with a zero-valued mean vector, this method returns the mean of
the first n vectors at the nth recursion step.

*.  mathfunc::recursive_covariance() sequentially takes in a set of
genvectors.  Starting with a zero-valued covariance matrix, this method
returns the covariance of the first n vectors at the nth recursion step.

....................

*.  mathfunc::recursive_second_moment() sequentially takes in a set of
genvectors.  Starting with a zero-valued genmatrix, this method returns the
second moment of the first n vectors at the nth recursion step.

*.  videofunc::generate_thumbnail() now actually returns thumbnail filename
string.

*.  Trying to make our bundler output processing pipeline more
user-friendly.

*.  Created stripped version of README.view_bundler_output within
README.bundler for distribution to plume project participants.

============================================================================
ROBOT code changes made early on Mon, Mar 26, 2012 & early Tues, Mar 27,
2012:

*.  In genmatrix::inverse(), decreased determinant value check down to
1E-50.

*.  ISDS demos and standard pgms almost work OK as of Mon, Mar 26, 2012
at 10:30 am (pfiles3_26b.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

...................

*.  Starting to add parallel FLANN and FASTANN library functionality into
approximate kmeans (AKM) class.

*.  Added FLANN_flag member to sift_detector class along with set method.

============================================================================
ROBOT code changes made early on Fri, Mar 23, 2012:

*.  videofunc::resize_image() takes in the filename for some image along
with new x and y pixel dimensions.  It uses ImageMagick++ to resample the
input image and return the result within the specified output image file.

*.  src/mains/imagesearch/DOWNSIZE_IMAGES generates subsampled versions of
input photos within bundler_IO_subdir/images/downsized_images/.  This
expensive operation should only be performed once!

============================================================================
ROBOT code changes made late on Tues, Mar 20, 2012 & early on Weds, Mar 21,
2012:

*.  Added OpenSURF library and header files to /usr/local/

*.  int64 typedef in ffmpeg/BasicTypes.h conflict with analogous one in
OpenCV headers.  So we had to manually replace every instance of int64 with
long long in all ffmpeg files.  

...........

*.  After experiencing lots of troubles with compiling OpenSURF due to
OpenCV problems, we have commented out video/sift_detector.cc dependence on
OpenSURF.

============================================================================
ROBOT code changes made late on Mon, Mar 19, 2012 and early on Tues, Mar
20, 2012:

*.  vptree::median_separation_distance() takes in genvector
*p_ptr along with a set of metric space elements.  It computes the
distances between each of the latter and the former.  If *p_ptr is included
within any of the metric space elements, its zero distance to itself is
ignored.  This method returns the median value of the separation distances.

============================================================================
ROBOT code changes made on Sat, Mar 17, 2012; Sun, Mar 18, 2012; Mon, Mar
19, 2012:

*.  Added pngwriter library to Makefile.  Added freetype2 to include list.

*.  pngfunc::convert_textlines_to_PNG() calls pngwriter methods in order to
convert multiple lines of input text (passed via STL vector text_lines)
into a PNG image.

*.  Cloned qtphotoserver.cc onto qtgraphserver.cc

*.  Moved datastructures/treefuncs namespace into new graphs/vptree class.

*.  vptree::search_vp_tree() should initially be called with
query genvector *query_element_ptr and the root node of the vantage
point tree.  Member variable tau should also be set to the desired
search radius. Setting tau to POSITIVEINFINITY implies search
without constraint. Upon completion, this method returns the ID of
the nearest neighboring node within the VP tree to the query
element within best_node_ID.  And on return, tau equals the
distance between the query element and the best node.

*.  sift_detector::extract_CHOG_features() imports the image specified by
the input filename as well as a desired number of features to detect.  It
calls the Compressed Histogram-of-Gradients binary to compute
91-dimensional feature vectors.  Feature UV coordinates and 91-dimensional
values are returned within STL vector currimage_feature_info.

*.  Added math/gttwovector.h which is opposite of lttwovector.h

============================================================================
ROBOT code changes made early on Weds, Mar 14, 2012:

*. Added ground_z member to Building class along with get method.

*.  Starting to successfully backproject colors from georegistered ground
photos onto 3D building models.

...................

*.  sift_detector::extract_HOG_features() imports the image specified by
the input filename.  It sets up a lattice of U,V sites which covers the
image and whose dimensions are supplied as input parameters.  Looping over
each lattice site, this method calls the histogram-of-oriented gradients
binary to compute 128-dimensional feature vectors.  Feature UV coordinates
and 128-dimensional values are returned within STL vector
curr_image_feature_info.

============================================================================
ROBOT code changes made early on Tues, Mar 13, 2012:

*.  Added new subdir src/models to repository.

*.  BuildingsGroup::import_from_OFF_files() loops over all Object File
Format (OFF) files within OFF_subdir.  It extracts building and polyhedron
IDs from each OFF file.  This method instantiates all building polyhedra,
and it stores their correlated integer IDs within STL map member
*Building_polyhedron_map_ptr.

*.  Building::import_from_OFF_files() parses Object File Format (OFF) files
for the particular building labeled by input ID.  It instantiates its
polyhedra parts and returns their IDs within an output STL vector.

*.  Clipping::clip_face() takes in 3D face *face_ptr.  It returns a poiner
to a dynamically instantiated polygon which represents the part of the face
that lies within the camera's view frustum.  It also associates the clipped
3D polygon with its progenitor face and polyhedron IDs wtihin STL map
member *clipped_faces_map_ptr.

*.  PolyhedraGroup::generate_Building_Polyhedra() loops over all building
polyhedra within input *BuildingsGroup_ptr.  It instantiates Polyhedra
corresponding to each Building's polyhedra.

*.  Added ID member to polygon class along with set/get methods.

*.  Clipping::get_Face_Polyhedron_Building_IDs() takes in some pixel
location within the current image plane.  It retrieves and returns the
face, polyhedron and Building IDs corresponding to the specified pixel if
the clipping OBSFRUSTUM's ray intersects some clipped polygon.  Otherwise,
this method returns (-1,-1,-1).

....................

*.  Clipping::convert_orig_RGBs_to_HSVs() resets and fills member
twoDarrays *HtwoDarray_ptr, *StwoDarray_ptr and *VtwoDarray_ptr with hue,
saturation and value data extracted from an input image's original RGB
values.

*.  Added STL map associating polyhedron and Polyhedron pointers in
PolyhedraGroup class along with get methods.

============================================================================
ROBOT code changes made on Sat, Mar 10, 2012; Sun, Mar 11, 2012; early Mon,
Mar 12, 2012:

*.  mains/graph/MCL_CLUSTERS reads in cluster text files generated by the
Markov Clustering Algorithm (MCL).  It finds the maximum child node ID and
counts number of nodes per cluster.  MCL_CLUSTERS exports cluster metadata
to output text file clusters_info.dat.

*.  Recalculated clustering for NewsWarp and Tstorm imagery sets using MCL
rather than Kmeans clustering.  New clusters for these video sequences look
much better than old versions!

*.  classification_func::detectFaces() is a high-level subroutine which
takes in the file name of an image and returns an STL vector containing
circles enclosing detected human faces.

*.  mains/imagesearch/FINDFACES processes all images within the
subdirectory of /data/ImageEngine/ specified by the user.  It utilizes
OpenCV codes to generate circles around human faces within each image.  The
center and radius of each human face measured in pixels are exported to an
output text file along with image filenames.  Output from this program
becomes input to program INSERTFACES.

*.  mains/imagesearch/INSERTFACES queries the user to enter a hierarchy ID.
It also reads in human face circles extracted from a set of images which
are assumed to corresponding to the specified hierarchy.  This program
loads the metadata from the human face circle metadata into table
image_faces within the IMAGERY database.

*.  imagesdatabasefunc::insert_image_face() takes in metadata for a new
entry within the image_faces table of the IMAGERY database. It inserts this
metadata into *gis_database_ptr.

*.  ISDS demos and standard pgms almost work OK as of Mon, Mar 12, 2012
at 7:10 am (pfiles3_12a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

*.  Tried to fix imagesdatabasefunc::retrieve_closest_time_image() so that
it doesn't return any metadata from image table in IMAGERY database which
doesn't have corresponding node counterpart in nodes table.

============================================================================
ROBOT code changes made early on Fri, Mar 9, 2012:

*.  Added coloring histogram methods to videofunc namespace.

*.  Can start to generate color histogram after pushing button on colors
web page.

*.  Overloaded version of imagesdatabasefunc::get_image_URL() takes in an
image's hierarchy and node IDs and returns the corresponding URL stored
within the images table of the IMAGERY database.
 
============================================================================
ROBOT code changes made early on Thurs, Mar 8, 2012:

*.  graphdbfunc::retrieve_grandparent_node_ID_from_database() takes in the
IDs for a graph_hierarchy and a node.  It retrieves and returns the
grandparent ID for the input node.

============================================================================
ROBOT code changes made early on Weds, Mar 7, 2012:

*.  PhotoServer can now start to handle image geocoordinate get requests.

============================================================================
ROBOT code changes made early on Tues, Mar 6, 2012:

*.  ISDS demos and standard pgms almost work OK as of Tues, Mar 6, 2012
at 6:30 am (pfiles3_6a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

*.  Clipping::export_masks() writes visible clipped polygon
range information to an output JPEG file.  It also exports another
JPEG file which colors projected imageplane polygons according to
their progenitor world-space polygon IDs.

*.  Clipping::tally_unoccluded_clipped_polygons() loops over
*ptwoDarray_ptr and extracts clipped polygon IDs.  It returns a distinct
set of ordered polygon IDs within an output STL vector.

*.  Clipping::project_clipped_polygons_into_imageplane() instantiates
TwoDarrays *ztwoDarray_ptr and *ptwoDarray_ptr whose pixel dimensions match
those of the image corresponding to *clipping_OBSFRUSTUM_ptr.  Looping over
all clipped 3D polygons, it finds 2D UV bounding boxes for their image
plane projections.  Iterating over pu,pv pixels within each bounding box,
this method traces rays back to 3D polygon planes.  It stores plane minimal
ranges to planar intersection points within *ztwoDarray_ptr and 3D
progenitor polygon ID within *ptwoDarray_ptr.

*.  Clipping::consolidate_clipped_polygon_planes() loops over all polygons
within STL vector member clipped_face_polygon_ptrs.  It forces all polygons
which lie within the same plane to have the same fourvector pi representing
that plane.

*.  Clipping::draw_clipped_face_polygons() loops over all polygons within
member STL vector clipped_face_polygon_ptrs.  It ignores any polygon whose
ID does not appear within input STL vector
unoccluded_clipped_face_polygon_IDs.  Unoccluded polygons are added to
*Clipped_PolygonsGroup_ptr and colored so that they match their 2D
imageplane projections.

============================================================================
ROBOT code changes made on Mon, Mar 5, 2012:

*.  PROPAGATOR can now generate range and clipped Polygon ID masks

============================================================================
ROBOT code changes made on Sat, Mar 3, 2012; Sun, Mar 4, 2012; early Mon,
Mar 5, 2012:

*.  Reworked image server s.t. its response to Get_Graph requests contains
only attribute key and attribute value but NO attribute value type
metadata.

*.  Image server broadcasts user-selected attribute info according to
new schema devised by Michael Yee on Fri Mar 2, 2012.

*.  Added CaptureImageCallback and PixelBuffer classes to osg/osgSceneGraph
subdir.

*.  Starting to develop bijective map between clipped 3D face polygons and
projected imageplane polygons.

*.  Created math/ltfourvector.h from ltthreevector.h

*.  polygon::compute_normal() no longer assumes subsequent edges are not
parallel.

============================================================================
ROBOT code changes made on Fri, Mar 2, 2012:

*.  In plane(const threevector& V1,const threevector& V2, const
threevector& V3), no longer call construct_2D_coord_system().  Set plane's
origin = V1.

*.  In Clipping class, render clipped face polygons and edge polylines
using large UTM offsets and small relative vertices.  Eliminates flickering
problems.

============================================================================
ROBOT code changes made on Thurs, Mar 1, 2012 & early Fri, Mar 2, 2012:

*.  Only clip non-internal polyhedron edges in
Clipping::clip_polyhedron_edges().

*.  Added plane_ptr member to polygon class along with get method.

*.  geometry_func::ray_intersects_Triangle() takes in *triangle_ptr along
with the basepoint and direction vector for some ray.  If the ray pierces
the Triangle's interior, this boolean method returns true along with the
intersection point.  Otherwise, it returns false.

*.  Created separate infinite_line_intersection() and ray_intersection
members of plane class.

============================================================================
ROBOT code changes made on Weds, Feb 29, 2012 and early Thurs, Mar 1, 2012:

*.  plane::polygon_cleaved_by_plane() takes in polygon poly which is
assumed to nontrivially intersect the current plane object.  The input
polygon is triangulated, and each of its triangles are decomposed into
pieces lying on the side of the plane specified by input integer
plane_side_sgn.  The parts of the polygon triangles lying on the desired
plane are slightly inflated.  Their union is subsequently calculated via
General Polygon Clipper (GPC) algorithms.  The union polygon is converted
into a contour, and nearly parallel contour edges are coalesced.  Finally,
the consolidated contour is turned back into a dynamically instantiated
polygon whose pointer is returned by this method.

*.  plane::polygon_above_or_below_plane() is a high-level method which
takes in a polygon and integer plane_side_sgn indicating the plane side
parallel or antiparallel to the plane's normal direction vector.  It
returns a pointer to the polygon which resides completely on the specified
side of the plane.  The returned polygon may equal the input one, some
partial piece of the input polygon, or NULL.

*.  geometry_func::polygon_intersection() is a high-level method which
takes in a set of polygons assumed to lie in the XY plane.  It returns
their intersection within a single output polygon.

*.  camera_frustum::PolygonIntersectsFrustum() takes in a polygon poly.  If
poly lies completely outside the camera frustum this method returns NULL.
Otherwise, it returns a pointer to a dynamically instantiated clipped
version of poly which lies inside the camera frustum.

*.  Added ID member to polyhedron class along with get method.

============================================================================
ROBOT code changes made on Weds, Feb 29, 2012:

*.  plane::polygon_intersection_query() returns true [false] if the input
polygon does [not] intersect the current plane.

*.  plane::decompose_intersecting_triangle() takes in a triangle which is
assumed to nontrivially intersect the current plane object.  It returns the
directed linesegment intersection between the plane and the input triangle.
It also computes and returns the decomposition of the input triangle into a
sub-triangle and quadrilateral.  Finally, this method returns the sgn
relative to the plane of the decomposed, smaller triangle's vertex which
lies outside the plane.

*.  Overloaded version of member function
plane::decompose_intersecting_triangle() takes in a triangle which is
assumed to nontrivially intersect the current plane object.  It also takes
in integer plane_side= +1 [-1] which indicates the side of the plane
parallel [anti-parallel] to the plane's normal direction vector.  It
returns either a triangle or quadrilateral which represents the part of the
input triangle lying on the specified side of the current plane.


*.  Renamed vertex array member in polygon class as vertex_ptr.  Globally
replaced vertex[i] with get_vertex() or set_vertex() in polygon,
parallelogram and regular_polygon classes.

*.  Added triangles_group_ptr member to polygon class along with get
methods.

*.  ISDS demos and standard pgms almost work OK as of Weds, Feb 29, 2012
at 11 am (pfiles2_29d.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

============================================================================
ROBOT code changes made on Sat, Feb 25, 2012l Sun, Feb 26, 2012; early Mon,
Feb 27, 2012:

*.  imagesdatabasefunc::get_zeroth_image_npx_npy() takes in campaign and
mission IDs for a set of images which are assumed to all have the same
pixel width and height (e.g. cropped aerial FLIR video frames).  It returns
npx and npy for the zeroth image in the data set.

*.  mains/imagesearch/EOVSIR works with a set of FLIR video frames which
were either gathered in the EO or IR frequency bands.  Looping over such a
set of JPEG video frames, this program tests the RGB content within a small
lattice of pixels.  If the absolute discrepancy between RG, GB or BR values
exceeds some threshold, the image is declared to have been collected by the
FLIR's EO camera.  The EO classified images are added as entries to the
image_attributes table in the IMAGERY database.

*.  mains/imagesearch/HFOV_ATTRIBUTES works with a set of FLIR video frames
loaded into the IMAGERY database.  It first recovers all URLs corresponding
to a specified hierarchy_ID and graph_ID=0 along with campaign, mission,
image and datum IDs.  HORIZFOV then recovers the horizontal field-of-view
values stored within the sensor_metadata table of the IMAGERY database.  It
populates the image_attributes table with FOV key-value pairs.

*.  mains/imagesearch/ATTRIBUTE_IMAGES now makes sure user entered
key-value pair exists within image_attribute_metadata table of IMAGERY
database.

*.  Multi-attribute information can now be easily specified via check-boxes
on Attributes tab of IMAGE thin client.  PhotoServer handles populating
this webpage.  And it broadcasts ActiveMQ messages with user-selected
attributes to display in the GraphViewer.

*.  PhotoServer::reset_default_image_display() broadcasts an ActiveMQ
message when the user wants to view graph nodes colored according to their
clustering and no longer by image attributes.

*.  Starting to insert connected component info into connected_components
table of IMAGERY database.

============================================================================
ROBOT code changes made on Thurs, Feb 23, 2012 & early Fri, Feb 24, 2012:

*.  Export connected component information to nodes table in IMAGERY
database.

*.  imagesdatabasefunc::images_in_database() queries the images table
within *gis_database_ptr for the existence of row corresponding to
specified campaign and mission IDs.  If no such entries are found, this
boolean method returns false.

*.  Added image attribute member functions to PhotoServer class.

============================================================================
ROBOT code changes made early on Weds, Feb 22, 2012:

*.  ISDS demos and standard pgms almost work OK as of Weds, Feb 22, 2012
at 6:54 am (pfiles2_22a.tgz) on ROBOT laptop.  But arrowheads on skymaps
are HUGE!

*.  bundlerfunc::generate_trivial_bundle_dot_out_file() extracts the number
of images from input list_tmp_file.  It exports a new bundle_trivial.out
file to bundler_IO_subdir which contains just this n_image information.

============================================================================
ROBOT code changes made on Tues, Feb 21, 2012:

*.  imagesdatabasefunc::retrieve_closest_time_image() queries the images
table within *gis_database_ptr for the row entry whose epoch time lies
closest in absolute value to input_epoch_time.  It returns that image's
datum_ID, image_ID, epoch and URL.

============================================================================
ROBOT code changes made on Sat, Feb 18, 2012; Sun, Feb 19, 2012; Mon, Feb
20, 2012:

*.  mains/imagesearch/LOAD_SENSOR_METADATA queries the user to enter
campaign and mission IDs for a set of image package files containing
georegistered camera calibration parameters.  LOAD_IMAGE_METADATA then
inserts metadata into the sensor_metadata table of the IMAGERY database.

*.  mains/modeling/PUSHCARTREG is a specialized variant of GEOREG.  It
reads in the bundle.out file for the MIT2317+Carleton Street "pushcart"
photos generated by Nick Armstrong-Crews via Visual Structure for Motion
rather than Noah Snavely's bundler program.  For each VSfm reconstructed
photo, this program queries the sensor_metadat table within the IMAGERY
database to see if corresponding georegistered UTM coordinates exist for
the camera's position.  It then performs a RANSAC loop over 200 pairs of
reconstructed vs georegistered camera position vectors and solves for the
global rotaton, scaling and translation that maps the former to the latter.
The parameters which yield the minimal residual are returned as the best
estimate for the global transforamtion.

*.  mains/modeling/WRITE_VIEW_PUSHCART_SCRIPT is a specialized utility
which generates an executable script for viewing only Carleton Street
"pushcart" photos.

*.  imagesdatabasefunc::retrieve_campaign_UTM_zonenumber() queries the
world_regions table within *gis_database_ptr for the UTM zonenumber
corresponding to the input campaign_ID.

*.  mains/imagesearch/UPDATE_IMAGE_TIMES queries the user to enter campaign
and mission IDs for a set of images already loaded into the images table of
the IMAGERY database.  It retrieves the UTM zonenumber corresponding to a
set of images residing within /data/ImageEngine/ from the world_regions
table of the IMAGERY database.  If FLIR_flag==true, UPDATE_IMAGE_TIMES
extract local image times from the image filenames themselves.  Otherwise,
it tries to extract local image times from exif metadata tags.
UPDATE_IMAGE_TIMES subsequently converts local image times to UTC and
stores timing metadata within the images table of the IMAGERY database.

*.  mains/imagesearch/MICROTHUMBNAILS reads in a set of thumbnails within
frames_subdir and its children subdirectories.  It generates
microthumbnails for display within a SIMILE timeline.

============================================================================
ROBOT code changes made on Fri, Feb 17, 2012:

*. Communications between Image Viewer and Timeline are starting to work
OK.

.............

*.  In camera::get_Rnoah_to_peter_ptr(), added new rotation matrix that is
appropriate for Visual Structure From Motion reconstructions.


============================================================================
ROBOT code changes made on Thurs, Feb 16, 2012:

*.  In jsonfunc::write_data_json_string(), now export epoch time in integer
milliseconds.

============================================================================
ROBOT code changes made on Weds, Feb 15, 2012:

*.  imagesdatabasefunc::retrieve_images_within_time_interval() queries the
images table within *gis_database_ptr for entires corresponding to the
input campaign and mission IDs and lying within the specified time
interval.  It fills output STL vectors with correlated image IDs epoch
times and thumbnail_URLs.

============================================================================
ROBOT code changes made on Tues, Feb 14, 2012:

*.  imagesdatabasefunc::get_campaign_mission_IDs() takes in Hierarchy and
Graph IDs and returns the corresponding campaign and mission IDs from the
IMAGERY database.

........................

*.  Two-way communication between thumbnail and timeline thin clients is
starting to work!

============================================================================
ROBOT code changes made on Mon, Feb 13, 2012:

*.  ISDS demos and standard pgms almost work OK as of Mon, Feb 13, 2012
at 1:35 pm (pfiles2_13a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Sat, Feb 11, 2012; Sun, Feb 12, 2012:

*.  Clock::ISO_format() returns the UTC in ISO 8601 format which is the
International Standard for the representation of dates and times.

*.  Multi-scale timeline interacting with PhotoServer is starting to work!

============================================================================
ROBOT code changes made late on Thurs, Feb 9, 2012 & early Feb 10, 2012:

*.  PhotoServer now returns Date and UTC values for each photo which are
displayed next to selected main image in IMAGE thin client.

*.  imagedatabasefunc::get_campaign_mission_image_IDs() takes in an image's
datum ID and returns its corresponding campaign, mission and image IDs from
the IMAGERY database.


============================================================================
ROBOT code changes made early on Thurs, Feb 9, 2012:

*.  Starting to add image attribute methods to imagesdatabasefuncs
namespace.

.................

*.  mains/imagesearch/ATTRIBUTE_IMAGES takes in campaign and mission IDs.
It then queries the user to enter an image filename substring to search for
within all URLs matching the specified campaign and mission.
ATTRIBUTE_IMAGES fills in rows within the image_attributes table of the
IMAGERY database corresponding to the retrieved URLS with key-value pairs
specified by the user.

============================================================================
ROBOT code changes made on Tues, Feb 7, 2012 & early Weds, Feb 8, 2012:

*.  KMEANS_CLUSTERS now forces number of evenly spaced graph levels to be
greater than or equal to 2.

*.  Extensively refactored graphdbfuncs namespace.  Also created new
imagesdatabasefuncs namespace in src/video which replaces deprecated
photodbfuncs namespace left over from TOC10.  

*.  PhotoServer no longer uses photodbfuncs.

*.  Added image time retrieval methods to PhotoServer class.

============================================================================
ROBOT code changes made on Mon, Feb 6, 2012:

*.  Updated mains/photosynth/SIFT_PARSER.cc

============================================================================
ROBOT code changes made on Sat, Feb 4, 2012; Sun, Feb 5, 2012:

*.  mains/plume/THUMBNAILS no longer creates thumbnails from thumbnail
jpegs.

*.  MoviesGroup::insert_photo_filename_into_map() takes in a Movie ID,
frame number and photo filename.  It inserts these correlated data within
STL map member *photo_filenames_map_ptr.

*.  MoviesGroup::load_current_photos() first checks if the current
framenumber differs from the previously stored frame number.  If not, it
loops over all Movies and retrieves their photos corresponding to the
current frame number from member STL map *photo_filenames_map_ptr.  It then
resets the Movies' displayed photos to their current set.

*.  mains/plume/DBVIEW3DMOVIE is a variant of VIEW3DMOVIE.  It queries the
photos table in the plume database for correlated Movie IDs, slice numbers
and thumbnail filenames.  DBVIEW3DMOVIE then populates the MoviesGroup STL
map with these metadata.  When the set of point clouds are played back as a
3D movie, the 10 tripod cameras' image planes are updated with their
appropriate photos.  DBVIEW3DMOVIE consequently visualizes the tripod
imagery as video clips within the 10 OBSFRUSTA.

*.  mains/plume/CALC_VOLUMES takes in the starting and stopping numbers for
a set of TDP files containing 3D reconstructed plume volumes.  For each TDP
file, a VCP is filled with the point clouds contents.  The number of filled
voxels multiplied by voxel volume yields the total volume for the 3D plume
within the TDP file.

*.  Added mains/imagesearch to repository.

*.  mains/imagesearch/LOAD_IMAGE_METADATA queries the user to enter
campaign and mission IDs for a set of images to be loaded into the images
table of the IMAGERY database.  It also requests a subdirectory of
/data/ImageEngine/ where a set of image and thumbnail files must already
exist.  LOAD_IMAGE_METADATA then inserts metadata for those images into the
images database table.

*.  mains/imagesearch/UPDATE_IMAGE_TIMES queries the user to enter campaign
and mission IDs for a set of images already loaded into the images table of
the IMAGERY database.  It also requests a UTM zonenumber corresponding to a
set of images resided wtihin /data/ImageEngine/.  UPDATE_IMAGE_TIMES then
tries to extract local image times from exif metadata tags, converts them
to UTC and stores the timing metadata within the images database table.

*.  ISDS demos and standard pgms almost work OK as of Mon, Feb 6, 2012
at 7:20 am (pfiles2_6a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Feb 3, 2012:

*.  raster_parser::read_single_channel_image() imports the contents from a
grey-scale image with a single channel rather than an RGB image with 3
channels.  It instantiates and returns a twoDarray containing the
grey-scale image information.  This method is intended to be high-level and
self-contained.

============================================================================
ROBOT code changes made on Thurs, Feb 2, 2012 & Fri, Feb 3, 2012:

*.  Added antipodal approach to voting in DBVOLUME.

============================================================================
ROBOT code changes made on Weds, Feb 1, 2012:

*.  OBSFRUSTAGROUP::update_subfrusta() now performs sanity check on human
MODEL's altitude above ground.  If human MODEL lies significantly below or
above ground, reject subfrustum bounding box as a false alarm:


============================================================================
ROBOT code changes made on Tues, Jan 31, 2012:

*.  mains/modeling/DPM_BBOXES parses text files generated by Myra Nam using
the Deformable Parts Model matlab codes.  It extracts bounding boxes in UV
image plane coordinates which supposedly surround people within a 20 image
subset of the MIT2317 photo set.

*.  Resurrected 3D white-man model insertion in program VIEWBUNLDER.

.....................

*.  plumedatabasefunc::retrieve_mission_metadata_from_database() retrieves
the day number and experiment label given input fieldtest and mission IDs.

*.  Added bundler_IO_subdir member to photogroup class along with set/get
methods.

*.  mains/modeling/VIEWSUBFRUSTA is a variant of program VIEWBUNDLER.  It
instantiates and displays sub OBSFRUSTA corresponding to bounding boxes
selected within individual photo image planes.

*.  Added SUBFRUSTAGROUP_ptr member to OBSFRUSTAGROUP class 

*.  Can now start to view multiple subfrusta per OBSFRUSTUM surrounding DPM
human target candidates.

============================================================================
ROBOT code changes made on Mon, Jan 30, 2012:

*.  track::median_altitude() returns the median value of all waypoints'
altitudes.

*.  Separated off generate_flightpath_from_waypoints() from
set_general_flightpath() in LOSServer class.

*.  LOSMODELSGROUP::start_ROI_visibility_computation() sets the MODEL's
raytrace_occluded_ground_regions_flag to true, broadcasts an initial
progress value, resets the AnimationController to its first frame and to
PLAY mode.  This method should be called only by the PYXIS server version
and not the interactive version of LOST.

*.  qtLOSTserver can now start to respond to single POST command sent via
qtpyxis_client and generate time-averaged ROI PNG output.

................

*.  plumedatabasefunc::insert_camera_metadata() takes in metadata for a new
entry within the sensors table of the plume database.  It inserts this
metadata into *gis_database_ptr.

============================================================================
ROBOT code changes made on Sat, Jan 28, 2012; Sun, Jan 29, 2012:

*.  camera::BoxInFrustum() implements the algorithm for culling Axis
Aligned Bounding Boxes presented in figure 4 of "Organized View Frustum
Culling Algorithms for Bounding Boxes" by U. Assarsson and T. Moller.  Only
one of the output boolean flags is true.

*.  OBSFRUSTUM::project_Polyhedra_into_imageplane() now tests if polyhedra
bounding spheres and boxes lie outside OBSFRUSTUM.  If so, the
corresponding polyhedra are not projected into the image plane.

*.  Privatized polygon::locate_origin().

*.  Eliminated ancient polygon constructors which take in array of
threevectors in favor of input STL vector of threevectors.

*.  Eliminated ancient polygon_intersection() member from polygon class in
favor of GPC method in geometry_func::polygon_intersection().

*.  In polygon::point_inside_polygon(),  eliminated ancient, expensive
angular approach to determining if 2D point lies inside polygon in favor of
fast method implemented in Oct 2011.

*.  polygon::compute_COM() now implements the centroid result reported in
http://paulbourke.net/geometry/polyarea/

*.  Eliminated ancient and unused invert.cc from src/math and src/numrec.

*.  bounding_box::linesegment_inside_2D_bbox() converts input linesegment l
into a very thin polygon.  It then computes the intersection of this
"sliver" with the bounding box polygon.  If the intersection is empty, this
boolean method returns false.  Otherwise, the points p1 and p2 which define
the segment's intersection with the bounding box are returned.

*.  In graph::docopy(), now set 
adjacency_matrix_ptr=new genmatrix(*(g.adjacency_matrix_ptr)) .

*.  Removed dependence of entire code tree upon ancient, deprecated
mymatrix class!  Deleted mymatrix class from repository.

*.  Created new class src/math/threematrix.cc . 

*.  ISDS demos and standard pgms almost work OK as of Sun, Jan 29, 2012
at 6:00 pm (pfiles1_29k.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Jan 27, 2012:

*.  camera::compute_frusta_planes() fills member STL vector
frusta_plane_ptrs within planes constructed from the camera's world
position and its UV corner world rays.

*.  camera::PointInFrustum() takes in 3D point XYZ and computes its signed
distance to the 4 side planes of the camera's view frustum.  Recall that
the side planes' normal direction vectors point away from the frustum.  So
if any signed distance is positive, XYZ must lie outside the camera's
frustum.

*.  camera::SphereInFrustum() takes in a sphere's center point XYZ and
radius r.  If the sphere's center lies less than r from any of its side
frusta planes, the sphere must lie at least partially within the camera's
view frustum.

*.  Added bounding_sphere_center,radius members to polyhedron class along
with get and private compute_bounding_sphere() methods.

*.  linesegment::get_frac_posn() returns the threevector
corresponding to the input fraction between the current
linesegment's endpoints.

*.  Added GraphicalsGroup::set_most_recently_selected_ID().  In
GraphicalsGroup::set_selected_Grahpical_ID(), no longer set
most_recently_selected_ID=selected_Graphical_ID.

*.  Eliminated OBSFRUSTAGROUP::prev_selected_OBSFRUSTUM_ID in favor of
GraphicalsGroup::most_recently_selected_ID.

*.  In OBSFRUSTAGROUP::project_Polyhedra_into_selected_photo(), project 3D
Polyhedra into 2D image plane if either selected OBSFRUSTUM OR selected
Polyhedron has changed.

.....................

*.  bounding_box::get_bbox_diagonals() fills and returns an STL vector with
linesegments which connect opposite corners on the bottom and top faces of
the current bounding box.

*.  plane::compute_bbox_pn_vertices() calculates the positive and negative
far points of a bounding box corresponding to the current plane and its
normal direction vector.  The p_vertex has a greater signed distance from
the plane than the n_vertex.



============================================================================
ROBOT code changes made on Thurs, Jan 26, 2012:

*.  Added John Ratcliffe's static triangulate class to src/geometry.  

*.  triangles_group::inner_triangulate_vertices() calls static functions
within John Ratcliff's triangulater class upon the input set of vertices
assumed to already be stored wtihin *vertices_handler_ptr.  The vertices
must lie within the XY plane.  But they can define a complicated contour
containing zero holes.  Inner_triangulate_vertices() generates a
triangulation of the input contour vertices where all triangles are
guaranteed to live inside the contour.

*.  contour::generate_interior_triangles() utilizes John Ratcliff's static
triangulator class in order to triangulate a 2D contour living in the XY
plane which has no holes.

*.  triangle::reset_all_Z_values() reset the triangle's 3 vertices to have
the input Z value.

*.  polyhedron::generate_prism_with_rectangular_faces() can now form inner
triangulation of prism's top face.

................

*.  mains/plume/SURVEYFIT is a minor variant of program GPSFIT.  It reads
in reconstructed tripod camera posns generated by Noah Snavely's BUNDLER
program in some arbitrary 3D coordinate system.  It also reads in a text
file containing surveyed locations for the tripod cameras.  The two input
files must be in precise correspondence.

SURVEYFIT applies B. Horn's closed-form least-squares fitting procedure to
compute the global rotation, translation and scaling needed to transform
the bundler camera path into the GPS path.  It reports the average residual
between the transformed and measured paths.  This program also exports the
transformed path as a TDP and OSGA file.


============================================================================
ROBOT code changes made on Weds, Jan 25, 2012:

*.  mains/afghanistan/Qt/QTPYXIS_CLIENT is a skeletal example of the PYXIS
client which G104 will need to implement in order to call LOST as a "black
box" server.  It utilizes the post method within Qt's QHttp class in order
to send potentially large amounts of flight path and other metadata to the
LOST server.

*.  Qt/web/LOSTClient class uses get() and post() member functions of Qt's
QHttp class in order to transmit client requests to an LOSServer.

*.  LOSServer::start_automatic_analysis() parses key-value pairs read in
via an http POST request which we assume originated from a machine rather
than an interactive human user.  It extracts ground ROI, sensor model,
temporal sampling and flight path parameters from the key-value pairs.
Once all input parameters have been input, ROI raytracing is initiated.

*. mains/mapping/OFF2PLY imports a polyhedron from some Object File Format
(.off) file passed as a command line argument.  It converts the input .off
file into .ply file format.

============================================================================
ROBOT code changes made on Tues, Jan 24, 2012:

*.  mains/modeling/POINTMODELER reads in 2D UV features selected from at
least 2 reconstructed photos.  It backprojects their associated rays into
3D space to find their intersection point.  POINTMODELER implements a
RANSAC procedure to eliminate the outlier rays.  It outputs a best-estimate
for the 3D location corresponding to the input 2D UV tiepoints.

*.  mains/modeling/GEOREG reads in a set of corresponding world and
"raytraced" 3D points.  It then utilizes Horn's approach to compute the
global rotation, translation and scaling which transforms the "raytraced"
points into their georegistered counterparts.  GEOREG writes out these
parameters which can be placed into peter_inputs.pkg in order to
georegister bundler output.

........................

*.  Moved MoviesGroup_ptr->destroy_all_Movies() call from
OBSFRUSTAGROUP::destory_all_OBSFRUSTA() to OBSFRUSTAGROUP destructor.

*.  ISDS demos and standard pgms almost work OK as of Tues, Jan 24, 2012
at 12:15 pm (pfiles1_24d.tgz) on ROBOT laptop.  

........................

*.  PolyhedraGroup::fit_constant_z_ground() loops over all Polyhedra within
*this.  After reading each Polyhedron's vertices, it stores the minimal
vertex z value (provided that it lies below a reasonable max_ground_z)
within an STL vector.  This method returns the average of the STL vector's
min_z values.

*.  polyhedron::read_OFF_file() can now start to parse RGBA color input.

============================================================================
ROBOT code changes made on Mon, Jan 23, 2012:

*.  mains/modeling/PACKAGE_FINDER reads in a set of jpeg filenames from the
current directory.  It then greps through all package files within the
hardwired packages_subdir.  PACKAGE_FINDER returns the package file names
which are associated with the input jpegs. It generates an executable
script for running program POINTMODELER which incorporates the package file
names.

============================================================================
ROBOT code changes made on Sat, Jan 21, 2012; Sun, Jan 22, 2012; early Mon,
Jan 23, 2012:

*.  mains/raven/ESTIMATE_F implements a modified version of the constrained
"checkerboard" calibration algorithm described in I. Shimizu, Z. Zhang,
S. Akamatsu and K. Deguchi, "Head pose determination from one image using a
generic mode camera calibration", IEEE 3rd Intl Conf on Automatic Face and
Gesture Recognition, pp 100-105, 1998.  It first reads in a set of
image-plane UV and corresponding world-plane XY tiepoints from some number
of photos (preferably 4 or more).  For each photo, a least-squares
homography relating the image and world planes is next calculated.  We
assume the internal matrix K is constrained so that it depends upon a
SINGLE unknown focal parameter (i.e. f=fu=fv; skew=0; u0=0.5*aspect_ratio
and v0=0.5).  ESTIMATE_F computes and returns the average of all reasonable
image f values.

*.  Added unselected_Polyhedra_vertices(), unselect_Polyhedra_edges(),
increment_selected_Polyhedron() & decrement_selected_Polyhedron() member
function to PolyhedraGroup class.

*.  Polyhedron::generate_vertex_Points() fills member *PointsGroup_ptr with
vertices from *polyhedron_ptr.

*.  PolyhedraGroup::display_selected_Polyhedron_vertex() erases all Points
representing the currently selected Polyhedron's vertices.  It then
unerases the currently selected vertex within the currently selected
Polyhedron.

============================================================================
ROBOT code changes made on Thurs, Jan 19, 2012:

*.  Added raven_camera_calib.dat to repository.

============================================================================
ROBOT code changes made on Weds, Jan 18, 2012:

*.  LADAR now snaps 3D viewer screen after it has flown into simulated
camera's location and user presses 'Shoot simulated photo' button on Images
tab.

============================================================================
ROBOT code changes made on Tues, Jan 17, 2012:

*.  Added purge button for 2D/3D polylines and features in LADAR and VIDEO.

*.  ISDS demos and standard pgms almost work OK as of Tues, Jan 17, 2012
at 12:45 pm (pfiles1_17a.tgz) on ROBOT laptop.  

*.  mains/mapping/TDP2PLY.cc converts an XYZRGB point cloud imported from a
TDP file into an output PLY ascii file.

============================================================================
ROBOT code changes made on Sat, Jan 14, 2012; Sun, Jan 15, 2012; Mon, Jan
16, 2012:

*.  ViewerManager::partial_process() calls just Producer's sync() and
update() methods and not frame().  We wrote this variant of process() for
"black box" LOST server purposes.

*.  mains/afghanistan/QTLOSTSERVER is a variant of program QTLOS.  It
runs a black-box server for LOST which does not display any 3D
OpenSceneGraph window.  We spun off this LOST variant in January 2012 for
Pyxis program purposes.

*.  LOSServer::compute_ROI_visibility() prepares and begins a LOST server
computation of a ROI's instantaneous and time-averaged visibilities.  A
call to this method ends in *Aircraft_MODELSGROUP_ptr exporting geotif and
nitf files containing time-averaged occlusion results.

*.  LOSMODELSGROUP::export_PYXIS_ROI_visibility_files() first calls
display_average_LOS_results() which returns quartile visibility fractions
via ActiveMQ.  It next generates time averaged visibility TIF and NITF
files within a user-specified PYXIS output subdirectory and filename.
Finally, this method issues an ActiveMQ message so that the calling PYXIS
client will know when the ROI visibility computation is finished.

*.  mains/raven/CAMCALIB implements the "checkerboard" calibration
algorithm described in Z. Zhang, "A flexible new technique for camera
calibration", IEEE Trans on Pattern Analysis and Machine Intelligence, 22
(1330) 2000.  It first reads in a set of image-plane UV and corresponding
world-plane XY tiepoints from some number of photos (preferably 4 or more).
The least-squares homography relating the image and world planes is next
calculated. A 2n_image x 6 data matrix is subsequently formed, and its
singular value decomposition is evaluated.  Internal camera parameters fu,
fv, u0, v0 and pixel skew parameter gamma are extracted from the SVD
results.

*.  mains/raven/PARSE_RAVEN_CSV reads in a comma-separated-value file
generated by the RAVEN system which corresponds to some mpeg video clip.
It extracts GPS time and position information for the UAV from the
metadata.  PARSE_RAVEN_CSV generates text and TDP/OSGA files containing the
UAV's track.

*.  In OBSFRUSTAGROUP::destroy_all_OBSFRUSTA(), we now explicitly reset
virtual_OBSFRUSTUM_ptr member to NULL and call
MoviesGroup_ptr->destroy_all_Movies().

*.  Movie::destroy_cameras_for_images() destroys all dynamically generated
camera objects.  It then clears STL vector camera_ptrs.

============================================================================
ROBOT code changes made early on Thurs, Jan 12, 2012:

*.  Fixed logic in geometry_func::cleave_subcontour() so that reduced
contour edges line up with dominant symmetry direction vector modulo 90
degs.

*.  geometryfunc::cleave_subcontour() takes in a set of contour corners.
Starting with the zeroth corner, it searches backwards and forwards for
locations where the contour undergoes a height discontinuity.  This method
cleaves off all contour corners within a contiguous string with the zeroth
which have the same height value.  It also attempts to force the cleaved
contour edge to align with the symmetry direction defined by the
subcontour's non-cleaved edges modulo 90 degrees.

*.  geometryfunc::decompose_contour_into_subcontours() takes in a set of 3D
contour vertices.  It systematically cleaves off subcontours which have
constant height values.  This method returns an STL vector of polylines
which represent a decomposition of the original contour into a set of
subcontours with constant heights.

..............

*.  triangles_group::compute_area_integral() returns the sum of all
triangle areas.

*.  contour class now has constructor which takes input polyline.

*.  compute_area() in polygon and contour classes now implements the very
clever algorithm of D.R. Finley for finding areas of arbitrary 2D polygons.
This algorithm works for concave, convex and even self-intersecting
polygons!  The polygon's vertices are assumed to be ordered according to
the right hand rule.  If not, the area returned is negative in sign.  See
http://alienryderflex.com/polygon_area/ .

============================================================================
ROBOT code changes made on Weds, Jan 11, 2012:

*.  Temporarily changed MINI_CONVERT and BUNDLER_PHOTOS in mains/photosynth
for Geo15 flight only.

*.  mains/mapping/GCP (Ground Control Points) reads in 2D features
extracted via program VIDEO and their 3D counterparts found via program
LADAR.  It pulls out just the easting and northing coordinates from the
input ladar features.  GCP writes out a set of lines which can be fed into
gdal_translate in order to add ground contorl points into an image. (See
README.GDAL).

*.  In contour::average_edge_orientation() and median_edge_orientation(),
changed curr_theta=mathfunc::angle_between_unitvectors() to
curr_theta=atan2(curr_ehat.get(1),curr_ehat.get(0)).

============================================================================
ROBOT code changes made on Tues, Jan 10, 2012:

*.  MODEL_BLDGS can now ingest multiple building footprint polylines.  It
also computes bottom footprint's altitude from ladar data.

................

*.  Added georegistered_flag member to camera class along with set method.
When true, R_noah_to_peter=identity.

============================================================================
ROBOT code changes made on Mon, Jan 9, 2012:

*.  mains/modeling/MODEL_BLDGS reads in 2D polylines generated via VIDEO
from orthorectified aerial EO imagery.  It also takes in an affine 3x4
projection matrix for the aerial image.  MODEL_BLDGS converts from UV image
plane coordinates to easting,northing geocoordinates.  After combining with
ladar-derived height information, MODEL_BLDGS generates simple polyhedra
models for urban buildings.

*.  prob_distribution::find_local_peaks() takes in STL data vector Z.  It
searches for the highest peak value within Z.  After subtracting out all
data values located within +/- peak_width of Z_peak, this method searches
for the next largest peak.  It continues this peak finding process until
either the number of remaining entries wtihin the STL data vector becomes
too small or the number of peaks found exceeds input parameter max_n_peaks.

*.  mathfunc::circular_median_filter() takes in STL data vector A along
with a window size.  Vector A is assumed to circularly wrap onto itself.
Sliding the window along the data vector, this method computes median
values and returns them within a filtered STL vector.

============================================================================
ROBOT code changes made on Sat, Jan 7, 2012; Sun, Jan 8, 2012; early Mon,
Jan 9, 2012:

*.  camera::compute_pointing_direction() initially checks if the first 3x3
submatrix M within P_3x4 is nonsingular.  If not, we assume the current
camera points along -Z_hat (e.g. nadir aerial image) and return false.
Otherwise, this method recovers the pointing direction from M and returns
true.

*. Boolean camera::decompose_projection_matrix() now returns false if
submatrix *M_ptr is singular.

*.  Added face constructor which takes in STL vector of edges.

*.  Eliminated constructor in edge class with no arguments.

*.  polyhedron::read_OFF_file() imports polyhedron information from a
specified Object File Format (.off) file.  It reconstructs the current
polyhedron's vertices, edges and faces from the information in the .off
file.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jan 9, 2012 at
8:30 am (pfiles1_9a.tgz) on ROBOT laptop.  


============================================================================
ROBOT code changes made on Fri, Jan 6, 2012:

*.  Moved set_ColormapPtrs_ptr() for ColorGeodeVisitor and HiresDataVisitor
into PointCloud constructor.  VIEWBUNDLER no longer crashes when it's run
with a TDP file input.

============================================================================
ROBOT code changes made on Weds, Jan 4, 2012:

*.  Added new mains/IAP subdir to repository.

*.  mains/IAP/MOSAIC reads in a set of 2D XY-UV tiepoints manually selected
from two photos shot by a rotating camera atop a tripod.  It computes the
homography which maps the "world plane XY" coordinate to the "image plane
UV" coordinates.  MOSAIC then instantiates a texture rectangle which can
hold an enlarged, warped version of the "world" image.  It iterates over
all pixels within the warped image plane in UV coordinates and computes the
corresponding XY coordinates via the inverse homography.  The RGB value
from the XY pixel is then transfered to the warped UV pixel.  MOSAIC
exports a warped version of the "world" image which aligns reasonably well
with the fixed "image plane" photo.

============================================================================
ROBOT code changes made on Tues, Jan 3, 2012:

*.  Generalized mains/plume/MORPH s.t. it writes out interpolated volumes
and names output OSGA files in terms of total time relative to 0.
============================================================================
ROBOT code changes made on Sat, Dec 31, 2011; Sun, Jan 1, 2012; Mon, Jan 2,
2012:

*.  Added world clock display into plume/VIEW3DMOVIE

*.  Added m_text3_refptr member to GenericHUD class.

*.  Added vector<string> labels member to ImageNumberHUD class.

*.  AnimationContrlller::time_to_display_new_frame() now allows for
lingering on both its very first and very last frames.  This helps avoid
confusion with the time dicontinuity associated with jumping from the last
frame back to the first frame in a looping movie

*.  ISDS demos and standard pgms almost work OK as of Mon, Jan 2, 2012 at
3:30 pm (pfiles1_2b.tgz) on ROBOT laptop.  

*.  mains/plume/DBVOLUME now has STL vector of time stamps corresponding to
synced slices.

============================================================================
ROBOT code changes made on Thurs, Dec 29, 2011:

*.  Added traverse(node,nv) commands into operator() of
UpdateMyHyperFilterCallback and UpdateColormapCallback() classes.  Removes
bad dependence of upon ordering in which Callbacks are added to common
linked list of callbacks.

============================================================================
ROBOT code changes made on early Weds, Dec 28, 2011:

*.  In bundlerfunc::read_left_right_points(), set frac_to_ignore=0 rather
than 0.05.

*.  mains/plume/GROUNDPLANE reads in the TDP file containing thresholded
XYZ points.  It generates a probability distribution for the Z values and
computes their peak plus 5%, 10% and 20% cumumlative distribution values.
We wrote this little utility to help determine the Z value for surveyed
tripod camera positions which yields a ground plane close to Z=0.

.....................

*.  We discovered the hard and painful way that the order in which
CullCallbacks are added to CommonCullCallbacks matters!  (We don't think it
should be this way, but it is as of Dec 2011).  So in order for both
Coloring and HyperFiltering callbacks to actually get executed, we
empirically found that we need to add HyperFilter callback AFTER Coloring
callbacks in PointCloudsGroup::generate_new_Cloud() and
generate_separate_clouds_from_input_files().

============================================================================
ROBOT code changes made on Tues, Dec 27, 2011:

*.  mains/geo/CROP_ANALOG_FRAMES reads in a set of package files generated
by program VISUALIZE_FLIR_FRAMES. It extracts their low-definition JPG
frames and crops each one so that it contains (mostly) FLIR pixel content
without screen metadata.  The cropped low-defn frames are exported to
./cropped_lowdefn_frames/.

*.  mains/geo/WRITE_BUNDLER is a specialized utility which exports a
'bundle.out' file corresponding to measured camera parameters for a
GEO flight from summer 2011 around HAFB.

============================================================================
ROBOT code changes made on Fri, Dec 23, 2011; Sat, Dec 24, 2011; Sun, Dec
25, 2011; Mon, Dec 26, 2011; early Tues, Dec 27, 2011:

*.  mains/plume/MORPH now temporally interpolates p-information between
starting and stopping point clouds.

*.  mains/plume/CAMERA_POSNS has hard-wired values for surveyed radii and
azimuthal angles for the 10 camera tripod locations at the EARTH and VENUS
sites in South Carolina.  It prints out Cartesian XY values corresponding
to the polar inputs.

*.  VIDEO can now display current still image's URL and its pixel
width/height.

*.  VIDEO now exports and imports 2D features to text files containing
photo basenames.  If no feature text file is found, ALERT message notifies
user.

*.  mains/wisp/FIX_LADARMAP iterates over all pixels within an ALIRT map
geotif.  It compares each z value with the median height within some tile
surrounding the current pixel.  If the discrepancy between the two height
values is greater than 50 meters, the outlier value is replaced with the
median value.  FIX_LADARMAP continues with such median filtering until no
pixel within the ALIRT map is altered.

*.  camera::cyl_project_XYZ_to_UV_coords() projects XYZ world space points
onto the UV image plane NOT according to a conventional 3x4 projection
matrix.  Instead, it uses the limit of the perspective projection as the
horizontal field-of-view goes to zero.  2D planar circles of constant
rho=sqrt(X*X+Y*Y) are mapped by this cylindrical projection to lines of
constant V.

*.  mains/wisp/MATCH_MASKS reads in two cylindrically projected range masks
corresponding to consecutive 36-degree WISP panels.  The angular extents of
cylindrical projections overlap.  So MATCH_MASKS attempts to find the pixel
columns within the nth and n+1st masks which correspond.

*.  ISDS demos and standard pgms almost work OK as of Tues, Dec 27, 2011 at
8:20 am (pfiles12_27a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Thurs, Dec 22, 2011:

*.  mains/plume/MORPH takes in two TDP files corresponding to point clouds
at some starting and stopping times.  It first subtracts out the point
clouds' COM locations.  MORPH then forms cumulative probability
distributions along (theta,phi) rays emanating from the COMs.  Linear
interpolation is performed between the starting and stopping cumulative
distributions for time fractions ranging from 0 to 1.  After retranslating
the morphed results by the interpolated COM, MORPH exports osga files
labeled by the time fraction.

============================================================================
ROBOT code changes made on Weds, Dec 21, 2011:

*.  AnimationController::store_unordered_image_filenames() takes in a
subdirectory which is assumed to hold a some quasi-random set of image
files.  This method fills STL map member ordered_image_filenames with the
imported image file names.

*.  QTVIDEO now queries user to specify subdir containing either temporally
ordered video frames or quasi-random sequence of image stills.

============================================================================
ROBOT code changes made on Tues, Dec 20, 2011:

*.  Added new mains/modeling subdir to repository.

*.  Eliminated deprecated member functions
linesegment::set_v1[v2]_component().

*.  mains/modeling/LINEMODELER reads in 2D linesegments selected from at
least 2 reconstructed and georegistered photos.  It backprojects these
segments into 3D space to find their associated planes.  LINEMODELER
computes the infinite 3D lines corresponding to 2 or more matching line
segments in images.

============================================================================
ROBOT code changes made on Mon, Dec 19, 2011:

*.  Streamlined program PLUMEVOLUME by adding iterative XYZ bbox placement
around smoke cloud.

*.  Spun off plumedatabasefuncs namespace from src/postgres/databasefuncs
namespace.

*.  PRINT_PARAMS now fills rows within the sensors table of the plume
database with camera parameter information.

============================================================================
ROBOT code changes made on Sat, Dec 17, 2011 ; Sun, Dec 18, 2011 & early
Mon, Dec 19, 2011:

*.  In DataGraph class, split off InitializeCloudGraph() from
GenerateCloudGraph().

*.  Following Ross Anderson's suggestion, we introduced an OSG Switch
member into DataGraphsGroup class in order to animate large DataGraphs over
time.

*.  Added 4D data animation member functions to DataGraphsGroup class.
These take the place of PointCloudsGroup::update_time_dependence() which is
now deprecated.

*.  PointCloudsGroup::generate_separate_clouds_from_input_files() takes in
*pass_ptr which is assumed to correspond to at least 2 input .osga
files.  It imports each .osga file's data into a distinct
PointCloud object.  The individual point cloud graphical PAT's are
also NOT automatically inserted into OSGsubPAT.  For 4D point cloud
animation purposes, we instead allow each point cloud's graphical
PAT to later be inserted into this PointCloudsGroup's
switch_refptr...

*.  mains/plume/VIEW3DMOVIE is a testing grounds for viewing an animated
sequence of 3D point clouds.  Each cloud frame is read in as a separate
.osga file.  VIEW3DMOVIE implements Ross Anderson's suggestion to use an
OSG Switch in order to rapidly turn on the current frame's point cloud
while suppressing all other frames' clouds.

*.  ISDS demos and standard pgms almost work OK as of Mon, Dec 12, 2011 at
9:22 am (pfiles12_19a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Dec 16, 2011:

*.  Starting to "georegister" reconstructed 5ABC cameras with survey
measurements.

..............

*.  Added -latlas to Makefile

============================================================================
ROBOT code changes made on Weds, Dec 14, 2011 & Thurs, Dec 15, 2011:

*.  Added time_dependence_flag member to PointCloudsGroup along with set
method.

*.  Starting to see time-dependent point cloud evolution!

................

*.  Can now start to morph between two different 3D point clouds.

*.  In Makefile, now include -L/usr/lib/atlas in order to bring in libblas
and liblapack.  No longer use crappy blas, tmg and lapack libraries from
CLAPACK anymore!  levmar 2.6 now builds and runs OK as does Noah's bundler
codes!


============================================================================
ROBOT code changes made early on Tues, Dec 13, 2011 & early Weds, Dec 14,
2011:

*.  mains/plume/SENSOR_POSNS sets up 3D Geometrical objects (hemispheres,
boxes, cylinders, cones) in the Z=0 plane according to the November 2011
sensor grid plan.

============================================================================
ROBOT code changes made on Mon, Dec 12, 2011:

*.  ISDS demos and standard pgms almost work OK as of Mon, Dec 12, 2011 at
1:15 pm (pfiles12_12a.tgz) on ROBOT laptop.  

*.  mains/falconI/FLIP_CLOUD is a special utility we wrote in order to be
able to apply fishnet ground finding to level-2 TDP files not generated by
program DENSITY_L1.  It takes in an L2 cloud within filtered_points.tdp and
computes a reasonable XY bounding box.  All points within the bounding box
have their Z values flipped so that the point cloud is effectively
inverted.  FLIP_CLOUD exports the inverted cloud to TDP file
flipped_filtered_points.tdp.

============================================================================
ROBOT code changes made on Fri, Dec 9, 2011; Sat, Dec 10, 2011; Sun, Dec
11, 2011:

*.  Make sure P_ptr and NWC_ptr are non-null in
bpffunc::parse_bpf12_points() before attempting to work with these STL
vectors!

*.  mains/falconI/flatten can now crop ground surface corresponding to just
measured XY ALIRT point locations

*.  Cleaned up tdpfuncs.

*.  Added comments to VCP, Fishnet and FishnetsGroup classes.

*.  Program FISHING no longer exports rotated version of ground surface.
And program FLATTEN no longer needs to import rotated version of ground
surface.

============================================================================
ROBOT code changes made on Thurs, Dec 8, 2011:

*.  GraphicalsGroup::read_OSG_file() reads the contents of an input .osg
file into a new node and appends it to *get_OSGgroup_ptr().

*.  Added ColorbarHUD functionality into VIEWPOINTS,

*.  Fixed unrotation logic bug in
Fishnet::export_inverted_ground_surface().

*.  In VCP::compute_detection_probabilities(), we no longer attempt to
compute log(y) if y=0!

============================================================================
ROBOT code changes made on Weds, Dec 7, 2011:

*.  mains/falconI/FLATTEN reads in a cleaned (and rotated) TDP file
generated by program DENSITY_L1.  It also reads in ground surface data
generated by program FISHING.  FLATTEN subtracts the latter from the former
and exports a new point cloud where the ground surface is (hopefully)
reduced to a simple Z-plane.

*.  mains/falconI/DENSITY_L1 reads in a set of "squished" TDP and frusta
metadata files generated by program CLEAN_L1.  It calculates an integrated
illumination pattern for ALIRT within a constant Z-plane.  Assuming the
illumination is exponentially attenuated through dense foliage, DENSITY_L1
renormalizes reflectivity probabilities so that they are approximately
uniform in height.  It deletes any points with p-values less than some
user-specified (or automatically calculated) reflectivity threshold.
DENSITY_L1 also performs a few iterations of simple density filtering to
eliminate "lonely" voxel counts.

DENSITY_L1 outputs TDP and OSGA files for the aggregated and cleaned point
cloud.  It also generates rotated versions of these files which are aligned
with the XY axes.  Finally, a rotated and z-flipped version of the data are
written out to become input to program FISHING.

...................

*.  GraphicalsGroup::write_OSG_file() writes the contents of
*get_OSGgroup_ptr() to an output .osg file. 

*.  We ran into precision problems when attempting to write out SignPosts
for the Pender ALIRT data set to an OSG file (for viewing within Eyeglass).
Ross suggested that we capture a large, common UTM offset in a
MatrixTransform.  So in SignPostsgroup::read_info_from_file() we first
compute the center-of-mass for all input SignPosts.  We next truncate this
COM to the closest thousands so that it can be correctly written out to an
OSG file with limited numerical precision.  We then pass the truncated COM
to GraphicalsGroup::translate_OSGsubPAT().  We then subtract the common
offset from the UVW positions when the individual SignPosts are
instantiated.

============================================================================
ROBOT code changes made on Tues, Dec 6, 2011:

*.  DENSITY_L1 now exports rotated version of filtered points which is
aligned with XY axes.

*.  fishnet::compute_local_current_energy() evaluates sum of mass, spring
and pressure terms only over small region within fishnet.  By comparing
effect of a ZtwoDarray perturbation in just a small region, FISHING
computation of optimal fishnet covering now runs quite fast!

...................

*.  Added PointsGroup_ptr member to Fishnet class in order to mark masses
whose positions are close to point cloud content.

*.  Fishnet can now export inverted ground surface points which may
subsequently be viewed in program mains/falconI/VIEWGROUND.

============================================================================
ROBOT code changes made on Mon, Dec 5, 2011:

*.  Added linewidth member to Fishnet class along with set method.

*.  Can now refine fishnet cell size and iteratively refine ground surface
estimation within program FISHING.

============================================================================
ROBOT code changes made on Sat, Dec 3, 2011; Sun, Dec 4, 2011; early Mon,
Dec 5, 2011:

*.  After fixing several more bugs, hyperfiltering now appears to be
working!

*.  ISDS demos and standard pgms almost work OK as of Sat, Dec 3, 2011 at
12:50 pm (pfiles12_3d.tgz) on ROBOT laptop.  Exploding hemisphere no longer
works in EARTH following major rewrite of SphereSegments classes yesterday.

*.  Added ymax member to prob_distribution class along with set method.

*.  Fit decaying exponential function to Pdet density distribution in
VCP::compute_detection_probabilities().  Then automatically set minimal
Pdet threshold by searching for p value at which ratio of
signal+noise/fitted exponential equals 2.0

============================================================================
ROBOT code changes made late on Thurs, Dec 1, 2011 and Fri, Dec 2, 2011:

*.  Significantly rewrote SignPostsGroup::read_info_from_file()

*.  BoxesGroup & SphereSegmentsGroup now inherits from GeometricalsGroup
rather than GraphicalsGroup.

*.  Significantly overhauled SphereSegment, SphereSegmentsGroup, Box &
BoxesGroup classes.

*.  Coloring for Boxes, SphereSegments and Cylinders is now working OK in
program mains/OSG/BASEMENT.

*.  Added Visitor_name member to MyNodeVisitor class.

*.  Created new CommonCallbacks class in src/osg/osgScenegraph.  Added
CommonCallbacks_ptr member to DataGraphsGroup class.  

*.  Removed CommonCallback ref_ptr members from MyNodeVisitor class.

*.  My hyperfiltering is still not working right.  But at least compilation
and execution seem to be OK after having performed major refactoring today.

============================================================================
ROBOT code changes made on Thurs, Dec 1, 2011:

*.  FusionGroup::generate_terrain_masks() works with one of the 10
36-degree cameras which model WISP's panoramic view.  It also works with an
ALIRT ladar map which is assumed to have been read into
*DTED_ztwoDarray_ptr.  The method iterates over all pixels in
*DTED_ztwoDarray_ptr and finds those which lie within the camera's FOV.  It
also searches for vertical discontinuities in the ladar map and fills in
voxel chimneys in their vicinity.  generate_terrain_masks() next computes a
sorted range list for all potentially visible ALIRT voxels.  Working from
longest to shortest ranges, it projects each voxel into 2D imageplane masks
which store voxel X,Y,Z and R information.  Pixels corresponding to the
solid angle subtended by a 3D voxel are colored according to the 3D
metadata.  After the iteration over all ALIRT voxels is complete, the 2D
masks are written to output jpeg files.

*.  VolumetricCoincidenceProcessor::get_cumulative_prob_integral() takes in
m & n voxel coordinates along with some starting z value.  It sums and
returns the probability values for all voxels labeled by m and n with z
values greater than z_start.

.....................

*.  Added enable_underneath_looking_flag member to Terrain_Manipulator w/
set method.  If true, set sin_5_degs=NEGATIVEINFINITY inside TM::Rotate().

*.  mains/falconI/fishing is starting to yield reasonable ground surfaces.

============================================================================
ROBOT code changes made on Weds, Nov 30, 2011:

*.  mains/plume/PLUMEVISIBILITY reads in calibration parameters for the 10
fixed tripod cameras.  It instantiates a VolumetricCoincidenceProcessor
volume whose lateral dimensions are set by the cameras' positions.
PLUMEVOLUME iterates over all voxels within the VCP volume and projects
each into all 10 cameras' image planes.  If the voxel lies inside some
specified number of the cameras' fields-of-view, it is added to the VCP.
PLUMEVISIBILITY generates a TDP file for the point cloud associated with
all VCP voxels.

*.  mains/plume/PRINT_PARAMS exports the reconstructed and correctly scaled
tripod camera parameters to a user-friendly text file.

============================================================================
ROBOT code changes made on Tues, Nov 29, 2011:

*.  Trying to compute noise space-time density in CLEAN_L1.

============================================================================
ROBOT code changes made on Mon, Nov 28, 2011:

*.  Trying to compute pure noise distribution for ALIRT PR imagery.

============================================================================
ROBOT code changes made on Thurs, Nov 24, 2011 - early Mon, Nov 28, 2011:

*.  In Grid class, eliminated threeD_grid_flag in favor of zsize member
variable.

*.  Overloaded operator<< in VCP class.

*.  mains/plume/PLUMEVOLUME reads in calibration parameters for the 10
fixed tripod cameras.  It instantiates a VolumetricCoincidenceProcessor
volume whose lateral dimensions are set by the cameras' positions.
PLUMEVOLUME iterates over all voxels within the VCP volume and projects
each into all 10 cameras' image planes.  If the voxel lies inside some
minimal number of the cameras' smoke contours, it is marked with the number
of such contours.  PLUMEVOLUME generates a TDP file for the point cloud
associated with all of the marked voxels.

*.  texture_rectangle::clear_all_RGB_values() resets all pixel values to
zero.

*.  photogroup::reconstruct_bundler_cameras() now extracts and saves kappa2
and kappa4 parameters from Noah's bundle.out file.

*.  bundlerfunc::radial_undistort() resamples the image specified by
photo_filename using the radial distortion parameters encoded within the
camera of *photo_ptr.  It generates a new output image for which the kappa2
and kappa4 radial distortion parameters equal 0.  This method returns the
name of the new, radially undistorted image file.

*.  mains/photosynth/UNDISTORT is a simple rewrite of Noah Snavely's
RadialUndistort executable which uses Peter's classes and conventions.
UNDISTORT creates a new undistorted_images subdirectory within
bundler_IO_subdir.  It exports radially undistorted JPG files into this
subdirectory along with new versions of bundle.out and list_tmp.txt.
UNDISTORT then moves the original versions of bundle.out, list_tmp.txt and
images/ and creates soft links to their new replacements within
bundler_IO_subdir.

*.  mains/plum/TRIPOD_UNDISTORT uses radial distortion parameters
reconstructed for fixed tripod cameras before a smoke event to remove
radial distortion in tripod photos collected during a smoke event.

*.  PolyLine export/import in QTVIEWLADAR and QTVIEWMOVIE are now indicated
by thin client alert statements.

*.  Added point_inside_contour() methods to contour class.

*.  Boolean camera::XYZ_in_front_of_camera() returns false if
input XYZ does not have a positive projection along -What.

*.  Starting to obtain reasonable plume reconstruction results.

*.  No longer compile orphaned osg/osgSceneGraph/CullCallback class.

*.  Moved SetupGeomVisitor class from osg3D to osgSceneGraph subdirs.

*.  Moved commonUpdate[Cull]Callback_refptr member vars and
addUpdate[Cull]Callback() methods out of ColorGeodeVisitor class into
MyNodeVisitor class.

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 28, 2011 at
6:23 am (pfiles11_28a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Weds, Nov 23, 2011:

*.  FeaturesGroup::write_feature_html_file() now exports feature info based
upon actual pass IDs.

*.  Moved member functions get_max_n_passes(double t) and std::vector<int>
get_all_pass_numbers(double t) out of FeaturesGroup into GraphicalsGroup.

============================================================================
ROBOT code changes made on Tues, Nov 22, 2011:

*.  Trying to geoalign Nov 2011 WISP imagery with HAFB mini map.

============================================================================
ROBOT code changes made on Mon, Nov 21, 2011:

*.  Empirically found e-folding distance around 25 meters for ALIRT
illumination pattern through Puerto Rico foliage.  In DENSITY_L1, we now
renormalize illum pattern by exponential attenuation factor to try to
compensate for foliage scattering of light.

============================================================================
ROBOT code changes made late on Friday, Nov 18, 2011; Sat, Nov 19, 2011;
Sun, Nov 20, 2011 and early Mon, Nov 21, 2011:

*.  Starting to extract ALIRT frustum info from level-1 BPF files

*.  Streamlined mains/falconI/clean_L1.cc program to make it run as fast as
possible.

*.  Moved generate_terrain_masks() out of MoviesGroup class into
FusionGroup.  This method now appears sufficiently high up in our library
hierarchy.

*.  In ColorMap::retrieve_curr_color, we've qualitatively changed the way
thresholding works for z and p-data.  The colors corresponding to Z and P
values are now held fixed.  But if the input curr_value lies outside the
threshold interval, we now effectively set its color to black.

*.  DENSITY_L1 now computes integrated ALIRT illumination pattern within a
z-plane.  It uses this illumination information to convert detected counts
into detection probabilities.

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 21, 2011 at
7:59 am (pfiles11_21a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Friday, Nov 18, 2011:

*.  Tried to streamline TwoDarray::point_to_interpolated_value()

*.  Program FISHING now iteratively drapes a fishnet on top of a filtered
Puerto Rico ALIRT image.

============================================================================
ROBOT code changes made late on Weds, Nov 16, Thurs, Nov 17, 2011 and early
Nov 18, 2011:

*.  Added set_max/min_prob_threshold() member funcs to PointCloudsGroup
class.

*.  In ColorGeodeVisitor::ColorGeometryVertices(), we have qualitatively
changed the way thresholding works for p-data.  The colors corresponding to
certain p=0, p=0.1, p=0.2 etc are now held fixed.  But if the current
point's p value lies outside the interval [pmin_threshold,pmax_threshold],
we now effectively set its color to black.

*.  Created new Fishnet and FishnetsGroup classes.

*.  Privatized all member vars in volumentricCoincidenceProcessor class.

*.  VolumetricCoincidenceProcessor::column_prob_integral() retrieves the
voxel column corresponding to input curr_x,curr_y.  It then integrates the
probabilities for all voxels with z >= z_minimum in this column.

*.  Added new MANIPULATE_FISHNET_MODE in ModeController class.

*.  Eliminated confusing VOI_offset member from
VolumetricCoincidenceProcessor class.

*.  mains/falconI/FISHING is a variant of VIEWPOINTS intended for
developing a new physics-based approach to ground finding.  We start with a
"fishnet" set within a constant z-plane located above some filtered point
cloud generated via program DENSITY_L1.  The sites within the deformable
fishnet are systematically lowered in height, and an energy function is
calculated after each perturbation.  The energy function has a height,
spring and "pressure" potential terms.  After some number of iterations,
the deformed fishnet should be reasonably smoothly draped over the squished
L1 point cloud.

============================================================================
ROBOT code changes made early on Weds, Nov 16, 2011:

*.  Image plane mask generation for WISP is starting to work!

.....................

*.  Program CLEAN_L1 crops and squishes level-1 ALIRT Puerto Rico imagery
from input BPF or TDP files.  It first fits a line to the subsampled
level-1 points to determine a quite good estimate for the average range
direction.  After projecting all raw points onto the line and forming a 1D
distribution, CLEAN_L1 finds conservative min/max threshold values along
the range direction that encompass the bulk of genuine signal and crops out
this middle section.  It next finds z-plane slices which bound the genuine
signal and performs a further cropping.  Surviving XYZ points are voxelized
into a 3D grid.  Finally, CLEAN_L1 identifies and squishes "comet tails" in
the uprange direction.  The cropped and squished voxel counts are exported
to a TDP file for later aggregation by program DENSITY_L1.

*.  mains/mapping/RAWBPF2TDP reads in a raw "level 1" Binary Point Format
ladar file which may be in BPF1, BPF2 or BPF3 format.  It extracts metadata
from the file's header as well as offset and extremal data values.  BPF2TDP
fills X,Y,Z STL vectors with values.  Finally, this program outputs a TDP
file containing the XYZP information.

*.  bpffunc::is_bpf3_file() now looks at just first 4 chars in magic_number
string to determine if input file is in BPF3 format.

============================================================================
ROBOT code changes made on Tues, Nov 15, 2011:

*.  mathfunc::median_value_and_quartile_wdith() sorts the contents of an
input STL vector<A>.  It then computes the 25%, 50% and 75% values for the
sorted vector.

*.  mathfunc::median_clean() iterates over all non-edge pixels within input
*ztwoDarray_ptr.  Within an nsize x nsize neighborhood around each pixel,
it computes the median value and quartile width for all Z values other than
the center pixel's.  If the center pixel's Z deviates too much from the
neighbor's median values (as measured in units of quartile width), this
method resets the center pixel's Z value to the median.  This method is
intended to eliminate isolated noise outliers with minimal data smearing.

*.  Fixed serious bug in raster_parser::write_raster_data().  When
instantiating poDstDS_ptr, now explicitly check if
output_floats_flag==true.  If so, pass GDT_Float32 rather than GDT_UInt16
parameter into poDriver_ptr->Create() method.

============================================================================
ROBOT code changes made on Mon, Nov 14, 2011:

*.  Starting to implement 3D terrain mask generation for 2D WISP image
plane

*.  mains/wisp/WISPMASK is a variant of WISPPROP.  It iterates over the
HAFB minimap geotif and projects each voxel into the 2D image plane for the
first WISP panel.  WISPMASK outputs jpeg images displaying masks for world
X, Y and Z values within the WISP image plane.

============================================================================
ROBOT code changes made on Fri, Nov 11, 2011 - early Mon, Nov 14, 2011:

*.  Significantly streamlined BPF2TDP so that it now runs reasonably
quickly on Puerto Rico L1 imagery.


*.  mains/mapping/RAWBPF2TDP reads in a raw "level 1" Binary Point Format
ladar file which may be in BPF1, BPF2 or BPF3 format.  It extracts metadata
from the file's header as well as offset and extremal data values.  BPF2TDP
fills X,Y,Z STL vectors with values.  Finally, this program outputs a TDP
file containing the XYZP information.

*.  Trying to replace our old, deprecated Hashtable with an STL map inside
VolumetricCoincidenceProcessor class.  Independent variable for STL map is a
long (= 8 bytes) rather than a conventional int (= 4 bytes).  

*.  Extensively overhauled src/mains/falconI/clean_L1 and density_L1
programs.   Starting to obtain quasi-reasonable results for at least
relatively small L1 Puerto Rico data sets.

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 14, 2011 at
6:53 am (pfiles11_14a.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Tues, Nov 8, 2011 & Weds, Nov 9, 2011:

*.  Trying to implement Levenberg-Marquadt determination of fundamental
matrix.

*.  Added new src/coincidence_processing subdir to repository.  

*.  Resurrected voxel "squishing" from RealTime project and applied to
Puerto Rico ALIRT imagery.

============================================================================
ROBOT code changes made on Mon, Nov 7, 2011 & early Tues, Nov 8, 2011:

*.  mathfunc::LeviCivita() implements the fully antisymmetric 3D
Levi-Civita tensor.  Input indices are expected to equal 0, 1 or 2.

*.  Recompiled levmar library without linking to buggy CLAPACK library.
Can now recompile all main programs on ROBOT laptop.

============================================================================
ROBOT code changes made on Fri, Nov 4, 2011 thru early Mon, Nov 7, 2011:

*.  Add threeD_grid_flag bool member to Grid class along with set flag.  If
true, draw 3D box enclosing XY grid.

*.  fundamental class can now compute epipoles e_XY and e_UV.  Recall XY *
F * UV = 0.

*.  fundamental class can now decompose F into product of antisymmetric
epipoles and M matrices.

*.  ViewerManager::initialize_dual_windows() now takes
input argument twoD_window_on_right_flag with default true value.

*.  Added src/mains/raven to repository.

*.  PolyLinesGroup::generate_UV_polyline(l) forms a 2D line based upon
input homogeneous threevector l representing an infinite line in UV space.

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 7, 2011 at
8:18 am (pfiles11_7c.tgz) on ROBOT laptop.

*.  FeaturesGroup:: update_epipolar_lines() instantiates a new PolyLine
member of *PolyLinesGroup_ptr which corresponds to each feature within
*counterpart_FeaturesGroup_2D_ptr.

*.  mains/raven/FUNDAMENTAL is a testing grounds for fundamental matrix
relationships between 2 images.  It pops open 2 OSG windows to hold
overlapping images of some scene.  SIFT features from both images are
matched and used to compute the fundamental matrix relating the two views.
Epipoles ( = images of camera centers) are calculated and displayed within
the image planes.  When a feature is selected in one image, the
corresponding epipolar line on which its tiepoint must lie is displayed
within the counterpart image.

============================================================================
ROBOT code changes made on Thurs, Nov 3, 2011 & early Fri, Nov 4, 2011:

*.  Add edge info into Triangle class.

*.  triangles_group now stores neighboring vertex ID information.

*.  Can now compute distribution of minimum distances between Delaunay
triangle mesh neighboring vertices.

*.  In prob_distribution::write_density_data(), we now write out p[i]
rather than p[i]/dx.

============================================================================
ROBOT code changes made on Weds, Nov 2, 2011:

*.  Created new triangle and triangles_group classes within src/geometry.

============================================================================
ROBOT code changes made on Mon, Oct 31, 2011:

*.  ISDS demos and standard pgms almost work OK as of Mon, Oct 31, 2011 at
3:25 pm (pfiles10_31d.tgz) on ROBOT laptop.

.................

*.  Generalized databasefunc calls so that dynamic AVI movie clips for
arbitrary missions can be generated with only specifying start and stop
epoch times and not mission IDs.

============================================================================
ROBOT code changes made on Sat, Oct 29, 2011 - early Mon, Oct 31, 2011:

*.  Added mains/plume to repository

*.  mains/plum/CAMERACALIB fits a plane to the reconstructed world
positions for the cameras generated by Noah's bundler program.  The
rotation needed to reorient the plane's normal vector so that it equals
Z_hat is calculated.  The scaling factor needed to stretch the camera
tripod radii to their measured value with respect to the central ladder
origin is also calculated.  CAMERACALIB writes out photo parameters which
can be inserted into peter_inputs.pkg.

============================================================================
ROBOT code changes made on Fri, Oct 28, 2011:

*.  QTVIDEOONDEMAND now pulls video frame information from the FLIR
database rather than having it hardwired into the FLIRServer class.

============================================================================
ROBOT code changes made early on Weds, Oct 26, 2011:

*.  FLIRClient is now starting to finally talk with Alex King and Jon
Johnson's FLIRServer running on the Xserver.

============================================================================
ROBOT code changes made early on Tues, Oct 25, 2011:

*.  ISDS demos and standard pgms almost work OK as of Tues, Oct 25, 2011 at
8:30 am (pfiles10_25a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Mon, Oct 24, 2011:

*.  Copied videofunc::generate_AVI_movie() back into MyViewerEventHandler
since latter doesn't depend upon former namespace.

*.  mains/thunderstorm/Qt/flirserverttest and flirclienttest can now send
and receive Hello World.

============================================================================
ROBOT code changes made on late Fri, Oct 21, 2011 - Sun, Oct 23, 2011:

*.  Overwrote corrupted camera.cc and camera.h files with good ones from
Mon Oct 17.

*.  Renamed polygon::bounding_box() as generate_bounding_box() so that it's
clearer the dynamically instantiated object needs to eventually be
destroyed.

*.  geometry_func::polygon_union() takes in polygons poly1 and poly2.  It
calls the General Polygon Clipper method which generates the union from two
input polygons.  The union result (which may contain one or two polygons)
is returned within an output STL vector.

============================================================================
ROBOT code changes made on Fri, Oct 21, 2011:

*.  Generalized TSTORM database to new FLIR database.  Added campaigns and
missions tables.  Generalized insert and retrieve methods within
databasefuncs namespace to take campaign and mission ID info into account.

============================================================================
ROBOT code changes made on Thurs, Oct 20, 2011:

*.  Generating FLIR video clips on demand is starting to work!

*.  Wrote FLIRClient to start communicating with server being written by
Jon and Alex King for transmitting FLIR metadata from Xserve to Dell server
on Twin Otter.

============================================================================
ROBOT code changes made on early Thurs, Oct 20, 2011:

*.  In gis_database::open_OGR_connection(), changed FALSE argument to
OGRSFDriverRegistrar::Open() to TRUE.  Newly created Tstorm postgis-enabled
database then can at least be opened after this change.

*.  mains/thunderstorm/STORE_FLIR_METADATA reads in the metadata ascii file
generated by Ross Anderson's program which ran on the Mac-Mini along with
the FLIR for Twin Otter flights.  It extracts aircraft GPS, aircraft
orientation and FLIR pointing information from this metadata file.  After
manipulating and reformating the input metadata, this program exports it to
output files aircraft_metadata.txt and camera_metadata.txt.
STORE_FLIR_METADATA also inserts aircraft and camera metadata into rows of
postgis tables aircraft_metadata and camera_metadata within the Tstorm
database.

*.  database::select_data() now prints warning message if no database is
returned in response to select command.

============================================================================
ROBOT code changes made on Weds, Oct 19, 2011:

*. Moved FUSE_DTED_CIB from mains/afghanistan into mains/mapping.

============================================================================
ROBOT code changes made on Monday, Oct 17, 2011 - Wedsnesday, Oct 19, 2011:

*.  Moved most of generate_AVI_movie() out of MyViewerEventHandler into
videofunc namespace.

*.  mains/thunderstorm/GENERATE_MOVIE is a playground for developing video
generation on demand.

============================================================================
ROBOT code changes made on Saturday, Oct 15, 2011:

*.  LOSMODELSGROUP::toggle_between_earth_and_aircraft_reference_frames()
switches the Terrain Manipulator from an aircraft-centric to an
earth-centric view and vice-versa.

*.  ISDS demos and standard pgms almost work OK as of Mon, Oct 17, 2011 at
6:30 am (pfiles10_17a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Friday, Oct 14, 2011:

*.  Added Qt subdirectory to mains/thunderstorm.  Added QTSAURON within
this new subdirectory.

============================================================================
ROBOT code changes made on Tues, Oct 11, 2011 & early Weds, Oct 12, 2011:

*.  Added -frounding-math flag to CXX_FLAGS in makefile in order to link
CGAL libraries with our code base.

*.  Eliminated track_ptr member and set/get methods in Cylinder and MODEL
classes in favor of Geometrical class members.

*.  Eliminated follow_selected_Cylinder() and follow_selected_MODEL()
members of CylindersGroup and MODELSGROUP classes in favor of
GeometricalsGroup::follow_selected_Geometrical().

============================================================================
ROBOT code changes made on Sat, Oct 8, 2011, Sun, Oct 9, 2011 & Mon, Oct
10, 2011:

*.  track::set_XYZ_coords() now takes bool input argument
temporally_sort_flag which has default false value.

*.  Added sensor_az_el_roll and sensor_FOV STL vector members to track
class.

*.  Globally renamed astro_geo/sensor class as ground_radar class.

*.  Deleted Operations from osgOrganization subdirectory.

*.  Overloaded addition, subtraction and multiplication operators for rpy
class.

*.  LOSMODELSGROUP::set_altitude_dependent_MODEL_scale() retrieves the
current altitude of the virtual camera.  It resets the scale for all MODEL
members of *this as a linear function of the altitude.  We wrote this
method in order to make the Cessna model findable at all reasonable virtual
camera altitudes.

*.  MODELSGROUP now inherits from GeometricalsGroup rather than
GraphicalsGroup.  Eliminated CM_refptr member of MODELSGROUP in favor of
CM_refptr member in GeometricalsGroup.

*.  Added prev_framenumber member to AnimationController class.

*.  graph::delete_node() now deletes entry from nodes_map corresponding to
node_ID.

*.  OBSFRUSTUM::reorient_camera_corner_rays() takes in camera
*camera_ptr which is assumed to have an up-to-date set of UV corner
rays.  It computes the differential rotation dR needed to transform
the existng corner rays into a new set which is oriented according
to the input az, el, and roll angles.  This method returns the
reoriented UV corners rays within an STL vector.

*.  ISDS demos and standard pgms almost work OK as of Mon, Oct 10, 2011 at
7:04 pm (prilfes10_10i.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Fri, Oct 7, 2011:

*.  Commented out all references to SiftGPU in mains/video/sift_detector
class.

============================================================================
ROBOT code changes made on Mon, Oct 3, 2011 and Tues, Oct 4, 2011:

*.  mains/aerosynth/VISUALIZE_FLIR_METADATA is a variant of
PARSE_FLIR_METADATA.  It reads in the metadata ascii file generated by Ross
Anderson's program which ran on the Mac-Mini along with the FLIR for Twin
Otter flights.  It extracts aircraft GPS, aircraft orientation and FLIR
pointing information from this metadata file. This program generates a TDP
file containing the aircraft's GPS track, line-of-sight rays from the
aircraft towards the ground, and Uhat-Vhat direction vectors.

...........

*.  Added horiz_frustum_FOV, vert_frustum_FOV members to LOSMODELSGROUP
class.

============================================================================
ROBOT code changes made on Sat, Oct 1, 2011 & Sun, Oct 2, 2011:

*.  mains/mapping/TIF2TDP takes in some registered geotiff height map and
generates a corresponding point cloud in TDP output format.  The UTM zone
for the output TDP file can differ from that within the input geotiff file
via setting integer TDP_specified_UTM_zonenumber.

*. TilesGroup::get_SRTM_nadir_z_given_lon_lat() first checks if the nine
SRTM tiles nearest to the input lon,lat geocoordinates are already stored
in memory.  If not, the 3x3 tiles are loaded.  This method next computes
the easting,northing coordinates corresponding to the currently specified
UTM zonenumber.  If the easting,northing pair overlaps the 3x3 SRTM tiles
in memory, this boolean method returns true along with the nadir z value.

*.  ISDS demos and standard pgms almost work OK as of Sun, Oct 2, 2011 at
9:35 pm (pfiles10_2i.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Sep 30, 2011

*.  pyramid::get_center_axis_direction() returns the direction vector
pointing from the pyramid's apex to the center of its bottom face.

============================================================================
ROBOT code changes made on Thurs, Sep 29, 2011:

*.  PARSE_FLIR_METADATA now writes out package files for FLIR aerial video
frames containing frusta parameters derived from Ross' metadata file.

============================================================================
ROBOT code changes made on Weds, Sep 28, 2011 & early Thurs, Sep 29, 2011:

*.  mains/aerosynth/PARSE_FLIR_METADATA can now postdict camera Uhat, Vhat
and What from Ross' FLIR metadata file.

============================================================================
ROBOT code changes made on Tues, Sep 27, 2011:

*.  fundamental::get_null_vector() returns unit vector e0_hat where
(*F_ptr) * e0_hat = 0.

*.  threevector::generate_antisymmetric_matrix() returns eps_ijk *
(*this_k).  Such 3x3 matrix representations for threevectors pop up
frequently in computer vision literature.

============================================================================
ROBOT code changes made on Sun, Sep 25, 2011:

*.  ISDS demos and standard pgms almost work OK as of Sun, Sep 25 2011 at
6:47 pm (pfiles9_25b.tgz) on ROBOT laptop.  

============================================================================
ROBOT code changes made on Fri, Sep 23, 2011:

*.  Horn's iterative method for computing relative orientation and baseline
between two photos is starting to work.

============================================================================
ROBOT code changes made on Thurs, Sep 22, 2011:

*.  mains/thunderstorm/GRIDCOMP generates an alpha-numeric KML grid which
can be used to grossly but quickly geolocate ground points.

============================================================================
ROBOT code changes made on Weds, Sep 21, 2011:

*.  Created new src/math/quaternion class.

*.
graphdbfunc::retrieve_node_IDs_for_particular_graph_hierarchy_and_datum()
takes in the graph_hierarchy and datum IDs for some entries in the nodes
table of the TOC database.  It finds and returns the IDs for all nodes to
which the input datum belongs.

*.  Propagate image captions to all nodes corresponding to same photo
(i.e. children, parents, grandparents nodes all inherit same caption if
they all point towards same photo).

*.  UPDATE_CURRENT_IMAGE_CAPTION ActiveMQ message now sends CSV list of
node_IDs and graph_levels which correspond to a particular photo that
carries a particular caption.

============================================================================
ROBOT code changes made on Tues, Sep 20, 2011:

*.  plane::point_in_front_of_plane() returns true
[false] if input threevector V lies on positive side of current
plane object.

*.  fundamental::Horns_decomposition() implements B. Horn's decomposition
of an essential matrix into a baseline translation and rotation.  The
method is reported in "Recovering Baseline and Orientation from 'Essential
Matrix'" (1990) by Horn.

============================================================================
ROBOT code changes made late on Mon, Sep 19, 2011 and early on Tues, Sep
20, 2011:

*.  run_1kdemo works again with BUNDLECITIES.

*.  Added run_550_nycdemo to repository.

*.  Eliminated redundant pointing_dir member of camera class in favor of
existing W_hat member. Added imageplane_thru_center_ptr member to camera
class.

============================================================================
ROBOT code changes made on Sun, Sep 18, 2011 & early Mon, Sep 19, 2011:

*.  Fixed logic errors for mdim < ndim case in 
genmatrix::sorted_singular_value_decomposition().

*.  Fixed several logic errors in
fundamental::compute_fundamental_matrix().

*.  fundamental::correct_essential_matrix_singular_values() forces the two
nonzero singular values of *E_ptr to be equal and the 3rd singular value to
precisely equal 0.

*.  ISDS demos and standard pgms almost work OK as of Mon, Sep 19, 2011 at
6:30 pm (pfiles9_19f.tgz) on ROBOT laptop.  But BUNDLECITIES for NYC 1K
demo is no longer working correctly after we made several modifications for
Family Day 2011!

============================================================================
ROBOT code changes made on Fri, Sep 16, 2011:

*.  Added essential matrix E_ptr member to fundamental class.

============================================================================
ROBOT code changes made early on Thurs, Sep 15, 2011:

*.  Starting to implement thumbnail display of main image's children in
addition to siblings.

................

*.  graphdbfunc::retrieve_parent_datum_IDs_from_database() takes in the
graph level and ID for some particular datum.  It first recovers the graph
hierarchy and node ID corresponding to the input datum.  This method next
fetches the parent node's ID.  Finally, it converts the parent node ID into
a parent datum ID.

============================================================================
ROBOT code changes made on Weds, Sep 14, 2011:

*.  Added update_display_flag bool member to GraphicalsGroup along with set
method.  Set flag to false in NYC1KDEMO in order to preclude updating for
OBSFRUSTAGROUP, POINTCLOUDGROUPS, EARTHREGIONSGROUP, etc.  

*.  mains/newyork/NYC1KDEMO is a specialized variant of BUNDLECITIES which
we have specialized for Family Day 2011 infinite loop demo purposes.

============================================================================
ROBOT code changes made on Sun, Sep 11, 2011 & early Mon, Sep 12, 2011:

*.  Added ArmySymbolsGroup_ptr member to OBSFRUSTAGROUP class along with
set method.

*.  OBSFRUSTAGROUP::display_left_right_OBSFRUSTA_selection_symbols() checks
if the Terrain Manipulator is rotating about the current eyepoint and an
OBSFRUSTUM has been selected.  It also requires that the right and/or left
neighbor OBSFRUSTA IDs be defined.  And it waits until the virtual camera's
direction vector is nearly aligned with the selected OBSFRUSTUM's.  If all
of these criteria are satisifed, this method displays left and right arrow
HUDs to indicate that a user can move from the selected OBSFRUSTUM to its
nearby neighbors in azimuthal angle.

*.  Added new osg/osg2D/ArrowHUD class to repository.  

*.  ISDS demos and standard pgms almost work OK as of Mon, Sep 12, 2011 at
7:45 am (pfiles9_12a.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made early on Fri, Sep 9, 2011:

*.  mains/geo/GPSTIME2EPOCH takes in a GPS week and GPS seconds.  It
returns the corresponding number of seconds elapsed since the reference
epoch.

*.  mains/geo/EPOCH2GPSTIME takes in the number of seconds elapsed since
the reference epoch.  It returns the corresponding GPS week and GPS
seconds.

...........

*.  Added right_neighbor_ID and left_neighbor_ID members to Geometrical
class along with set/get methods.

*.  Added crude left/right choosing of circularly ordered Statue photos for
Family Day Wii demo.

*.  Set min camera height above zgrid to 200 meters in
mains/newyork/BUNDLECITIES,WIICITIES.

============================================================================
ROBOT code changes made on Thurs, Sep 8, 2011:

*.  Clock::elapsed_secs_to_GPS_time() converts secs since epoch into
integer GPS_week_number and double secs_into_GPS_week.

*.  In Family Day Wii demo, can no longer azimuthally spin when virtual
camera is zoomed into a selected OBSFRUSTUM.

============================================================================
ROBOT code changes made early on Weds, Sep 7, 2011:

*.
OBSFRUSTAGROUP::select_and_alpha_vary_OBSFRUSTUM_closest_to_screen_center()
is a high-level method which first searches for an OBSFRUSTUM whose camera
position lies within some reasonable distance of the screen space center.
It next checks if the virtual camera's distance from the OBSFRUSTUM's
camera is less than some maximal range.  If so, this method flies the
virtual camera into the selected OBSFRUSTUM and periodically alpha
fades/brightens the OBSFRUSTUM's image plane.  We wrote this specialized
method for Family Day 2011.

...........

*.  Implemented Darin's approach to histograming and averaging RF dir
finder signal strength vs yaw angle.  Leads to quasi-reasonable final RF
dir finding results.

*.  Home button in WII demo now basically works even when virtual camera is
aligned with an OBSFRUSTUM.

*.  Added new subdir mains/GEO to repository.

============================================================================
ROBOT code changes made on Tues, Sep 6, 2011:

*.  Added image/bmpimage.cc to repository.

...........

*.  Adjusted parameter values for Wii control of NYC photosynth demo for
Family Day 2011.

*.  Overloaded virtual reset_view_to_home() in Terrain_Manipulator class.

*.  WIICITIES demo starting to become reasonably responsive and intuitive.

============================================================================
ROBOT code changes made on Sun, Sep 4, 2011 & Mon, Sep 5, 2011:

*.  OBSFRUSTAGROUP::compute_quasirandomcamera_flyout_posn_and_orientation()
intentionally tries to reposition the virtual camera far away after it has
finished flying away from a reconstructed camera location.  The virtual
camera's final azimuth relative to the Grid center is 180 degrees off from
the reconstructed camera's.  And its elevation angle randomly ranges from
30 to 60 degrees, while its final roll angle = 0.  We wrote this
specialized method for Family Day 2011 display purposes.

*.  OBSFRUSTAGROUP::conduct_quasirandom_tour() is a specialized method
which we wrote for Family Day 2011.  It waits 10 seconds before flying in
to a new, automatically selected OBSFRUSTUM.  Over the next 30 seconds,
this method alpha blends up and down the selected OBSFRUSTUM's image plane.
Finally after the 40th second, this method flies the virtual camera away
from the selected OBSFRUSTUM and resets the clock back to zero.

*.  OBSFRUSTAGROUP::find_OBSFRUSTUM_closest_to_screen_center() loops over
all OBSFRUSTA and computes the 2D screen projection of their 3D camera
world positions.  It ignores any OBSFRUSTUM which lies too far away from
the middle of the screen.  This method returns the ID of the OBSFRUSTUM
whose camera location lies closest to the center of the screen.

*.  OBSFRUSTAGROUP::alpha_vary_selected_image() performs 3 rounds of alpha
fading followed by alpha brightening for a selected OBSFRUSTUM's image
plane.  The entire cycle of alpha varying takes approximately 25 seconds to
complete.  We wrote this specialized utility method for Family Day 2011
presentation purposes.

*.  mains/newyork/WIICITIES is a variant of BUNDLECITIES which displays
reconstructed OBSFRUSTA generated via Noah Snavely's BUNDLER program.
WIICITIES was developed to be manipulated via a Wiimote for Family Day 2011
demo purposes.

*.  ISDS demos and standard pgms almost work OK as of Mon, Sep 5, 2011 at
6:30 pm (pfiles9_5b.tgz) on ROBOT laptop.

============================================================================
ROBOT code changes made on Fri, Sep 2, 2011:

*.  Reset min[max] threshold value for intensity coloring to 0[1] in
PointCloudsGroup::get_min[max]_value().

*.  Added intensity thresholding response to Wii buttons for WIIPOINTS.

============================================================================
ROBOT code changes made on Weds, Aug 31, 2011 & early Thurs, Sep 1, 2011:

*.  mains/hmi/WIIPOINTS is a variant of VIEWPOINTS which uses a
Custom3DManipulator rather than a Terrain_Manipulator.  We wrote this
variation in Aug 2011 in order to view Laura Brattain's ultrasound point
clouds via a Wii input device rather than a conventional 3-button mouse.

============================================================================
ROBOT code changes made on Sat, Aug 27, 2011 & Sun, Aug 28, 2011:

*.  ISDS demos and standard pgms almost work OK as of Sat, Aug 27, 2011 at
9:32 am (pfiles8_27a.tgz) on ROBOT laptop.

*.  GPS_datastream::alpha_filter_lat_lon_alt() performs alpha filtering of
raw latitude, longitude and altitude GPS measurements.  Filtered output is
stored within member threevector curr_alpha_filtered_lat_lon_alt.

*.  PanoramasGroup::update_selected_panorama_based_on_GPS_posn() searches
over all neighboring Panoramas relative to the current selected panorama.
It resets the selected panorama ID to the one which is closest to the
current GPS location.  If one of the neighboring panoramas is closest to
the GPS location, the global 3D viewer is commanded to move to the
neighboring panorama's location.

*.  mains/hmi/XGWPANOS is a variant of XSENSPANOS which can input from the
orange XSENS box, a GPS hockey puck sensor and/or Wiimote.  We wrote this
program specifically to be used for outdoor "magic window" sensing around
Killian Courtyard and LL's volleyball court.

*.  OBSFRUSTUM::draw_ray_through_imageplane() instantiates a 3D arrow whose
base is located at the OBSFRUSTUM's camera center.  It pierces the
imageplane at 2D location (U,V).

*.  geometry_func::multi_line_intersection_point() implements the
least-squares multi-line intersection algorithm described in
http://en.wikipedia.org/wiki/Line-line_intersection.

*.  OBSFRUSTAGROUP::triangulate_rays() takes in the ID for some set of rays
which we assume intersect at a common location in 3D space.  Looping over
all OBSFRUSTA, this method instantiates line segments corresponding to
Arrows stored within each OBSFRUSTUM.  It then computes the least-squares
best fit intersection location for the rays.  The 3D intersection point is
displayed as a purple Point.

*.  FeaturesGroup::draw_backprojected_2D_features() reads matching UV
feature information from the specified input consolidated features file.
It backprojects the UV features into 3D space.  This method draws the
backprojected rays as colored Arrows.

============================================================================
ROBOT code changes made on Fri, Aug 26, 2011:

*.  Added GPS hockeypuck input into hacked up version of XSENSPANOS.

*.  Trying to eliminate dependence of QTPHOTOSERVER on WindowManager_ptr.

============================================================================
ROBOT code changes made on Mon, Aug 22, 2011:

*.  Added GPS_SignPostsGroup_ptr member to xsens_ins and PanoramasGroup
classes along with set method.

============================================================================
ROBOT code changes made on Sat, Aug 20, 2011:

*.  Copied mains/bluegrass/GEOREGISTER_VIDEO into mains/mapping.

*.  photogroup::compute_cameras_COM_and_plane() calculates the
center-of-mass of the cameras for all photos within the current photogroup.
It also computes the plane which best fits the camera's world positions.

============================================================================
ROBOT code changes made early on Fri, Aug 19, 2011:

*.  We realized that OSG window updating is sufficiently time consuming
that it noticeably increases reaction time to XSENS rotational input.  So
in mains/hmi/XSENSPANOS, we try to increase the number of calls to XSENS
measurement readings relative to OSG window updating in order to make
XSENSPANOS more responsive to changes in angular orientation.

*.  mains/hmi/XSENSPANOS is a variant of "Google Streets" program VIEWPANOS
meant for outdoor D7 360 panorama viewing.  It is instrumented with calls
to the orange XSENS box to read geolocation and geoorientation
measurements.

============================================================================
ROBOT code changes made on Thurs, Aug 18, 2011:

*. mains/hmi/FIXPANOS is a variant of VIEWPANOS which is intended to be
used to correct faulty D7/XSENS orientation and position information.

*.  Overloaded filterfunc::alpha_filter() to import and export
threevectors.

*. Added alpha_filter_az_el_roll() and alpha_filter_lat_lon_alt() members
to xsens_ins class.

============================================================================
ROBOT code changes made on Weds, Aug 17, 2011 & early Thurs, Aug 18, 2011:

*.  Added SignPostsGroup member to PanoramasGroup.  Label Panos by
SignPosts rather than using text member of each Panorama object.
Eliminates bad flickering problem with pano text labels.

*.  ISDS demos and standard pgms almost work OK as of Thurs, Aug 18, 2011 at
7:37 am (pfiles8_18a.tgz) on ROBOT lapto.  

============================================================================
ROBOT code changes made on Tues, Aug 16, 2011:

*.  Modified xsens_ins::getUserInputs() so that position and orientation
information is output by xsens orange box.

*.  Added README.redhat to repository

============================================================================
ROBOT code changes made on Sun, Aug 7, 2011:

*.  mains/hmi/UV2EN is a simple interpolation program which converts U,V
coordinates for selected 2D features into corresponding UTM easting &
northing geocoordinates.  Georegistration information extracted via
GDALINFO for two aerial photos (killian_UTM_warped.tif and
vball_GE_UTM_warped.tif) has been hardwired into this program.  UV2EN
queries the user to enter a text file containing 2D feature information
generated by program VIDEO.  It exports a corresponding text file which
contains feature eastings and northings.

============================================================================
ROBOT code changes made on Fri, Aug 5, 2011:

*.  Tried to make RF direction finding codes more user friendly.

*.  Trying to visualize RF direction finding results within
mains/hmi/VIEWRF.cc

============================================================================
ROBOT code changes made on Thurs, Aug 4, 2011:

*.  ISDS demos and standard pgms almost work OK as of Thurs, Aug 4, 2011 at
9:24 am (pfiles8_4b.tgz) on ROBOT lapto.  Cones are much too big on
polylines in LOST and Bluegrass demo !!!

*.  FIT_AB_PARAMS now allows user to enter fraction of simulated dynamic
hits to randomly keep.

*.  mains/hmi/RF_DIRFINDER reads in RF direction finding position, pointing
and signal strength information from input files generated by Tamara Yu.
It computes time-averaged median values for the sensor's geolocation.
RF_DIRFINDER also effectively computes signal strength as a function of
yaw.  After gaussian filtering the raw readings, this program finds the
peak as well as the yaw values where the signal strength falls by 3 dB from
the peak.  It outputs a text file with averaged sensor geoposition, yaw
pointing, RF lobe yaw size and peak signal strength.

============================================================================
ROBOT code changes made on Weds, Aug 3, 2011:

*.  PathFinder::score_path_to_dynamic_path_points() takes in a set of
dynamically measured points along a mystery path.  It also takes in a
candidate full path within *polyline_ptr.  This method performs a brute
force computation of the average minimal distance of the dynamic points to
*polyline_ptr.

*.  mains/pathfinder/FIT_AB_PARAMS is a specialized utility which we wrote
for TOC11.  It loads in some set of simulated dynamic hits along a
"mystery" path whose alpha and beta cost function coefficients are regarded
as unknown.  Looping over alpha-beta parameter space, FIT_AB_PARAMS
generates A* paths through ALIRT data between specified starting and
stopping points.  It computes the average minimal distance between all
simulated dynamic points and each candidate alpha-beta path.  FIT_AB_PARAMS
iteratively refines its alpha-beta parameter search based upon the top few
scored paths in the previous iteration.


============================================================================
ROBOT code changes made on Tues, Aug 2, 2011 & early Weds, Aug 3, 2011:

*.  PhotoServer::issue_best_path_message() broadcasts best_path node IDs to
Michael Yee's graph tool.

..........................

*.  Created new MessageServer class in src/Qt/web.  PhotoServer now
inherits from MessageServer.

*.  MessageServer class now works with STL map of Messenger ptrs rather
than STL vector.  Each Messenger is labeled by its topic name string.

..........................

*.  Multi-user communication for 2 pairs of thin/thick clients (image
viewer + Michael's graph tool) seems to work OK!

*.  Starting to add dynamic path point fitting member functions to
PathFinder class.

============================================================================
ROBOT code changes made on Mon, Aug 1, 2011:

*.  Allow user to enter local az spin correction angle and print current
camera az in VIEWPANOS.

============================================================================
ROBOT code changes made on Sun, July 31, 2011:

*.  Added ArrowsGroup_ptr member to PanoramasGroup along with get method.

*.  Added pointing_Arrow_ptr member to PanoramasGroup class.  

*.  In mains/hmi/VIEWPANOS, display pointing_Arrow_ptr in 3rd person
overhead view.  Continuously update its orientation as user spins 1st
person view.  

============================================================================
ROBOT code changes made on Fri, July 29, 2011:

*.  graphdbfunc::get_graph_ID_given_node_and_hierarchy_IDs() takes in a
node ID along with its corresponding graph hierarchy ID.  It returns the
unique graph ID retrieved from the nodes table in the TOC database.

*.  graphdbfunc::get_graph_level_given_ID() takes in the graph_hierarchy
and ID for some entry in the graphs table of the TOC database.  It finds
and returns the corresponding graph level.

============================================================================
ROBOT code changes made on Thurs, July 28, 2011:

*.  mains/graph/SELECT_NODES takes in some text file containing node IDs for
some particular photo set of interest (e.g. nodes selected via Michael
Yee's graph tool).  It queries the user to enter a graph ID.  SELECT_NODES
then retrieves the URLs corresponding to the input node IDs.  It outputs a
unix command file filled with link commands from an unknown subdirectory
containing all input photo filenames to the current subdirectory.

*.  mains/hmi/VIEWPANOS can now display Google Earth georegistered aerial
photo underneath wagonwheels.

============================================================================
ROBOT code changes made on Weds, July 27, 2011:

*.  Added new notes to README.GDAL

============================================================================
ROBOT code changes made on Tues, July 26, 2011:

*.  PhotoServer starting to respond to changes in publish/subscribe topic
name

*.  Feature import/export now confirmed in QTVIEWLADAR and QTVIEWMOVIE by
thin client alert messages.

============================================================================
ROBOT code changes made early on Tues, July 26, 2011:

*.  graphdbfunc::get_graph_hierarchy_ID_given_graph_ID() takes in the ID
for a particular graph within the graphs table of the TOC database.  It
finds and returns the ID for the graph's hierarchy.

*.  graphdbfunc::retrieve_node_labels_from_database() takes in the ID for
some particular graph.  It returns an STL map containing the graph's
captions versus its nodes IDs.

*.  photodbfunc::write_graph_json_string() now executes single SQL calls to
retrieve all photo metadata and node labels for a particular graph.
Returned info is stored in STL maps which are passed as args to
write_node_json_string().  No longer perform sequential SQL calls for every
photo to obtain metadata and caption information.  Speeds up loading of
graph hierarchies in Michael's graph tool.

============================================================================
ROBOT code changes made on Mon, Jul 25, 2011:

*.  Added Lucas' az/yaw modification to convert_lla_to_utm.

*.  Modified mains/hmi/VIEWPANOS to better display Lucas' volleyball court
D7 panoramas.

============================================================================
ROBOT code changes made on Sat, July 23, 2011, Sun, July 24, 2011 & early
Mon, Jul 25, 2011:

*.  graphdbfunc::retrieve_node_data_IDs_for_particular_graph_hierarchy()
takes in the graph_hierarchy ID for some entries in the nodes table of the
TOC database.  It returns an STL map containing node and data ID pairs.

*.  mains/graphs/KMEANS_CLUSTERS reads in the gx-gy layout for a SIFT graph
generated by program EXTRACT_OGDF_LAYOUT and the edge list generated by
program SIFT_PARSER.  It first modifies the layout by migrating nodes
towards each other depending upon their SIFT edge weight.  The modified
gx-gy node coordiantes are written out to
"graph_XY_coords.modified_fm3_layout".  KMEANS_CLUSTERS next computes the
minimum number of nodes which should appear in the highest level of a graph
hierarchy pyramid.  It queries the user to enter the desired number of
levels within the pyramid.  KMEANS_CLUSTERS then uses the K-means++
algorithm of David Arthur from Stanford to compute a uniform sequence of
parent, grandparent, great-grandparent, etc nodes for the specified number
of pyramid levels.  It exports pyramided clustering results to
level_0l_clusters.dat text files.

*.  Added get_min_node_ID() member to graph class.

*.  mains/photosynth/GENERATE_PHOTO_HIERARCHY can now create 4 or more
levels within graph pyramid.

*.  ISDS demos and standard pgms almost work OK as of Mon, July 25 2011 at
7:18 am on ROBOT laptop (pfiles7_25a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Thurs, July 21, 2011:

*.  Program CONVERT_LLA_TO_UTM assumes a text file called
'wagonwheel_LLA_posn_pointing.dat' sits in the cropped subdir of the raw D7
jpeg images directory.  This comma-separated-value file should contain pano
ID, latitude, longitude, altitude, azimuth, elevation and roll values for
each D7 wagonwheel.  This program converts the latitude and longitude
angles into UTM easting and northing geocoordinates.  It outputs a new text
file 'wagonwheel_UTM_posn_pointing.dat' to the same subdirectory as the
input LLA file.  The new text file can be read into program
GENERATE_WAGONWHEELS.

*.  Generalized mains/hmi/VIEWPANOS s.t. it can start to handle wagonwheels
with UTM geocoords.

============================================================================
ROBOT code changes made on Sunday, July 17, 2011 and early Mon, July 18, 2011:

*.  Added UV_bbox_ptr member to camera class along with get method.

*.  ISDS demos and standard pgms almost work OK as of Mon, July 18 2011 at
10:11 am on ROBOT laptop (pfiles7_18c.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

.............

*.  FusionGroup::backproject_2D_rectangle_into_3D() takes in the latest,
selected 2D rectangle from *RectanglesGroup_ptr.  It forms a 10x10 grid of
UV points over the input 2D rectangle.  Each UV grid point is raytracted
back into the 3D ladar map.  A middle value from the distribution of ranges
each backprojected UV grid point is calculated as the representative depth
corresponding to the input 2D rectangle.  A cylindrical polyhedron is
instantiated within *Polyhedron_ptr which represents our best estimate for
the bulk of 3D worldspace corresponding to the input 2D rectangle.  A
sub-frustum is also generated within *sub_Ground_OBSFRUSTAGROUP_ptr which
extends from the camera's world space position out to the representative
depth.

*.  FusionGroup::project_ground_polyhedron_into_aerial_OBSFRUSTA()
retrieves the cylindrical polyhedron corresponding to an input 2D rectangle
within a ground camera's image plane.  It loops over all OBSFRUSTA within
*Aerial_OBSFRUSTAGROUP_ptr.  For each aerial OBSFRUSTUM, this method
projects the ground polyhedron's vertices into the aerial image plane.  It
then forms a bounding box in the UV aerial image plane.  The aerial
OBSFRUSTUM with the large UV bounding box is taken to be the one with the
best aerial view of the input ground cylindrical prism.  This method
instantiates a subfrustum within *sub_Aerial_OBSFRUSTAGROUP_ptr which
extends from the aerial camera's position nearly down to the ground
polyhedron's position.

*.  Added subfrustum_downrange_distance and subfrustum_volume_alpha members
to OBSFRUSTAGROUP class along with set methods.

*.  mains/wisp/AIRGROUND is a variant of WISPPROP.  It pops open a 3D
window displaying a point cloud (ladar and/or bundler reconstructed) and
georegistered WISP panel frames' OBSFRUSTA.  Aerial OBSFRUSTA corresponding
to reconstructed Twin Otter imagery are also displayed in the 3D map.

AIRGROUND opens another 2D window in which the video frame for the most
recently selected WISP OBSFRUSTUM is displayed.  After pressing "Q" to
enter into Input Rectangle Mode, the user can select a rectangular
subregion within the WISP video frame.  Right/left [up/down] arrow keys can
be used to increase/decrease the selected rectangles width [height].  When
the 2D imagery window is in Manipulate Rectangle Mode and the user presses
"p" in the 2D window, a red subfrustum is displayed within the 3D imagery
window which represents the best estimate for the world space subvolume
corresponding to the input 2D rectangle.

Within the 2D imagery window, the user may subsequently press "a" to
instruct the machine to find the aerial image which has maximal overlap
with the selected 3D worldspace subvolume.  A cyan OBSFRUSTUM is drawn from
the automatically selected aerial camera's location down to nearly the
location of the ground subvolume's end point.  The user may fly into the
aerial OBSFRUSTUM and fade away its image to compare the corresponding
aerial view with the selected ground region within the WISP image.

*.  

============================================================================
ROBOT code changes made on Thurs, July 14, 2011 & Fri, July 15, 2011:

*.  Eliminated get_graph_hierarchy_ID(), get_graph_level() and
get_node_ID() methods from PhotoServer class.

*.  Eliminated unused set_graph_level_and_node() method from PhotoServer
class.  Eliminated hierarchy_ID, graph_level and node_ID members from
PhotoServer class.

*.  Eliminated as many "stateful" member variables from PhotoServer class
as possible in order to move it towards becoming stateless.

============================================================================
ROBOT code changes made early on Weds, July 13, 2011:

*.  Renamed mains/hmi/cropped_D7.cc as generate_D7_panels.cc

============================================================================
ROBOT code changes made on Mon, July 11, 2011:

*.  ISDS demos and standard pgms almost work OK as of Mon, July 11 2011 at
10:50 am on ROBOT laptop (pfiles7_3a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

*.  Fixed Polyhedra coloring bug with a hack to
PolyhedraGroup::update_display().

============================================================================
ROBOT code changes made on Sat, July 9, 2011 & Sun, July 10, 2011:

*.  Restored LOST so that it works as before hacking for Tstorm
analysis purposes.

*.  Added ray_tracer_ptr member to AnnotatorsGroup along with set and get
methods.

*.  RectanglesGroup now inherits from GeometricalsGroup rather than
GraphicalsGroup.  RectanglesKeyHandler now inherits from
GeometricalsKeyHandler rather than GraphicalsKeyHandler.

*.  Added RectanglesGroup_ptr member to FusionGroup class along with set
method.

*.  GraphicalsGroup::rescale() now returns pointer to rescaled Graphical
rather than void.

*.  Rectangle class now contains bounding_box member bbox which is reset
anytime Rectangle is translated or resized.

*.  Added air_photogroup_ptr and ray_tracer_ptr members to FusionGroup
class.  Renamed photogroup_ptr member as ground_photogroup_ptr.

*.  photogroup::generate_subgroup() dynamically instantiates a new
photogroup.  It copies photographs labeled by IDs ranging from ID_start to
ID_stop into the new subgroup.  This method returns a pointer to the new
subgroup.

============================================================================
ROBOT code changes made on Fri, July 8, 2011:

*.  mains/aerosynth/GPSFIT reads in reconstructed camera posns generated by
Noah Snavely's BUNDLER program in some arbitrary 3D coordinate system.  It
also reads in a text file containing actual GPS locations for the camera.
The two input files are assumed to be in precise correspondence.  GPSFIT
applies B. Horn's closed-form least-squares fitting procedure to compute
the global rotation, translation and scaling needed to transform the
bundler camera path into the GPS path.  It reports the average residual
between the transformed and measured paths.  This program also exports the
transformed path as a TDP and OSGA file.

============================================================================
ROBOT code changes made on Thurs, July 7, 2011:

*.  XSENS program now acts more like GPS program developed for TOC10

*.  Clock::set_time_based_on_local_computer_clock() calls Unix
command localtime_r() to resets current Clock object's local and
UTC time.  

*.  Explicitly check for NAN values within raw angle, geolocation and
acceleration measurements from XSENS in xsens_ins class.

*.  Moved Horn's fitting for global rotation, translation and scale into
multiple methods in bundlerfuncs namespace.

============================================================================
ROBOT code changes made on Weds, July 6, 2011 and early Thurs, July 7, 2011:

*.  mains/hmi/XSENS now records orientation angles to output text file.

*.  Added lat, lon, alt members and methods to xsens_ins class.  

*.  Implemented Horn's closed-form solution for 7 param global
transformation in mains/testdir/gpsfit.cc

============================================================================
ROBOT code changes made on Tues, July 5, 2011 & early Weds, July 6, 2011:

*.  kml_parser::generate_track_kml_file() takes in *track_ptr which is
assumed to be filled with lon-lat-alt as a function of time measured in
elapsed secs since midnight 1 Jan 1970.  It writes this time-dependent
track to the specified output KML file along with a time-independent
polyline for the track.

*.  Cleaned up mains/thunderstorm/GPS2KML.cc to make it easier for Alex
King to use.

============================================================================
ROBOT code changes made on Sat, July 2, 2011; Sun, July 3, 2011; Mon, July
4, 2011; early on Tues, July 5, 2011:

*.  Added FOB_Blessing_data_flag boolean member to ray_tracer class along
with set method.

*.  Added specialized get_FOB_Blessing_ladar_z_given_xy() member function
to TilesGroup class.

*.  Added flightpath_fraction_offset member to MODELSGROUP class along with
set method.

*.  Eliminated OBSFRUSTUM::load_ladar_height_data().

*.  ISDS demos and standard pgms almost work OK as of Sun, Jul 3, 2011 at
2:08 pm on ROBOT laptop (pfiles7_3a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

*.  mains/thunderstorm/GPS2KML reads in the metadata ascii file generated by
Ross Anderson's program which ran on the Mac-Mini along with the FLIR for
Twin Otter flights.  It extracts aircraft GPS information from this
metadata file.  This program writes out TDP, OSGA and KML file versions of
the GPS flightpath.

*.  Added mains/SIGINT to repository.  Moved hafbraytrace from mains/wisp
to this mains/sigint/ptraytrace.cc

*.  mains/hmi/CROP_D7 reads in a set of ~5Kx1K JPG images which are assumed
to have been generated by two back-to-back D7 video cameras.  It performs
vertical and horizontal profiling to find the genuine edges of the input
panoramas.  This program then utilizes ImageMagick's conversion program to
crop away black borders from the panoramas.

*.  Just beginning to view outdoor D7 panoramas as 3D wagonwheels.

============================================================================
ROBOT code changes made early on Fri, Jul 1, 2011:

*.  Starting to obtain reasonable raytracing results in 200 meter circle
around LL using HAFB minimap.

============================================================================
ROBOT code changes made on Weds, Jun 29, 2011 & Thurs, Jun 30, 2011:

*.  Made more changes to TOC11 path-planning cost function in MapSearchNode
class to try to force 2nd term to yield paths which favor middle Z values
rather than very small or very large ones.

*.  mains/hmi/US2TDP takes in ultra-sound scans from binary data files
supplied by Laura Brattain.  Following Laura's matrix conventions, it
transforms each individual scan into the reference frame of the first scan.
After registering, the data from a particular scan is aggregated into an
STL map which keeps track of numerator and denominator factors for each
voxel.  The average ultrasound intensity for each voxel is calculated and
exported to TDP file "avg_us.tdp".

============================================================================
ROBOT code changes made on Weds, Jun 29, 2011:

*.  TOC11 path-planning cost function dependence upon alpha & beta
parameters is finally starting to yield an interesting path network.  

============================================================================
ROBOT code changes made on Tues, Jun 28, 2011 & early Weds, Jun 29, 2011:

*. Added altitude_dependent_size_flag [raytrace_visible_terrain_flag] bool
member to SignPostsGroup class with default true [false] value.  Added set
methods as well.

*.  ray_tracer::raytrace_circle_around_ground_target() takes in some
sensor's location within input threevector apex along with a maximum 2D
radius around the sensor to be raytraced.  It instantiates
*DTED_ptwoDarray_ptr to hold -1, 0 or 1 values indicating ground locations
lying outside maximum radius, occluded ground location, or ground location
with clear line-of-sight to sensor.  This method is designed to be called
with ALIRT ladar data whose height information is NOT read in from
*DTED_ztwoDarray_ptr.

*.  Cleaned up cost function and A* heuristic for TOC11 path planning
within image/MapSearchNode.cc

============================================================================
ROBOT code changes made on Sun, Jun 26, 2011 & early Mon, Jun 27, 2011

*.  Moved all trace_individual_ray() and evaluate_segment_height() member
functions out of OBSFRUSTUM class into new ray_tracer class.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jun 27, 2011 at
8:53 am on ROBOT laptop (pfiles6_27b.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Weds, Jun 22, 2011:

*.  PathFinder::compute_Astar_paths_vs_alpha_beta() loops over alpha and
beta parameter ranges.  It writes out Astar paths optimizing the TOC11 cost
function as a function of alpha and beta.

*.  HAFB flight1 on 5-25-11 focused on CreditUnion with 4.7 deg FOV has OK
but not great geoalignment with HAFB ladar minimap.

============================================================================
ROBOT code changes made on Mon, Jun 20, 2011:

*.  Added LADARSYNTH.cc to mains/aerosynth

*.  HAFB flight1 on 5-25-11 with 28 deg FOV starting to georegister with
ALIRT mini map!

*.  mains/hmi/LAURA is starting to generate 3D pictures of laura's
ultrasound imagery.

============================================================================
ROBOT code changes made on Sun, Jun 19, 2011 & early Mon, Jun 20, 2011:

*.  Rewrote aerosynth/GPSREGISTER to fit reconstructed camera positions to
HAFB FLIR flight 1 GPS flightpath.

*.  Added zmin,zmax members to PathFinder class along with
set_extremal_z_values() method.

*.  Added zmin,zmax,zfrac_term_weight members to MapSearchNode class along
with set methods.

*.  MapSearchNode::GetCost() evaluates a dimensionless cost function
involving 3 terms for moving from the current (X,Y,Z) position within the
world map to a candidate successor location.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jun 20, 2011 at
8:38 am on ROBOT laptop (pfiles6_20b.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Sat, Jun 18, 2011:

*.  Added quality input parameter to
outputfunc::generate_conversion_script() with default -1 value.

============================================================================
ROBOT code changes made on Weds, June 15, 2011:

*.  filefunc methods LoadUnsignedChars() and LoadFloats() are based upon
Laura Brattain's original codes.  They take in names for files assumed to
contain just unsigned chars or floats.  ReadUnsignedChars() and
ReadFloats() returns dynamically instantiated arrays containing the
imported binary data.

*.  mains/aerosynth/PARSE_FLIR_METADATA reads in the metadata ascii file
generated by Ross Anderson's program which ran on the Mac-Mini along with
the FLIR for Twin Otter flights.  It extracts aircraft GPS information from
this metadata file.

*.  Clock::function parse_YYYYMMDD_string() takes in a string of the form
YYYYMMDD.  It extracts and returns year, month and day information.

*.  Clock::function parse_HHMMSS_string() takes in a string of the form
HHMMSS.  It extracts and returns hour, minute and second component
information.

============================================================================
ROBOT code changes made on Tues, Jun 14, 2011:

*.  texture_rectangle::compute_image_entropy() calculates S = -sum_i p_i ln
p_i where i ranges over the 256 intensity values for a greyscale image.  It
returns a normalized values for S.  S=0 implies intensity is constant
across the entire image.  S=1 implies image is "busy", "noisy",
"informative".

============================================================================
ROBOT code changes made early on Mon, Jun 13, 2011:

*.  ISDS demos and standard pgms almost work OK as of Mon, Jun 13, 2011 at
8:45 am on ROBOT laptop (pfiles6_13a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Thurs, Jun 9, 2011:

*.  Added ClientID string member to Messenger class along with get method.

*.  Messenger::changeTopic() intentionally mimics the Java method
which Michael Yee wrote on 6/9/11 to enable topic names to be
dynamically changed.

*.  Added Publish/Subscribe topic name field 

============================================================================
ROBOT code changes made on Weds, Jun 8, 2011:


*.  OGDF_LAYOUT now exports edge list and layout information for just
largest connected component of input graph G.

============================================================================
ROBOT code changes made on Tues, Jun 7, 2011:

*.  Added children search methods to graphdbfuncs namespace.

*.  Number of children of any particular node now correctly shows up in
IMAGE thin client.

============================================================================
ROBOT code changes made early on Sat, Jun 4, 2011 & Sun, Jun 5, 2011:

*.
optimizer::compute_RANSAC_rotation_between_imagespace_rays_and_world_rays()
first computes rotations which map one feature from each photo onto its
manually selected worldspace counterpart.  This initial rotation is used to
define inlier and outlier features.  An improved rotation estimate is
recomputed based upon inlier features.  This RANSAC method returns the
inlier rotation with the maximum number of inlier features.

*.
optimizer::compute_inlier_rotation_between_imagespace_rays_and_world_rays()
takes in a candidate R_global calculated from just n_photos worth of
manually identified imagespace and worldspace features.  Looping over all
features, it identifies inliers whose rotated imagespace rays lie close to
their worldspace counterparts.  This method then recomputes and returns the
global rotation corresponding to just inlier imagespace and worldspace
features.

*.
optimizer::randomly_compute_rotation_between_imagespace_rays_and_world_rays()
randomly chooses one manual feature from each of the input photos
(e.g. OBSFRUSTA within panoramic video camera).  It returns the global
rotation which maps imagespace rays onto their world space counterparts
based upon just this small number (n_photos) worth of input feature
tiepoints.

*.  Incorporated RANSAC inlier detection into mains/wisp/GEOREGPANO.
Geoalignment of zeroth WISP to HAFB minimap is reasonable (though not
perfect).

*.  mains/wisp/WISPPROP is a variant of mains/photosynth/PROPAGATOR.  It
pops open a 3D window displaying a point cloud (ladar and/or bundler
reconstructed) and georegistered WISP panel frames' OBSFRUSTA. It also
opens a 2D window in which the video frame for the most recently selected
OBSFRUSTUM is displayed.

*.  mains/wisp/PANORAYTRACE is a variant of PANOVSLADAR which performs
line-of-sight raytracing for the WISP panoramic video camera.  An empty
MODEL holding the OBSFRUSTAGROUP for WISP's 10 cameras is instantiated.  A
single geotif holding ALIRT heights in the vicinity of FOB Blessing is also
imported.  After performing LOST-like raytracing, terrain regions around
FOB Blessing which are visible [occluded] to WISP are shaded in green
[red].  Terrain locations lying outside WISP's field-of-view are shaded
grey.

*.  Added Screen Capture tab to VIDEO player.

============================================================================
ROBOT code changes made early on Fri, Jun 3, 2011:

*.  Starting to raytrace lines of sight for WISP around FOB Blessing.

============================================================================
ROBOT code changes made on Weds, Jun 1, 2011:

*.  ISDS demos and standard pgms almost work OK as of Weds, Jun 1, 2011 at
8:37 am on ROBOT laptop (pfiles6_1a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

*.  Updated calls to
photodbfunc::retrieve_particular_photo_metadata_from_database() within
AnnotationServer class.

*.  In DataloaderServer::insert_photos_into_database() and
update_thumbnail_metadata_in_database(), no longer assume input photos all
have same pixel sizes.

============================================================================
ROBOT code changes made on Tues, May 31, 2011:

*. imagefunc::get_image_properties() uses ImageMagick's ping() command
followed by columns(), rows(), format() and fileSize() calls to rapidly
return basic image property information without expensive pixel importing.

*.  Eliminated photograph::set_image_dimensions() in favor of faster
imagefunc::get_image_width_height().

============================================================================
ROBOT code changes made on Sat, May 28, 2011; Sun, May 29, 2011:

*.  Added WISP dir to Makefile and build_all script

-----------------------

*.  Renamed toggle_vertex() and similar functions in ladar/polylines.js and
roi.js as toggle_polyline_vertex().  PolyLine vertex manipulation works
again in QTLADAR.  But ROI manipulation almost certainly no longer works!

*.  mains/video/COMPUTE_F takes in the number of horizontal and vertical
pixels for a photo along with its horizontal field of view FOV_u.  It
returns the vertical field of view FOV_v along with dimensionless focal
parameter f.

*.  Added WRAP4 & WRAP8 options for ladar colormap in LADARSERVER class.

*.  Reasonable, though definitely not perfect, georegistration of first
WISP frame to HAFB ALIRT map.

============================================================================
ROBOT code changes made on Fri, May 27, 2011

*.  ISDS demos and standard pgms almost work OK as of Fri, May 27, 2011 at
8:07 am on ROBOT laptop (pfiles5_27a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Fri, May 20, 2011; Sat, May 21, 2011; Sun,
May 22, 2011; Mon, May 23, 2011:

*.  Extended extremal lat/lon coords for TOC11 display to include all
AF/PAK as in LOST.  Blessing ladar tile's posn is much easier to understand
when GIS layers are visible.

*.  Wrote overloaded versions of raytrace_ground_targets(),
trace_individual_ray(), evaluate_segment_height() methods in OBSFRUSTUM.
They depend on TilesGroup::get_ladar_z_given_xy() and do not use
DTED_ztwoDarray_ptr.  We wrote these versions for the red actor path
problem of TOC11.

*.  Raytracing single ground target moving along ground path now works!

*.  Added GeometricalsKeyHandler class to osg/osgGeometry.

*.  Can export and import ground path for QTTOC11.  Can also export/import
raytracing results for moving ground target.

*.  Added max_ground_Z member to LOSMODELSGROUP along with set method.

============================================================================
ROBOT code changes made on Weds, May 18, 2011:

*.  Overloaded operator<< for AnimationController class.

*.  Added set_AnimaionController_ptr member to ImageNumberHUD class.

*.  Added loiter_at_track_end_flag to MODELSGROUP class along with set method.

*.  Synchronized movement of ground target, aircraft and ImageNumber
display finally works in QTTOC11 !

============================================================================
ROBOT code changes made on Tues, May 17, 2011 & early Weds, May 18, 2011:

*.  track::compute_average_velocities() loops over all vertex positions
within the current track.  It uses track positions to derive averaged track
velocities.

*.  Added tracks_group_ptr member to GeometricalsGroup along with set
method.

*.  Trying to sync mobile SignPost clock with master animation controller's
clock.

*.  ISDS demos and standard pgms almost work OK as of Weds, May 18, 2011 at
11:50 am on ROBOT laptop (pfiles5_18c.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Mon, May 9, 2011, Mon, May 16, 2011 & Tues, May
17, 2011:

*.  geopoint << operator now reports lon and lat as decimal degs; int degs
+ decimal mins; int degs + int mins + decimal secs

*.  mains/mapping/DECMINS takes in lon-lat geocoords in integer degs and
decimal minutes.  It converts these input coords into all lon-lat forms as
well as UTM.

*.  Can start to manually lay down ground path in QTTOC11.

*.  Can now pass in STL vector of threevectors into HiresDataVisitor for
ground path terrain height computation.

*.  Added get_relative_V() member function to PolyLine class.

*.  Added PolyLinesGroup_ptr member to PointCloudsGroup class along with
set method.

*.  Added README.http_proxy to repository.

*. In TilesGroup class, eliminated unused member
GroundTarget_SignPostsGroup_ptr.

*.  Added prev_ladar_geotif_filename member to TilesGroup class.

*.  TilesGroup::get_ladar_z_given_xy() first computes integer indices m and
n for the ladar tile containing the input (x,y) pair.  It loads the tile
corresponding to (m,n) into *DTED_ztwoDarray_ptr if it is not already in
memory.  This method then returns z = DTED_ztwoDarray_ptr(x,y).

*.  Added tracks_group_ptr member to PointCloudsGroup class along with set
method.

============================================================================
ROBOT code changes made on Sat, May 7, 2011:

*.  Added string caption argument to
photodbfunc::retrieve_particular_photo_metadata_from_database() called in 
MovieServer::generate_JSON_for_single_mission_importance_intervals().

============================================================================
ROBOT code changes made on Tues, May 3, 2011 & Weds, May 4, 2011:

*.  ISDS demos and standard pgms almost work OK as of Weds, May 4, 2011 at
11 am on ROBOT laptop (pfiles5_4b.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Sun, May 1, 2011, Mon, May 2, 2011 & early Tues,
May 3, 2011:

*.  mains/mapping/CLEANHEIGHTTILE performs some simple cleaning operations
on ALIRT height imagery geotif files.  It first identifies and eliminates
isolated height outlier pixels.  CLEANHEIGHTTILE next iteratively searches
and median fills null-valued pixels.  Filtered geotif, tdp and osga files
are written out to subdirectories of ./filtered_Z_tiles.

*.  Added QTTOC11 files to repository.  

*.  QTTOC11 brings up FOB Blessing ALIRT tiles in 3D viewer.

============================================================================
ROBOT code changes made early on Thurs, Apr 28, 2011:

*.  Added mains/thunderstorm to repository

============================================================================
ROBOT code changes made early on Weds, Apr 27, 2011:

*.  Added label member to node class along with set/get methods.

*.  Added caption update methods to graphdbfuncs namespace.

*.  Added image caption member functions to PhotoServer class.

============================================================================
ROBOT code changes made on Mon, Apr 25, 2011:

*.  Added levelzero_graph_ID member to graph_hierarchy class.

*.  mains/photosynth/GENERATE_PHOTO_HIERARCHY now queries user for ID of
zeroth-level graph.  It writes out graph, node and link SQL command files
with correct graph ID info.

*.  GENERATE_PETER_INPUTS now creates run_mcl_level01,2,3.

============================================================================
ROBOT code changes made on Sat, Apr 23, 2011;  Sun, Apr 24, 2011; early
Mon, Apr 25, 2011:

*.  In JSON string outputs, keys are now surrounded by double quotes (as
requested by Michael Yee).

*.  Get_Graph http call can now include nodes=true/false and
edges=true/false parameters.  

*.  photodbfunc::write_graph_json_string() takes in *graph_ptr along with
boolean flag get_nodes_flag and get_edges_flag.  It outputs a JSON string
containing node and edge information depending upon these flags' values.
If STL vector incident_node_IDs is non-empty, only edges adjacent to input
nodes are written to output JSON string.

*.  Fixed memory leak in ZPTIFS2TDP.

*.  LOSMODELSGROUP::export_visibility_omnimap() takes in visibility
*ptwoDarray_ptr which is assumed to contain binary integer values.  The
number of "visible" values is further assumed to be much less than the
number of "occluded" values.  So this method writes out the (px,py)
coordinates of all visible pixels to an output text file.  It also exports
metadata for *ptwoDarray_ptr needed to reconstruct the visibility map.

*.  LOSMODELSGROUP::import_visibility_omnimap() reads in the text file
generated by export_visibility_omnimap().  It instantiates,
reconstructs and returns *omni_twoDarray_ptr from the parsed file.

*.  LOSMODELSGROUP::raytrace_visibility_omnimap() takes in the apex
location for some omni-directional camera.  It also takes in pre-calculated
terrain map *DTED_ztwoDarray_ptr.  It returns a binary visibility map
within *omni_twoDarray_ptr.

*.  LOSMODELSGROUP::fit_ground_target_position() takes in the true position
for a ground transmitter along with a simulated visibility map in
*measured_twoDarray_ptr.  It iteratively loops over a 5x5 lattice whose
easting and northing boundaries are intentionally randomized wrt
xlo,xhi,ylo,hi of *measured_twoDarray_ptr.  At each lattice point, this
method computes a candidate raytraced visibility map and compares it with
*measured_twoDarray_ptr.  After 5 iterations, this method returns the best
fit location for the ground transmitter deduced by comparing calculated vs
measured visibility maps.  The best fit visibility map is displayed in the
3D viewer, and its non-zero entries are written out to
fitted_visibility.omnimap.

*.  ISDS demos and standard pgms almost work OK as of Mon, Apr 25, 2011 at
7:13 am on ROBOT laptop (pfiles4_25a.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Weds, Apr 20, 2011:

*.  mains/mapping/ZPTIFS2TDP takes in registered geotiff height and
probability maps and generates a corresponding point cloud in TDP output
format.

============================================================================
ROBOT code changes made on Mon, Apr 18, 2011 & Tues, Apr 19, 2011:

*.  mains/afghanistan/LADARRAYTRACE is starting to trace rays from a ground
target to other ground points within a ladar tile of Afghanistan.

============================================================================
ROBOT code changes made on Sat, Apr 16, 2011 & Sun, Apr 17, 2011:

*.  Added G99 Kakadu and Wisp classes received from Chris Bowen to
src/kakadu

*.  Can now parse WISP images.

*.  ISDS demos and standard pgms almost work OK as of Sun, Apr 17, 2011 at
3:08 pm on ROBOT laptop (pfiles4_17c.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

*.  Started to experiment with omni ground target raytracing.  As of 7:19
pm on Sunday, April 17, we have not been able to read in DTED info
correctly for small regions around a single ground target.  Saved buggy
initial attempts into pfiles4_17e.tgz.  

To avoid catastrophe with LOST demo for JD on Tues morning, we will revert
LOSMODELSGROUP.cc, LOSMODELSKeyHandler.cc, OBSFRUSTUM.cc, TilesGroup.cc and
qtlos.cc, to working versions from pfiles4_17c.tgz as of 7:20 pm.

============================================================================
ROBOT code changes made on Fri, Apr 15, 2011:

*.  SIFT_PARSER now prints out only every 1000th pair of sift matches.  It
also writes out sift matches before sift features SQL files.

*.  mains/mapping/GDALTILES generates an executable script which calls
GDAL_TRANSLATE on a large, mosaiced TIF file.  Extremal easting & northing
values bounding the tiles to be extracted from the TIF mosaic are hardwired
in this main program.  The spatial extents of the individual tiles are also
hardwired (5 km).

*.  In graphdbfunc::generate_insert_node_SQL_command() and
generate_insert_link_SQL_command(), no longer write out graph level
information.

============================================================================
ROBOT code changes made on Thurs, April 14, 2011:

*.  mains/mapping/GENERATE_TIF2OSGA_SCRIPT is a specialized program written
to produce an executable script for running program TIF2TDP and LODTREE on
a set of Z-tiles.

============================================================================
ROBOT code changes made on Mon, Apr 11, 2011 & Tues, Apr 12, 2011:

*.  Updated Makefile to work with version 64 rather than 52 of kakadu
library.

*.  Starting to parse JP2S file sent by Chris Bowen holding WISP imagery.

*.  Added mains/wisp to repository.

============================================================================
ROBOT code changes made on Sun, Apr 10, 2011:

*.  Instrumeted PhotoServer with ActiveMQ messenger.  Whenever current
image is updated, messenger broadcasts hierarchy ID, graph level, node ID
and photo ID.

*.  ISDS demos and standard pgms almost work OK as of Sun, Apr 10, 2011 at
5:53 pm on ROBOT laptop (pfiles4_10h.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!

============================================================================
ROBOT code changes made on Sat, Apr 9, 2011 & Sun, Apr 10, 2011:

*.  stringfunc::hexadecimal_to_integer() returns the base 10 integer
corresponding to an input hex string.

*.  colorfunc::RRGGBB_hex_to_RGB() takes in a hexadecimal string in the
form RRGGBB.  It returns the corresponding red, green and blue values as
fractions ranging from 0 to 1.

*.  non-grey RGB values for nodes are now returned in JSON string response
to Get_Graph http call

*.  RGB values for nodes and edges are now written in JSON output as
[r,g,b] rather than [r g b].

*.  Added RegionPolyLinesGroup, KeyHandler and PickHandler members to
Decorations class.

*.  Renamed RegionsPolyLinesKeyHandler as RegionPolyLineKeyHandler.

*.  Add ROIPickHandler_ptr member to LadarServer class along with set
method.

*.  Can start to enter ROIs within LADAR tool.

============================================================================
ROBOT code changes made on Thurs, April 7, 2011 & Fri, April 8, 2011:

*.  graphdbfunc::get_graph_ID_given_level() takes in the graph_hierarchy
and level some entry in the graphs table of the TOC database.  It finds and
returns the corresponding graph ID.

*.  graphdbfunc::get_zeroth_node_given_level() takes in the graph_hierarchy
and level for some entry in the graphs table of the TOC database.  It finds
and returns the ID for the "zeroth" node corresponding to the input graph
level.

*.  IMAGE thick client is starting to correctly respond to parent/child
graph manipulation commands.

============================================================================
ROBOT code changes made on Mon, April 4, 2011:

*.  Added build_anti___ scripts to repository

============================================================================
ROBOT code changes made on Sun, April 3, 2011:

*.  Moved ALIRT_TILES_IN_BBOX out of mains/tech_challenge and into
mains/mapping

============================================================================
ROBOT code changes made on Fri, April 1, 2011:

*.  Added hmi_select_value member var to Custom3DManipulator class along
with set/get methods.

*.  When red forward translation arrows are greyed out, pressing button 1
[2] on Wiimote in program WAGONWHEELS zooms the viewer inwards [outwards].

============================================================================
ROBOT code changes made on Thurs, Mar 31, 2011:

*.  Added pre-picked cyber SignPosts into indoor hallway G-streets HMI
demo.

*.  Created ins/wiimote class to handle button clicks from WiiMote.

*.  ArmySymbol::get_image_filename_corresponding_to_symbol_type() returns
the name of a hardwired ArmySymbol image based upon the current value of
symbol_type:

*.  Added yellow, cyan and grey arrows to OSG-Data/army_symbols/ subdir.

*.  Added osg::ref_ptr<osg::Group> group_refptr member to Box class along
with get_group_ptr() method.

*.  Added STL map *Stateset_map_ptr member to Rectangle class.  Map keeps
track of osg::StateSet objects instantiated within
Rectangle::generate_texture_and_stateset().

============================================================================
ROBOT code changes made on Weds, Mar 30, 2011:

*.  Hierarchy ID, graph level and node ID can now be input via IMAGE
webpage and returned by PhotoServer.

*.  ISDS demos and standard pgms almost work OK as of Weds, Mar 30, 2011 at
10:30 am on ROBOT laptop (pfiles3_30e.tgz).  Road names no longer appear in
Bluegrass demo.  And ROI raytracing for CA/AZ has definite bug!  

============================================================================
ROBOT code changes made on Tues, Mar 29, 2011:

*.  graphdbfunc::retrieve_level_for_particular_graph() takes in the ID for
some entry in the graphs table of the TOC database.  It finds and returns
the level within graph_hierarchy to which the specified graph belongs.

*.  graphdbfunc::retrieve_all_graph_levels_for_particular_hierarchy() takes
in the ID for some particular graph hierarchy.  It returns an STL vector
containing pairs of graph IDs vs levels.

============================================================================
ROBOT code changes made on Mon, Mar 28, 2011:

*.  graphdbfunc::retrieve_graph_hierarchy_for_particular_datum() takes in
the datum ID for some entry in the nodes table of the TOC database.  It
finds and returns the IDs for the graph_hierarchy and node to which the
input datum belongs.

*.  graphdbfunc::retrieve_sibling_data_IDs_from_database() takes in the ID
for some particular datum. It first recovers the graph hierarchy and node
IDs corresponding to the input datum.  This method next fetches sibling
node IDs.  Finally, it converts the sibling node IDs into sibling data IDs.

*.  PhotoServer::get_sibling_thumbnails() takes in a database ID for some
photo within the photos table of the TOC database.  It retrieves the
database IDs, URLs and thumbnail URLs for all siblings of the input photo.
This method returns a JSON string containing an array of sibling metadata
for the input photo.

============================================================================
ROBOT code changes made on Sun, Mar 27, 2011:

*.  stringfunc::get_reduced_URL() strips off any http://IP:portnumber
prefix within the input URL.  It returns the reduced URL without this
prefix.

============================================================================
ROBOT code changes made on Weds, Mar 23, 2011:

*.  Program mains/hmi/wagonwheels is starting to respond to XSENS azimuthal
spins.  

*.  Added hmi_select_flag member to Custom3DManipulator class along with
set/get methods.

============================================================================
ROBOT code changes made on Tuesday, Mar 22, 2011 & early Weds, Mar 23,
2011:

*.  XSENS can now auto-detect rapid lateral acceleration.

============================================================================
ROBOT code changes made on Monday, Mar 21, 2011, Tuesday, Mar 22, 2011 &
early Weds, Mar 23, 2011:

*.  Modified JSON output from
PhotoServer::generate_all_graph_hierarchy_IDs_JSON_response() to conform
with Michael Yee's latest recommendation.

*.  photodbfunc::retrieve_SIFT_matches_from_database() takes in the IDs for
two images within the photos table of the TOC database.  If photo_ID1 >
photo_ID2, the IDs are swapped.  The method then returns all SIFT tiepoint
pairs for the two photos within output STL vector feature_matches.

*.  Added README.quicksynergy to repository.

*.  PhotoServer::get_SIFT_matches() takes in the IDs for two images within
the photos table of the TOC database.  It returns a JSON string listing
SIFT tiepoint pairs for the pair of input images.
 
============================================================================
ROBOT code changes made on Sunday, Mar 20, 2011:

*.  Added mouse_input_device_flag member to Custom3DManipulator class along
with set/get methods.

*.  ISDS demos and standard pgms almost work OK as of Sun, Mar 20, 2011 at
8.56 am on ROBOT laptop (pfiles3_20a.tgz).  Road names no longer appear in
Bluegrass demo, & UAV flight path picking is messed up.  And ROI raytracing
for CA/AZ has definite bug!  After removing 3D signposts from VIDEO,
run_lobby_video no longer works.  But this last change is acceptable.

*.  Added disable_input_flag member to GraphicalPickHandler class along
with set/get methods.  Set disable flag to true for ROIPolyLinePickHandler
in OSGButtonServer methods which handle UAV path planning.  UAV flight path
planning portion of Bluegrass demo works again.

*.  graphdbfunc::retrieve_hierarchy_IDs_from_database() now returns
hierarchy descriptions as well as integer IDs.

*.  LADAR viewer can now export and import SignPosts.

*.  graphdbfunc::retrieve_sibling_node_IDs_from_database() takes in node 
*node_ptr.  It issues a SQL call to *gis_database_ptr for all nodes with
the same parent ID.  This method returns an STL vector containing the IDs
of all nodes with the same parent.

*.  PhotoServer::get_thumbnails_for_carousel() now calls
graphdbfunc::retrieve_sibling_node_IDs_from_database() rather than
hardwiring bogus sibling node ID values.

============================================================================
ROBOT code changes made on Fri, Mar 18, 2011:

*.  Created new src/ins subdirectory.

============================================================================
ROBOT code changes made on Thurs, Mar 17, 2011:

*.  Created sift_feature and sift_featuresgroup classes in src/video to
hold metadata extracted by Noah's bundler codes.

......................

*.  Created mains/hmi

*.  photodbfunc::generate_insert_sift_feature_SQL_command() takes in
*sift_feature_ptr containing metadata for a single SIFT feature.  It
generates and returns a SQL insert command string needed to populate a row
in the sift_features table of the TOC database.

*.  photodbfunc::generate_insert_sift_match_command() takes in IDs for two
matching SIFT features within two separate photos.  It generates and
returns a SQL insert command string needed to populate a row in the
sift_matches table of the TOC database.

*.  mains/photosynth/SIFT_PARSER reads in sift keyfiles generated by Noah
Snavely's BUNDLER processing pipeline.  It first instantiates and fills
sift_feature objects with metadata for each individual sift feature.  It
next extracts sift matches from BUNDLER output.  SIFT_PARSER generates
insert_features.sql and insert_matches.sql files which populate the
sift_features and sift_matches tables in the TOC database.  It also outputs
an edge list for the sift graph.

============================================================================
ROBOT code changes made on Mon, Mar 14, 2011:

*.  PhotoServer now returns list of possible graph hierarchy IDs in
response to a Get_Graph_Hierarchy call with no ID supplied.

============================================================================
ROBOT code changes made on Mon, Mar 7, 2011 & early Tues, Mar 8, 2011:

*.  videofunc::generate_blank_imagefile() instantiates a PNG image
containing a grey background for a virtual camera.

*.  Custom3DManipulator::get_curr_az_el_roll() returns the virtual camera's
azimuth, elevation and roll angles in radians.  Recall az=0 points in the
+xhat direction, el=0 points towards the horizon, and el=-90 points in the
-z_hat direction.

*.  In mains/rasr/VIEWPANOS, hardwire horizontal and vertical
fields-of-view for "1st person" window which are appropriate for Auditorium
data set #2 collected by Lady Bug in Feb 2011.

============================================================================
ROBOT code changes made on Sat, Mar 5, 2011, Sun, Mar 6, 2011 & early Mon,
Mar 7, 2011:

*.  OBSFRUSTAGROUP:: compute_virtual_OBSFRUSTA_for_circular_staring_orbit()
takes in some ground target position (in UTM geocoordinates) along with the
height above ground for a virtual camera.  It forms a circular orbit above
the ground target's location and aims the virtual camera towards the ground
target at each point in the orbit.  Reprojected images from the virtual
camera as it moves along the orbit are written to output PNG files.

*.  ISDS demos and standard pgms almost work OK as of Sun, Mar 6, 2011 at
9:21 pm on ROBOT laptop (pfiles3_6h.tgz).  Road names no longer appear in
Bluegrass demo, & UAV flight path picking is messed up.  And ROI raytracing
for CA/AZ has definite bug!  After removing 3D signposts from VIDEO,
run_lobby_video no longer works.  But this last change is acceptable.

============================================================================
ROBOT code changes made on Thurs, Mar 3, 2011 & Fri, Mar 4, 2011:

*.  Split sift_detector::compute_ray_feature_homography() into 2 separate
methods.  It also no longer takes in an input homography pointer.  Instead,
this method utilizes sift_detector class member H_ptr.

*.  OBSFRUSTAGROUP::reproject_physical_image_into_virtual_OBSFRUSTUM()
warps input the imageplane contents for *physical_OBSFRUSTUM_ptr onto the
imageplane for *virtual_OBSFRUSTUM_ptr.  It uses a joint homography to warp
the former onto the latter via a ground Z-plane.  The warped image is
written to an output PNG file, and an associated package file for the
virtual OBSFRUSTUM is also output.

*.  PhotoTour::specify_tour_OBSFRUSTUM_IDs() fills member STL
vector ordered_OBSFRUSTUM_IDs with the integer IDs within input
OBSFRUSTUM_IDs.

*.  mains/aerosynth/TOURCITIES is a variant of program TESTCITIES wherein
virtual 3D tours passing through virtual and real OBSFRUSTA can be
conducted.

*.  mains/sift/IMAGEPOSN reads in 2D & 3D features manually extracted from
photo or video frame which is to be geoaligned with a ladar map.  It also
needs some initial guess for the camera's world position.  Looping over the
X, Y and Z UTM coordinates for the camera's position, IMAGEPOSN determines
world-ray direction vectors to the 3D features.  It computes a homography
which projects ray direction vectors into the UV image plane.  An RMS
residual between projected rays and corresponding 2D feature tiepoints is
minimized as a function of the camera's position.


============================================================================
ROBOT code changes made on Weds, Mar 2, 2011:

*.  mains/aerosynth/VIRTUALBUNDLER is a variant of VIEWBUNDLER where we
experiment with reprojecting light hawk imagery into virtual OBSFRUSTA
image planes.

*.  OBSFRUSTAGROUP::update_virtual_OBSFRUSTUM() repositions and reorients
input *virtual_OBSFRUSTUM_ptr.  It also finds the physical OBSFRUSTUM whose
pointing direction is closest to that of the updated virtual OBSFRUSTUM.
The physical image is backprojected onto a ground Z-plane and reprojected
into the virtual OBSFRUSTUM.

*.
OBSFRUSTAGROUP::physical_OBSFRUSTUM_pointing_closest_to_virtual_OBSFRUSTUM()
assumes that the current OBSFRUSTAGROUP is filled with frusta corresponding
to physical cameras plus one final frustum which is virtual.  Looping over
all physical cameras, it finds the one whose pointing direction vector is
closest to the virtual camera's.  This method returns a pointer to the
physical OBSFRUSTUM whose pointing most closely matches that of
*virtual_OBSFRUSTUM_ptr.

*.  Overloaded version of OBSFRUSTUM::build_OBSFRUSTUM() takes in camera
position and az, el and roll angles defined in world geocoordinates.  It
updates the position and orientation of the OBSFRUSTUM along with its Movie
and camera objects.

============================================================================
ROBOT code changes made on Mon, Feb 28, 2011; Tues, Mar 1, 2011 & early
Weds, Mar 2, 2011:

*.  Added ndims member to CustomManipulator class along with set/get
methods.

*.  Generalized MyViewerEventHandler & CustomAnimationPathManipulator
classes so that movie making within VIDEO/VPLAYER programs with CM_2D_ptr
works similarly to VIEWPOINTS with CM_3D_ptr.

*. Commented out camera::UVcorner_projections_on_zplane() which is
redundant with camera::corner_ray_intercepts_with_zplane().  Fixed bug in 
corner_ray_intercepts_with_zplane().

*.  Added homography H_ptr member to camera class along with get method.

*.  camera::homography_from_imageplane_to_zplane() fills *H_ptr with the
homography that maps the current camera's UV image corners to corresponding
XY points within the Z-plane defined by input parameter world_z.

*.  photogroup::generate_blank_photograph() instantiates a blank image for
a virtual camera.

*.  OBSFRUSTAGROUP::generate_virtual_image_frustum() takes in photograph
*photograph_ptr which is assumed to be have previously been filled with
valid extrinsic & intrinsic camera parameters.  It instantiates and returns
an OBSFRUSTUM which may correspond to a blank photo.

*.  Accidentally moved nearly all of photosynth subdir's contents into
aerosynth.  We tried to manually undo this bad mistake around 5:50 am on
Weds, Mar 2.  pfiles_3_2b.tgz contains manually reassembled versions of
photosynth and aerosynth subdirs.

*.   Added homography::project_image_plane_to_world_plane(
double u,double v,double& x,double& y);

============================================================================
ROBOT code changes made on Fri, Feb 25, 2011; Sat, Feb 26, 2011; Sun, Feb
27, 2011; early Mon, Feb 28, 2011:

*.  FeaturesGroup::compute_pass_compositing_order() now purges any
previous contents within STL vector photogroup_ptr->get_photo_order().

*.  linesegment::twoD_distance_to_point() takes in a 2D point (U,V).  It
returns the 2D distance between the input point and an infinite 2D line
specified by a * X + b * Y + c = 0.

*.  camera::check_projection_matrix_for_tielines() takes in genmatrix
*XYZABC_ptr which is assumed to contain correlated XYZ points lying along 3D
world lines and abc coefficients for their associated image plane line
projections.  It first projects each XYZ point into the current camera's
image plane defined by its extrinsic and intrisic parameters.  This method
then computes and sums the squared 2D distances between the projected world
points and the infinite 2D lines.  It sorts the world lines according to
their individual d_chisq values and prints out an RMS residual between the
3D and 2D tielines.

*.  G99VideoDisplay::get_aspect_ratio() returns Nu/Nv.

*.  mains/aerosynth/RECOLOR_TDP is a little specialized utility which we
wrote in order to brighten the reconstructed point cloud from imagery
gathered over Texas Tech by Lighthawk camera #2.  It uses histogram
specification in order to brighten the black & white point cloud's
intensity distribution.

*.  Eliminated dependence of PolyLinesGroup upon MoviesGroup class.  Moved
aerial_video_frame_flag bool member var out of PolyLinesGroup into
MoviesGroup.  

*.  Generalized OBSFRUSTUM::project_curr_track_points() by passing in
groundplane_pi rather than having this parameter fourvector hardwired to
its NYC value within this method.

*.  Added groundplane_pi member fourvector to OBSFRUSTAGROUP class along
with set method.

*.  Eliminated tracks_ptr STL vector member of Movie class in favor of STL
map tracks_map_ptr.

*.  ISDS demos and standard pgms almost work OK as of Mon, Feb 28, 2011 at
6 am on ROBOT laptop (pfiles2_18a.tgz).  Road names no longer appear in
Bluegrass demo, & UAV flight path picking is messed up.  And ROI raytracing
for CA/AZ has definite bug!  After removing 3D signposts from VIDEO,
run_lobby_video no longer works.  But this last change is acceptable.

============================================================================
ROBOT code changes made on Thurs, Feb 24, 2011:

*.  Created PanoramaPickHandler class.

*.  PanoramasGroup::move_from_curr_to_next_panorama() first resets panels
within the previous panorama (i.e. one visited before start
panorama=selected_panorama) to thumbnail photos.  It then issues a
fly_to_next_panorama() call with a final virtual camera heading set by
input direction vector p_hat.  Member vars start_panorama_ID and
stop_panorama_ID are updated, and the coloring for their corresponding
panoramas are reset.

...................

*.  PanoramasGroup::recenter_virtual_camera_over_wagonwheel() translates and
rotates the virtual "global" camera so that it's located directly
above the selected Panorama position while keeping its altitude unchanged.

*.  Virtual global camera now automatically tracks selected wagon wheel
position while keeping its altitude unchanged in VIEWPANOS.

*.  Forward translation arrows are now labeled with ID of following
panorama.

*.  mains/tech_challenge/ALIRT_TILES_IN_BBOX has hardwired easting,northing
UTM coordinates for lower-left and upper-right corners of a bounding box.
It generates an STL vector of filenames corresponding to ALIRT tiles (in
Ross' base-32 naming convention) which lie inside the bbox.
ALIRT_TILES_IN_BBOX writes out an executable script which copies the ALIRT
tiles into a specified subdirectory.

============================================================================
ROBOT code changes made on Tues, Feb 22, 2011 & Weds, Feb 23, 2011:

*.  VIEWPANOS is working reasonably well with 2nd auditorium wagon wheels
data collection from Fri, Feb 18.

============================================================================
ROBOT code changes made on Sat, Feb 19, 2011, Sun, Feb 20, 2011 and Mon,
Feb 21, 2011:

*.  Program DOWNSIZE_IMAGES reads in a set of jpg files from the jpg_subdir
specified in this main program.  It creates a downsampled/ subdirectory
within jpg_subdir.  DOWNSIZE_IMAGES then runs the ImageMagick convert
-resize 2400x2400 command on all input jpg files.  The downsized images
have the same size as those output by BUNDLER.

*.  Added projects/config/Makefile_VMware to repository.  This stripped
down version of Makefile_projects is intended to run on Virtual Machines.

*.  mains/rasr/THUMBNAILS reads in a set of panorama panel images and
generates subsampled versions of them.

*.  PanoramasGroup::load_hires[thumbnail]_panels() loops over all OBSFRUSTA
within the panorama specified by input panorama_ID.  It resets their images
to high resolution [thumbnail] versions.

*.  VIEWPANOS now stores only 2 panoramas' worth of high resolution photos
in memory at any time.  All other wagon wheels display thumbnail versions.

============================================================================
ROBOT code changes made early on Fri, Feb 18, 2011:

*.  PanoramasGroup::Delaunay_triangulate_pano_centers() first computes the
center locations for all panoramas within the ladar floorplan's texture
image's UV coordinate system.  It then calculates a Delaunay triangulation
of all panorama centers.  Looping over all triangle edges, this method
discards any which pass over black or grey regions of the texture image
which are physically non-traversible.  It also discards any Delaunay
triangle side whose opening angle with some other triangle edge is small
and whose edge is longer.  The surviving links within the triangulated
panoramas network are then drawn so that they can be visualized in an OSG
viewer.

============================================================================
ROBOT code changes made early on Thurs, Feb 17, 2011:

*.  Renamed fx0,fy0,fx1,fy1 --> fx_curr,fy_curr,fx_prev,fy_prev in
Custom3DManipulator and TerrainManipulator classes.

*.  ISDS demos and standard pgms almost work OK as of Thurs, Feb 17, 2011
at 7:43 am on ROBOT laptop (pfiles2_17c.tgz).  Didn't test Bluegrass demo
though.

................

*.  In texture_rectangle::import_photo_from_file(), we no longer hardwire
n_channels=3.  Instead, we set m_Nchannels based upon
image_refptr->getPixelSizeInBits().

*.  Reduced size of forward translation Army Symbols in
PanoramasGroup::add_forward_translation_arrows()

*.  Delaunay triangulation of pano center network which does not pass
through ladar floorplan walls is now implemented for program VIEWPANOS.

============================================================================
ROBOT code changes made on Weds, Feb 16, 2011:

*.  Added hex_color string member to node and graph_edge classes along with
set/get methods.

*.  Added directed_flag bool member to graph_edge class along with set/get
methods and default false value.

*.  Added label string member to graph_hierarchy class along with set/get
methods.

*.  Privatized graph::add_graph_edge(graph_edge* graph_edge_ptr)

*.  PhotoServer can now respond to Graph Hierarchy and Graph requests
coming from thin clients.  

============================================================================
ROBOT code changes made on Mon, Feb 14, 2011 & Tues, Feb 15, 2011:

*.  Starting to write code to reconstruct graph hierarchies and graphs from TOC
database.  

*.  Added final LOST report to repository.

============================================================================
ROBOT code changes made early on Mon, Feb 14, 2011:

*.  ISDS demos and standard pgms almost work OK as of Mon, Feb 14, 2011 at
7:06 am on ROBOT laptop (pfiles2_14a.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  And ROI raytracing for CA/AZ has definite bug!
After removing 3D signposts from VIDEO, run_lobby_video no longer works.
But this last change is acceptable.

============================================================================
ROBOT code changes made on Thurs, Feb 10, 2011 & Fri, Feb 11, 2011:

*.  Starting to incorporate robo ladar scan of auditorium interior into
VIEWPANOS.

*.  In OBSFRUSTAGROUP::initialize_new_OBSFRUSTUM(), we followed Ross
Anderson's advice to interpose an osg Switch between
OBSFRUSTUM_ptr->get_PAT_ptr() and Movie_ptr->get_PAT_ptr().  The
OBSFRUSTUM's movie can then be easily erased or unerased by calling the
switch methods setAllLChildrenOn() and setAllChildrenOff():

*.  OBSFRUSTAGROUP::set_Movie_visibility_flag() globally erases or unerases
all OBSFRUSTA movies.

============================================================================
ROBOT code changes made on Weds, Feb 9, 2011 & early Thurs, Feb 10, 2011:

*. Added oldX,oldY float args to rotate() member functions in PickHandler
and GraphicalPickHandler classes.

*.  Can now translate, rotate and scale 2D PolyLine in VIDEO thin client.

*.  mains/rasr/ROBOTRACK reads in robot position information (specified in
some 3D world coordinate system).  It translates and rescales the robot
positions so that they reasonably fit within our canonical image plane
coordinates 0 < U < Umax and 0 < V < 1.

*.  VIEWPANOS can now display manually aligned 2D ladar floorplan in 3rd
person overhead view window for auditorium panos wagonwheels.

*.  Moved member functions set_colors() and update_colors() out of
SignPostsGroup into GeometricalsGroup.

*.  PanoramasGroup::recolor_start_stop_panoramas() resets the permanent
color for the starting panorama to the truly permanent panorama color
specified in GeometricalsGroup::permanent_colorfunc_color.  It also
temporarily resets the permanent color for the stopping panorama to the
selected panorama color specified in
GeometricalsGroup::selected_colorfunc_color.  We wrote this method in Feb
2011 in order to provide a clear indication to the user of which
wagon-wheel is currently selected in the overhead display window for RASR
"Google Streets" demos.

*.  Inserted updated values for sailplane flight #3 georegistration
parameters into generate_peter_inputs.cc.  Geo-alignment between
EARTHBUNDLER flashlight backprojected sailplane imagery and satellite
imagery is acceptable but not fantastic.

============================================================================
ROBOT code changes made on Tues, Feb 8, 2011 & early Weds, Feb 9, 2011:

*.  Added mains/afghanistan/Qt/final_report to repository

*.  Updated PANGEN and VIEWPANOS to start working with new auditorium
panoramas.

*.  Starting to get quasi-recognizable tour for auditorium wagon wheels.

*.  MovieServer::move_image_polyline() regenerates a 2D PolyLine where each
vertex is translated by the difference between the PolyLine's current
position and its zeroth vertex position.

*.  Added start/stop zoom and rotate buttons to PolyLines tab in VIDEO thin client.

*.  Overloaded rotate() and scale() member functions in PolyLinePickHandler
class.

*.  In polyline class, added compute_vertices_COM() member function.

*.  Can start to rescale 2D PolyLines in VIDEO thin client.

============================================================================
ROBOT code changes made on Mon, Feb 7, 2011:

*.  Generalized mains/bluegrass/AVS/QTCITIES to optionally display roads
around Texas Tech stadium.

*.  Added PolyLinesGroup_3D_ptr and imageplane_PolyLinesGroup_ptr members
to PolyLinesGroup class along with set/get methods.

*.  Can start to project road network around Texas Tech into Lighthawk
video image planes.

============================================================================
ROBOT code changes made on Fri, Feb 4, 2011; Sat, Feb 5, 2011; Sun, Feb 6,
2011 & early Mon, Feb 7, 2011:

*.  ladarfunc::AlirtTileLabelToLonLat() takes in an ALIRT tile label whose
form is specified in Ross Anderson's "ALIRT Product Grid Specification"
document dated March 2009.  It extracts longitude and latitude
geocoordinates for tile's anchor point from the input hyphenated tile label.

*.  ladarfunc::LonLatToAlirtTileLabel() takes in lon,lat geocoordinates for
an ALIRT tile's anchor point.  It returns the corresponding tile label
specified in Ross Anderson's "ALIRT Product Grid Specification" dated March
2009.

*.  ladarfunc::AlirtTilesInBbox() takes in the lower left and upper right
geocoordinates for some bounding box on the earth.  It computes and the
labels for all ALIRT tiles which cover the input bbox.  The labels are
returned as an STL vector of strings.

*.  Renamed mains/tech_challenge/halfwheel.cc as panovsladar.cc.  Renamed
orig_halfwheel.cc as halfwheel.cc.

*.  Added instantiate_OBSFRUSTAGROUP_flag member to MODELSGROUP with
default true value along with set method.

*.  In LOSMODELSGROUP::update_display(), eliminated unnecessary
OBSFRUSTA_ptrs STL vector.  Its info is contained within
MODEL_ptr->get_OBSFRUSTAGROUP_ptr().

*.  In class ColorGeodeVisitor, added p_magnification_factor member along
with set method and magnify_p() method.

*.  In OBSFRUSTUM::trace_individual_ray(), now ensure coarse raytracing
endpoint does not exceed nsteps-1.  Visibility map for D7 mounted near
flight facility in HAFB minimap now looks reasonable.

*. In TilesGroup::load_ladar_height_data_into_ztwoDarray(), we assume that
any input ladar map is sufficiently small that it can be fully loaded into
DTED_ztwoDarray_ptr just once.

*.  OBSFRUSTUM::compute_occlusion_frac_vs_maxrange() is a special utility
which we wrote to quantify terrain occlusion as a function of maximum range
for the D7 video camera mounted on a mast nearby the flight facility in
July 2010 viewing the ALIRT HAFB minimap.  It takes in
*(get_DTED_ptwoDarray_ptr()) which we assume has already been filled via
raytrace_occluded_ground_region().  This method computes the ratio of
n_visible_groundcells/n_groundcells for a variety of different maximum
ranges from the D7 camera's location.

*.  mains/tech_challenge/PANORAYTRACE is a variant of PANOVSLADAR which
performs line-of-sight raytracing for the D7 panoramic video camera hoisted
aloft a mast outside the flight facility in July 2010.  The D7's camera
parameters were determined via program GEOREGPANO.  An empty MODEL holding
the OBSFRUSTAGROUP for the D7's 5 cameras is instantiated.  A single geotif
holding ALIRT HAFB minimap heights in the vicinity of the flight facility
is also imported.  After performing LOST-like raytracing, terrain regions
in the HAFB minimap which are visible [occluded] to the D7 are shaded in
green [red].  Terrain locations lying outside the D7's field-of-view are
shaded grey.

*.  ISDS demos and standard pgms almost work OK as of Mon, Feb 7, 2011 at
7:43 am on ROBOT laptop (pfiles2_7b.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  And ROI raytracing for CA/AZ has definite bug!
After removing 3D signposts from VIDEO, run_lobby_video no longer works.
But this last change is acceptable.

============================================================================
ROBOT code changes made on Weds, Feb 2, 2011 & early Thurs, Feb 3, 2011:

*.  Permanently eliminated deprecated singular_value_decomposition() method
in genmatrix class based upon buggy Numerical Recipes code.  

*.  Permanently eliminated deprecated camerafuncs namespace in src/image.

*.  Extensively overhauled fundamental and sift_detector classes.

*.  Reworked program TIEPOINTS so that it now yields a few dozen,
reasonably accurate SIFT pairs for multiple input photo types.

*.  Moved SAILPLANEBUNDLER out of photosynth into aerosynth subdir.  Added
to repository.

============================================================================
ROBOT code changes made on Mon, Jan 31, 2011 & Tues, Feb 1, 2011:

*.  Overhauled and extended src/structmotion/fundamental class.

*.  Added mains/afghanistan/KenLee/CETutorial.tex to repository.

*.  Circumvented mdim >= ndim constraint in
genmatrix::sorted_singular_value_decomposition().  Take transpose of input
matrix and return its SVD if mdim < ndim.

============================================================================
ROBOT code changes made on Sat, Jan 29, 2011, Sun, Jan 30, 2011 & early
Mon, Jan 31, 2011:

*.  Program INTERP_FRAMES reads in reconstructed camera parameters for some
set of video frames.  Using spline interpolation, it it estimates camera
parameters for all video frames which were not reconstructed by bundler.
Spline interpolation reproduces the same camera parameters for actual
reconstructed photos.  INTERP_FRAMES writes out a new set of package files
for all video frames.

*.  In MoviesGroup::reset_photo(), return if input
ID==photogroup_ptr->get_selected_photo_ID().

*.  SignPostsGroup::project_SignPosts_into_selected_aerial_video_frame()
generates a 2D imageplane SignPost if it doesn't already exists as a
counterpart for any 3D SignPost within *this.  It then loops over every 3D
SignPost and projects it into the 2D imageplane for the selected aerial
video frame.  If the UV coords for the projected SignPost's tip lies inside
the movie's allowed UV range, this method sets the imageplane SignPosts's
UV coordinates so that it appears within the movie's viewport.  Otherwise,
the imageplane SignPost is masked.

*.  mains/aerosynth/AEROPROP is a variant of mains/photosynth/PROPAGATOR.
It pops open a 3D window displaying a point cloud (ladar and/or bundler
reconstructed) and georegistered aerial video frames' OBSFRUSTA.  It also
opens a 2D window in which the video frame for the most recently selected
OBSFRUSTUM is displayed.

*.  Added PointFinder_ptr member to AnnotatorsGroup along with set method.

*.  Added SignPostsGroup_3D_ptr to SignPostsGroup class along with set
method.

*.  Eliminated FeaturesGroup::blink_Feature() in favor of
GeometricalsGroup::blink_Geometrical().

*.  Cleaned up SignPostPickHandler class and enabled instantiating/dragging
of 2D SignPosts.

*.  Set default common geometrical size for 2D [3D] signPosts to 0.004 [1]
in SignPostsGroup::initialize_member_objects().

*.  In order to run OK_gstreets demo on netbook with reasonable smooth
transition between wagon wheels, we need to alter some timings:

In PanoramasGroup::fly_to_next_panorama(), n_anim_steps = 10 --> 30
In PanoramasGroup::fade_panoramas(), d_alpha=-0.002 --> -0.025
In Terrain_Manipulator::generate_animation_path(), min t_flight=2 --> 3
	max t_flight=6 --> 9.

*.  ISDS demos and standard pgms almost work OK as of Sun, Jan 30, 2011 at
3:36 pm on ROBOT laptop (pfiles1_30d.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  And ROI raytracing for CA/AZ has definite bug!
After removing 3D signposts from VIDEO, run_lobby_video no longer works.
But this last change is acceptable.

*.  Moved generate_insert_photo_SQL_command() out of photogroup class into
photodbfunc namespace.

*.  Created new src/graphs/graphdbfunc namespace.

*.  Updated mains/photosynth/generate_photo_hierarchy to produce SQL
scripts which populate nodes, links and graphs tables in TOC database.

============================================================================
ROBOT code changes made on Fri, Jan 28, 2011:

*.  Program WARP_PMVS computes a relatively fine transformation needed to
map 3D feature tiepoints manually extracted from ladar and PMVS point
clouds in order to map the latter onto the former.  After reading in
corresponding sets of 3D features from text files, WARP_PMVS computes a
translation, rotation and scaling.  It then applies this combined
transformation to both the PMVS points output by mains/aerosynth/PLY2TDP.
It also transforms the reconstructed cameras' world positions and pointing
directions.  WARP_PMVS outputs a (hopefully improved) PMVS point cloud in
ladar_pmvs.tdp, and it overwrites reconstructed camera package files with
new ones which should (hopefully) align with ladar truth data.

============================================================================
ROBOT code changes made early on Thurs, Jan 27, 2011:

*.  In mathfunc::decompose_orthogonal_matrix(), we again ensure we never
try to take acos(x) where fabs(x) > 1 !

============================================================================
ROBOT code changes made early on Weds, Jan 26, 2011:

*.  Add radio button selector in LADAR thin client to specify length or ID
label type for PolyLines in thick client.

*.  PolyLinesGroup::reset_labels() loops over all PolyLines.  It
regenerates either their ID or length labels based upon
get_ID_labels_flag().

*.  Moved screen capture methods capture_viewer_screen() and
generate_AVI_movie() out of MovieServer into BasicServer.  Movie capture in
LADAR thin client seems to work.

============================================================================
ROBOT code changes made on Tues, Jan 25, 2011:

*.  mains/photosynth/FLIR_SELECT is a special utility which reads
irregularly named files from Orange disk #3 corresponding to image frames
from the Dec 2009 flight facility FLIR pass.  It generates a list.txt file
containing reasonable input estimates for the focal parameter f*Npx.
FLIR_SELECT also generates an executable script which copies the selected
image files into an ./images subdirectory for uploading to TXX.

.............

*.  Created new mains/aerialsynth subdir.  Moved FLIR_select,
generate_list, gpsregister and lh_metadata into this new subdir.

*.  Deleted mains/aerialsynth in favor of mains/aerosynth

.............

*.  mains/aerosynth/FLIR_METADATA reads in aircraft metadata generated by
Ross Anderson's program running in conjunction with the FLIR camera.  It
reformats the metadata so that it matches sailplane metadata read in by
GPSREGISTER.

*.  Bundler sometimes incorrectly colors reconstructed points as pure blue.
Until Noah explains why this occurs in bundler, we reset such pure blue
points to a mid-grey color in programs BUNDLER_CONVERT and MINI_CONVERT.

============================================================================
ROBOT code changes made on Mon, Jan 24, 2011:

*.  Can now insert simulated frustum into 3D point cloud via LADAR thin
client.

*.  mathfunc::encode_base32() takes in nonnegative integer i in base 10.
It returns a string which does not contain I,L,O or U letters that
represents the integer in base 32.  

*.  mathfunc::decode_base32() takes in string s which is assumed to contain
some nonnegative integer in base32 representation.  It returns the
integer's value in conventional base 10 format.

============================================================================
ROBOT code changes made on Sun, Jan 23, 2011 & early Mon, Jan 24, 2011:

*.  In MovieServer::correlate_frame_numbers_and_world_times(), do not
attempt to read photo metadata from TOC database if mission or sensor have
not yet been selected!
   
*.  mains/utility/JUSTCROP_IMAGES utilizes ImageMagick's conversion program
to crop PNG, JPEG, RGB, etc images down to specified, uniform widths and
heights measured in pixels.  This variant of CROP_IMAGES performs cropping
to all JPG/PNG files within a specified subdirectory independent of their
individual file names.

*.  photogroup::generate_single_photograph() takes in the filename for some
photo along with its pixel dimensions xdim & ydim.  It also takes in
calibrated camera parameters including az, el, roll measured in degrees.
This method instantiates a photograph with the specified input parameters
and returns its pointer.

*.  mains/tech_challenge/VCAMERA is a testing grounds for inserting an
OBSFRUSTUM into a 3D scene where the camera's parameters are specified by
user input (rather than from BUNDLER reconstruction or ladar data
calibration).

*.  Created new src/video/camerafuncs namespace which contains methods that
convert between FOV_u,v and f,aspect_ratio.

*.  In camera class, eliminated incorrect member functions
square_pixel_FOV() and compute_focal_param_from_horizontal_FOV().

*.  ISDS demos and standard pgms almost work OK as of Sun, Jan 23, 2011 at
9:48 p on ROBOT laptop (pfiles1_23j.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  And ROI raytracing for CA/AZ has definite bug!

*.  Starting to enable simulated camera to be entered via thin client into
3D maps.

============================================================================
ROBOT code changes made on Sat, Jan 22, 2011:

*.  In program HALFWHEEL, added local_spin_daz=0 argument to call to
OBSFRUSTAGROUP::generate_still_imagery_frust_for_photogroup().  D7 video
alignment to HAFB minimap works again.

*.  VPLAYER can now display images whose filenames don't necessarily have
. or - in them.  File numbering is assumed to start at zero however.

============================================================================
ROBOT code changes made on Fri, Jan 21, 2011:

*.  Program BUNDLER_POSNS reads in the contents of bundle.out as well as
photo filenames.  It converts from Noah's raw coordinate system to our
world coordinates where Z correlates with height relative to local ground.
BUNDLER_POSNS writes out text file "bundler_camera_posns.dat" containing
the reconstructed camera positions in world coordiantes which can be read
into program GPSREGISTER.

============================================================================
ROBOT code changes made on Thurs, Jan 20, 2011 & early  Fri, Jan 21, 2011:

*.  Significantly overhauled Panorama and PanoramasGroup classes.
Wagonwheels can now be labeled by their IDs.

*.  In OBSFRUSTAGROUP::generate_still_image_frustum_for_photograph(), added
local_spin_daz input parameter which enables every wagon wheel to be spun
about their individual centers by some common angle.

============================================================================
ROBOT code changes made on Weds, Jan 19, 2011 & early, Thurs, Jan 20, 2011:

*.  Changed port on URLs for photos and thumbnails from server's to 8080 in
URLs returned to Jennifer's PHOTO thin client.

..................

*.  mains/photosynth/GENERATELIST is a little utility which we wrote in
order to hard code an initial guess for a video camera's focal length
(measured in pixels) into a list.txt file read by Noah's Bundler codes.

*.  mains/rasr/GENERATE_PANELS reads in "bundler-style" image_list and
image_sizes files for set of 360 deg panorama mosaics.  It chops up each
input panorama into 10 individual panels which should be oriented 36
degrees apart in azimuth.  The individual panel images are written to a
panels subdirectory of the images directory holding all of the input
mosaics.  Each panel is labeled by the name of its parent panorama and a
"pn" descriptor where n ranges from 0 to 9.

*.  In WebServer::readSocket(), changed responseHeader content type from
text/xml to text/javascript for valid get and post replies.  Given that our
servers reply via JSON rather than XML, this modification seems reasonable.

============================================================================
ROBOT code changes made on Tues, Jan 18, 2011 & early, Weds, Jan 19, 2011:

*.  videofunc::photo_in_database() queries the photos table within
*gis_database_ptr for the existence of a row corresponding to input
photo_ID.  If no entry in the table matches photo_ID, this boolean method
returns false.
 
.....................

*.  We wrote WebServer::get_server_URL_prefix() in response to Jennifer
Drexler's request that the PhotoServer return full URLs for photos and
thumbnails which include the server's IP and port number.

*.  PhotoServer now responds to faulty thin client requests asked for by
Jennifer with reasonable error messages.

*.  Moved all photo annotation manipulation functions out of videofuncs
namespace into new photoannotationdbfuncs namespace.

*.  Moved all JSON file export, database metadata manipulation and TOC
specific methods out of videofuncs namespace into new photodbfuncs
namespace.

*.  texture_rectangle::generate_blank_image_file() takes in the horizontal
and vertical size in pixels, the name of the output blank filename and a
grey level (ranging from 0 to 1).  It uses the current texture rectangle to
output a PNG or JPG file to disk.  We wrote this little utility in Jan 2011
for virtual OBSFRUSTUM display within the LADAR thin client.

============================================================================
ROBOT code changes made on Sat, Jan 15, 2011; Sun, Jan 16, 2011; Mon, Jan
17, 2011; early Tues, Jan 18, 2011:

*.  PolyLine::generate_PolyLine_ID_label() adds a text label to the
PolyLine located at its center.  The ID text label is returned by this
method.

*.  Label 2D PolyLines in VIDEO tool by their IDs.

*.  Added ID_labels_flag member to PolyLinesGroup class with set method.

*.  linesegment::compute_2D_line_coeffs() calculates infinite 2D line
coefficients a,b,c in the equation a * X + b * Y + c = 0.  These
coefficients are needed for geometric camera calibration via tie-line
matching.

*.  Added vector<double> twoD_line_coeffs and first_edge_2D_line_coeffs
members to linesegment & polyline classes along with get methods.

*.  FusionGroup::retrieve_XYZABC_polyline_info() dynamically
generates and returns a genmatrix holding consolidated XYZ-ABC tieline
information.

*.  camera::parse_xyzabc_data() reads the contents of an input genmatrix
containing X, Y, Z, A, B and C columns.  It rearranges this information
into the bottom 2s x 12 submatrix of matrix A defined in our "Geometric
Camera Calibration via Tie-Line Matching" notes dated 12/29/10.  Here s
denotes the number of lines within the input file.

*.  Camera calibration via joint tiepoint and tieline matching seems to
work!

*.  Program HALFWHEEL now combines HAFB minimap with georegistered HAFB D7
video.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jan 17, 2011 at
9:55 am on ROBOT laptop (pfiles1_17b.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  And ROI raytracing for CA/AZ has definite bug!

*.  In mathfunc::decompose_orthogonal_matrix(), make sure we never try to
take acos(nz) where fabs(nz) > 1 !
            
*.  camera::rescale_focal_length() takes in an initial focal length
parameter fu_init along with initial azimuth, elevation and roll angles (in
radians).  It computes the new focal parameter corresponding to the
photograph being rescaled by input parameter scale_factor.  It also
stretches the photo's azimuth, elevation and rotation angles.  This method
resets the camera's focal and rotation parameters, and it recomputes the
camera's 3x4 projection matrix.

*.  Added f_init,az_init,el_init,roll_init member vars to camera class
along with save[restore]_initial_f_az_el_roll_params() methods.

*.  mains/tech_challenge/GEOREGPANO reads in package files for 5 D7
panoramic video panels containing reasonable initial estimates for the
cameras' calibration parameters.  It also reads in manually established
tiepoints selected between a ladar point cloud and the D7 panels.  After
iterating over possible D7 camera position threevectors, GEOREGPANO
computes an angular scale factor by which the constellation of manually
extracted image space feature rays needs to be multiplied by in order to
match the angular extent spanned by the corresponding world space rays
derived from the ladar point cloud.  GEOREGPANO also computes the global
rotation which maps the rescaled image space ray constellation onto the
ladar rays in absolute world space coordinates.  After a georegistered set
of translated, rotated and rescaled package files are written to disk, they
can be directly imported into program HALFWHEEL in order to view the D7
panorama as a set of 3D OBSFRUSTA against the ladar point cloud background.

*.  mains/tech_challenge/HALFWHEEL displays D7 panoramic imagery within 5
aligned 3D OBSFRUSTA.  If the OBSFRUSTA have been previously geoaligned via
program GEOREGPANO, HALFWHEEL can be used to inspect the registration match
between the D7 video and a background ladar point cloud.

*.  Georegistration of D7 HAFB panoramic video to HAFB minimap is
qualitatively very good!

*. PhotoServer::get_photo_by_URL() returns a JSON string containing all
metadata extracted from the photos table of the TOC database for a
particular photo specified by its URL string.

*.  videofunc::get_photo_URL() takes in a photo's ID and returns its URL
string stored within the photos table of the TOC database.

*.  Implemented more server responses to Jennifer's PHOTO client requests.

============================================================================
ROBOT code changes made on Fri, Jan 14, 2011:

*.  

============================================================================
ROBOT code changes made on Thurs, Jan 13, 2011:

*.  videofunc::update_thumbnail_metadata_in_database() takes in an already
opened GIS database along with metadata for multiple photo thumbnails
within input STL vectors.  It forms an STL vector filled with SQL update
commands.  This method then has the GIS database execute the update
commands to populate the photos table of the TOC database with thumbnail
metadata information.

*.  Dataloader program can now upload thumbnail information to photos table
of TOC database.

============================================================================
ROBOT code changes made on Weds, Jan 12, 2011:

*.  In PolyLine::add_vertex_points(), eliminated unused
Pointsize_scalefactor and textsize_scalefactor arguments.

*.  Imported polylines now exhibit vertex points.

*.  Can now alter IDs for 3D/2D features & polylines within LADAR/VIDEO thin
clients.

*.  PolyLines restored from saved text files have correct IDs.

============================================================================
ROBOT code changes made early on Tues, Jan 11, 2011:

*.  3D & 2D features can be saved and restored via LADAR & VIDEO thin
clients.

*.  Moved active_control_flag member out of Terrain_Manipulator into
Custom3DManipulator along with set/get methods.

*.  Added several methods from Terrain_Manipulator.h into
Custom3DManipulator.h as virtual.  Added dummy versions of these methods
into Custom3DManipulator.cc.

*.  ISDS demos and standard pgms almost work OK as of Tues, Jan 11, 2011 at
9:23 am on ROBOT laptop (pfiles1_11c.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  

..................

*.  PolyLine::construct_polyline() now correctly swaps Y and Z vertex
coordinate values before constructing polyline if ndims==2.

*.  Can now enter and manipulate PolyLines via VIDEO thin client.

*.  Can start to save and restore features and polylines within thin LADAR
& VIDEO clients.

============================================================================
ROBOT code changes made on Mon, Jan 10, 2011:

*.  Overhauled Custom Manipulator members of GeometricalsGroup class.
Replaced osg::ref_ptr<osgGA::Terrain_Manipulator> CM_3D_refptr with
osg::ref_ptr<osgGA::Custom_Manipulator> CM_refptr.  Dynamically recast
CM_refptr to 2D and 3D CustomManipulators as necessary.

*.  2D features can be manipulated via VIDEO thin client.

============================================================================
ROBOT code changes made on Sun, Jan 9, 2011 & early Mon, Jan 10, 2011:

*.  Can now import and export PolyLines via LADAR thin client.

*.  In PolyLinePickHandler::initialize_member_objects(), set 
default value for PolyLine_rather_than_Line_mode to true rather than false.

*.  In LadarServer::insert_world_polyline(), set mode to INSERT_POLYLINE
rather than INSERT_LINE.

*.  In PolyLinePickHandler::pick() and release(), eliminated
MANIPULATE_POLYLINE_VERTEX conditionals

*.  PolyLinePickHandler constructor now takes ndims as argument.  

*.  MovieServer::select_movie_frames_subdir_via_GUI() now returns to VIDEO
thin client first & last frame number via JSON string in a QByteArray
rather than broadcasting this info via ActiveMQ.

*.  Separated off video player thin client codes from BLUETRACKER into new
VIDEO webapps subdir of tomcat directory.

*.  Replaced CM_3D_refptr member by CM_refptr in GeometricalsGroup.

*.  Added Geometrical::set_text_rotation(int i,double chi).
LatLongGrid::draw_longitude_lines() calls this new method.

*.  In LatLongGrid::draw_longitude[latitude]_lines(), we now explicitly
check curr_PolyLine_ptr->get_text_refptr_valid(0) before attempting to
align text on Ellipsoid_model.

*.  Moved call to generate_text() from PolyLine::set_label() back to 
fill_drawable_geode().  Lonlat grid line annotation works again in
JUSTEARTH.

*.  ISDS demos and standard pgms almost work OK as of Mon, Jan 10, 2011 at
11:49 am on ROBOT laptop (pfiles1_10e.tgz).  UAV flight path picking in
Bluegrass demo is messed up.  

*.  In ModeKeyHandler, 'L' now toggles between INSERT/MANIPULATE_POLYLINE
rather than INSERT/MANIPULATE_LINE modes.

============================================================================
ROBOT code changes made on Fri, Jan 7, 2011; Sat, Jan 8, 2011 & early Sun,
Jan 9, 2011:

*.  mains/mapping/LL2UTM is a little utility which converts a pair of
longitude & latitude geocoords (entered in degs, mins, secs form) to an
(easting,northing) pair.

*.  Added flashlight_mode_flag member with default false value to
OBSFRUSTAGROUP along with set method.

*.  In videofunc::find_min_max_photo_numbers() and
AnimationController::store_ordered_image_filenames() we assume true
imagenumber occurs within next-to-last substring.  If this substring is NOT
numeric, search for genuinely numeric substring in next-to-next-to-last
substring, next-to-next-to-next-to-last substring, etc:

*.  ISDS demos and standard pgms almost work OK as of Sat, Jan 8, 2011 at
11:35 am on ROBOT laptop (pfiles1_8a.tgz)

*.  Eliminated unused text_size member from PolyLinePickHandler class

*.  Moved text generation lines out of PolyLine::fill_drawable_geode() into
new PolyLine::generate_text(int i).  Latter method replaces
PolyLine::initialize_text().

*.  Added altitude_dependent_labels_flag member to PolyLinesGroup class
with default true value.  But set to false for QTVIEWLADAR.  PolyLine text
labeling now seems to work fine in LADAR viewer.

*.  Starting to add PolyLinesGroup::save_info_to_file().

============================================================================
ROBOT code changes made on Tues, Jan 4, 2011, Weds, Jan 5, 2011 & Thurs,
Jan 6, 2011:

*.  Starting to experiment with projecting reconstructed sailplane imagery
onto Z-planes.

*.  Overloaded version of plane::ray_intersection() simply returns a boolean
flag.  If the ray defined by its base point and direction vector r_hat
intersects the current infinite plane, this method returns true.
Otherwise, if the ray is oriented away from the plane or is orthogonal to
its normal vector, this method returns false.

*.  In Movie::warp_photo_onto_imageplane(), we now check whether all corner
rays from camera's view frustum actually intercept image plane.  If not, we
cannot project the photo onto the image plane!

*.  After talking with Ross, we eliminated the removeDrawables and
removeChild commands within the PolyLine destructor which we had added on
Monday, Jan 3.

*.  OBSFRUSTAGROUP::display_OBSFRUSTA_as_time_sequence() enables a group of
reconstructed 3D OBSFRUSTA to be displayed over time as a movie sequence.
It sets the AnimationController's number of frames equal to the number of
OBSFRUSTA within *this.  And it resets member bool flag
play_OBSFRUSTA_as_movie_flag to true.


*.  Added get_grid_world_origin_ptr() members to GraphicalsGroup class.
Made member var grid_world_origin_ptr private.

*.  Added deque<int> member selected_Graphical_IDs to GraphicalsGroup.
Eliminated int members selected_Graphical_ID & prev_selected_Graphical_ID.

============================================================================
ROBOT code changes made on Mon, Jan 3, 2011 & early Tues, Jan 4, 2011:

*.  In PolyLinesGroup::regenerate_PolyLine(), eliminated following lines:

 bool generate_drawable_geom_flag=false;
   new_PolyLine_ptr->fill_drawable_geode(
      new_PolyLine_ptr->get_geode_ptr(),force_display_flag,
      generate_drawable_geom_flag);

fill_drawable_geode() is already being called via generate_new_PolyLine().

*.  In PolyLinePickHandler::instantiate_PolyLine(), eliminated following lines

      osg::Geode* geode_ptr=
         curr_PolyLine_ptr->generate_drawable_geode(force_display_flag);
      curr_PolyLine_ptr->get_PAT_ptr()->addChild(geode_ptr);
      PolyLinesGroup_ptr->insert_graphical_PAT_into_OSGsubPAT(
         curr_PolyLine_ptr,0);

These are already being implemented by
PolyLinesGroup_ptr->generate_new_PolyLine() call.

*.  In PolyLine destructor, explicitly removeDrawables add to geode & Child
geode added to PAT.  This results in their reference counts going down to 1
by end of destructor.

*.  Updated README.TOMCAT.

*.  ISDS demos and standard pgms almost work OK as of Tues, Jan 4, 2011 at
8 am on ROBOT laptop (pfiles1_4a.tgz)

============================================================================
ROBOT code changes made on Thurs, Dec 30, 2010; Fri, Dec 31, 2010; Sat, Jan
1, 2011; Sun, Jan 2, 2011:

*.   Added Pointsize_scalefactor member to PolyLinesGroup along with
set/get methods.

*.  PolyLine::generate_PolyLine_length_label() computes the length of the
current polyline.  This method adds a text label to the PolyLine located at
its center.  The text label is returned by this method.

*.  PolyLine::get_length_sizefactor() computes log10 of the current
polyline's total length (measured in meters).  It returns scale factor s =
4**(log10(length)-2).  On 12/30/10, we empirically found that this scale
factor yields reasonably sized cross hairs and PolyLine length labels for
Polylines within selected wtihin our lowell.osga and RASR S3-314 ladar
point clouds.

*.  Blink polyline when it's selected via LADAR thin client button (but not
when it's first instantiated in 3D viewer).

*.  Display polyline lengths within ladar thin client.

*.  Fixed max() calls in tdpfunc::generate_ztwoDarray_from_tdpfile()
and generate_ztwoDarray_and_ptwoDarray_from_tdpfile().

*.  In tdpfunc::fill_ztwoDarray_from_tdpfile(), changed
min(curr_z,ztwoDarray_ptr->get(px,py)) to max.

*.  In PolyLinesGroup class, eliminated redundant member CM_3D_ptr in favor
of already existing CM_3D_refptr member of GeometricalsGroup.

*.  Size of very first PolyLine vertex depends upon virtual camera height
above grid.

*.  PolyLine and selected vertex manipulation buttons toggle correctly in
LADAR thinclient.  Moving vertices up,down and deleting them also work.

*.  Added MANIPULATE_POLYLINE_VERTEX mode in ModeController class.

*.  Added get_WindowManager_ptr() member to Operations class.

*.  Overrode GraphicalsPickHandler::move_Graphical() within
PolyLinePickHandler class.  Can now drag waypoints within a selected
PolyLine.

*.  Eliminated blink_PolyLine(s) member functions in PolyLinesGroup class
in favor of blink_Geometrical(s) in GeomtricalsGroup class.  Annotations,
features and PolyLines now all blink when selected in LADAR thin client.

*.  LADAR thin client can now double vertices within a PolyLine for refined manipulation.

*.  Added variable_Point_size_flag to PolyLinesGroup with default false
value.  Also added set/get methods.

*.  ISDS demos and standard pgms almost work OK as of Sun, Jan 2, 2011 at
10 pm on ROBOT laptop (pfiles1_2b.tgz)

============================================================================
ROBOT code changes made early on Weds, Dec 29, 2010:

*.  In GraphicalsGroup::destroy_Graphical() reset selected_Graphical_ID to
-1 if it currently equals curr_Graphical_ptr->get_ID().

*.  Selecting/unselecting of PolyLine vertices is starting to work!

*.  mains/utility/DELETE_MAINS takes in the name for some "build" script
(e.g.  build_aerialEO).  It creates a new "anti build" script
(e.g. build_anti_aerialEO) which contains /bin/rm unix commands
corresponding to all of the make commands within the build script.

*.  mains/utility/CREATE_DELETEMAINS_SCRIPT reads in the contents of the
"build_all" script.  It generates a corresponding "delete_all_mains" script
which cds into each of our mains subdirectories, generates an "anti-build"
script within those subdirectories and adds a call to the anti-build script
to delete_all_mains.

*.  In tdpfunc::write_relative_xyzrgba_data() and
photosynth/BUNDLER_CONVERT, we store relative and not absolute vertex
coordinates within osg::Vec3 objects.  These OSG XYZ vectors hold 4-byte
floats and not 8-byte doubles.  After making this change, georegistered
cameras for sailplane reconstruction match very well with Furukawa's dense
point cloud!

....................

*.  Can now globally move PolyLines up and down via LADAR thin client.

*.  In Point::set_crosshairsnumber_text_posn(), return if
text_refptr[0].valid==false

============================================================================
ROBOT code changes made on Tues, Dec 28, 2010:

*.  Replaced deprecated pre-sailplane methods for converting bundler to
world coordinates in BUNDLER_CONVERT & BUNDLER_PHOTOS.

*.  Selecting PolyLines in QTVIEWLADAR thin client now automatically
displays vertices' values.

*.  In PointsGroup::update_display(), call reset_colors().

*.  Starting to be able to select vertices within PolyLines via LADAR thin
client.

============================================================================
ROBOT code changes made on Fri, Dec 24, 2010, Sat, Dec 25, 2010; Sun, Dec
26, 2010; Mon, Dec 27, 2010 & early Tues, Dec 28, 2010:

*.  In Operations class, add get_WindowManager_ptr() method.

*.  In BasicServer class, eliminated set_WindowManager_ptr() member.
Instead, extract WindowManager in BasicServer from passed Operations
information.

*. In SignPostsGroup class, eliminated bool member broadcast_SignPosts_flag
in favor of SignPosts_updated_flag.

*.  SignPost metadata display within LADARVIEWER thin client is starting to
become interactive.

*.  In GraphicalsGroup::move_z(), fixed curr_Graphical_ptr bug.

*.  Added enable_pick_flag & enable_drag_flag bool members to PickHandler
and CustomManipulator classes along with set/get methods.

*.  Thin client control of SignPosts in QTVIEWLADAR is working pretty well!

*.  Added Features_updated_flag member to FeaturesGroup class along with
set/get methods.

*.  Eliminated unused GUI_flag member from AnnotatorsGroup class.

*.  Starting to have thin client control of Features in QTVIEWLADER.

*.  Added Geometricals_updated_flag member to GeometrcaislGroup class along
with set/get methods.  Eliminated corresponding members from SignPostsGroup
and FeaturesGroup classes.

*.  ISDS demos and standard pgms almost work OK as of Tues, Dec 28 2010 at
7:25 am on ROBOT laptop (pfiles12_28a.tgz)

============================================================================
ROBOT code changes made on Tues, Dec 21, 2010 & early Weds, Dec 22, 2010:

*.  In EarthsGroup class, eliminated Terrain_Manipulator_ptr member for
Custom3DManipulator CM_3D_ptr member.

*.  Added osg::ref_ptr<osgGA::CustomAnimationPathManipulator> apm member to
MyViewerEventHandler class along with get methods.

*.  Added get_WindowManager_ptr() member to CustomManipulator class.

*.  Suppress DTED colorbar display in QTLOS when ladar data is imported.

============================================================================
ROBOT code changes made on Mon, Dec 20 & early Tues, Dec 21, 2010:

*.  We now at least see consistency among 3D view frusta and dense
sailplane point cloud reconstruction in Bundler's absolutely original
coordinate system.

*.  In BPF2TDP, eliminate snowflakes by imposing nontrivial lower bound on
neighborhood weighted count.

*.  Overloaded version of camera::convert_bundler_to_world_coords() takes
in a rotation origin for Bundler points and cameras (e.g. COM from raw
Bundler output).  After converting to Peter's world coordinates where Z
represents height, this method translates the camera position so that it's
centered about (0,0,0).  It then scales and rotates the camera accordining
to the input parameters.  This method subsequently translates the camera to
its final world position (e.g. trans = GPS_COM).  This method resets the
current camera's world position and az, el, roll member variables so that
the camera is absolutely georegistered.

*.  mains/photosynth/EARTHBUNDLER is a minor variant of VIEWBUNDLER.  It
displays an absolutely georegistered lat-lon grid rather than a relative
grid underlay.

============================================================================
ROBOT code changes made on Sun, Dec 19. 2010 & early Mon, Dec 20:

*.  Started to incorporate 3D screen shot and movie making into
QTVIEWLADAR.

*.  In MyViewerEventHandler::generate_flash_movie(), now use simpler
mencoder command to generate intermediate MP4 AVI movie which is of the
same form as that used to generate final MP4 AVI movie in
MyViewerEventHandler::generate_movie().

*.  SignPostsGroup::broadcast_SignPosts() issues an ActiveMQ message with
the XYZ coordinates and labels for all existing SignPosts.

*.  ISDS demos and standard pgms almost work OK as of Mon, Dec 20, 2010 at
8:49 am on ROBOT laptop (pfiles12_20c.tgz)

============================================================================
ROBOT code changes made early on Fri, Dec 17 2010:

*.  mains/photosynth/JPG2jpg takes in some subdirectory which is assumed to
contain a set of images with .JPG suffixes.  It generates an executable
script which forms soft links to files with the same prefix but with .jpg
suffixes.  We wrote this script in order to avoid headaches with Noah's
Bundler codes which seem to want .jpg rather than .JPG input files.

*.  Added README.bundler to repository

*.  mains/photosynth/PLY2TDP reads in translation, scaling and rotation
parameters derived by comparing raw Bundler and GPS track points via
program GPSREGISTER.  It applies these transformations to an input PLY file
generated by Furukawa's PMVS code applied to Noah's Bundler output.  The
resulting georegistered, colored point cloud is written to an output TDP
file.

============================================================================
ROBOT code changes made on Weds, Dec 15, 2010 and early on Thurs, Dec 16,
2010:

*.  Code freeze for LOST.  

........................

*.  mains/photosynth/PLY2TDP reads in translation, scaling and rotation
parameters derived by comparing raw Bundler and GPS track points via
program GPSREGISTER.  It applies these transformations to an input PLY file
generated by Furukawa's PMVS code applied to Noah's Bundler output.  The
resulting georegistered, colored point cloud is written to an output TDP
file.

*.  mains/photosynth/GPSREGISTER reads in reconstructed camera positions
generated by BUNDLER.  It also reads in GPS track positions.  This program
translates the bundler camera track so that its center-of-mass matches the
GPS track's.  It rescales the bundler track so that its standard deviation
matches the GPS track's.  The best-fit rotation which matches corresponding
bundler and GPS track points is then calculated.

============================================================================
ROBOT code changes made early on Mon, Dec 13, 2010 & Tues, Dec 14, 2010:

*.  Added get_n_XYZs() to MyNodeVisitor class.

*.  PointCloud::find_extremal_z_values() uses the HiresDataVisitor to
gather and fill its STL member vector XYZ with information from the highest
level-of-detail geodes in the scene graph.  It then scans through all XYZ
points for those lying within the 2D bounding box specified by the input X
& Y limits.  This method returns the minimal and maximal z values
corresponding to the points within the 2D bounding box.

*.  LOSServer::check_aircraft_altitude_wrt_ground() takes in the lower left
and upper right geocoordinates for the flowfield skymap.  It retrieves
ground altitudes over a lattice within the skymap region.  If the
aircraft's altitude is less than the ground's at any lattice point, this
method returns an error message.

*.  In LOSMODELSGROUP, changed operation cancellation messages from
'RAYTRACING' to 'raytracing' and 'SKYMAP' to 'flowfield computation'.
Messenger::broadcast_progress() should now NOT send out progress updates
for these operations once the cancel button is pressed, for
progress_type==cancelled_operation.

.................

*.  ISDS demos and standard pgms almost work OK as of Mon, Dec 13, 2010 at
4:37 pm on ROBOT laptop (pfiles12_13c.tgz)

*.  BasicServer::generate_error_JSON_response() returns a JSON string with
key='message' and value=error_message contents.

*.  LOSServer::check_flightpath_wrt_ground() retrieves ground altitudes at
multiple points along the XY locations specified by input flight path
*flightpath_ptr.  If the aircraft's altitude is less than the ground's at
any sample point, this method returns an error message.

*.  LOST server now performs sanity check on circular and custom flight
paths to ensure they do not crash into the ground.

============================================================================
ROBOT code changes made on Thurs, Dec 9, 2010:

*.  Program PLY2TDP reads in a PLY file generated by Noah's Bundler codes.
It extracts X,Y,Z,R,G,B information and generates an output TDP file.

*.  plane::ground_plane_origin() takes in normal vector n_hat for some
candidate ground plane.  It computes the n coordinate for each point within
STL vector V_input.  The threevector with the minimal n coordinate value is
returned as a best guess for a ground plane origin.

.....

*.  mapping/GENERATE_BPF2OSGA_SCRIPT is a little utility program which
reads in the names of all .bpf files within the current subdirectory.  It
generates a script which converts each of the input BPF files to TDP
format.  The script also calls LODTREE to convert the TDP files to OSGA
format.  Finally, the TDP files are moved into ./tdp and the OSGA files are
moved into ./osga subdirectories of ./ .

============================================================================
ROBOT code changes made early on Tues, Dec 7, 2010:

*.  In LOSServer::set_sensor_params(), restrict az field-of-regard in LOST
to interval [5,170] degs.  max_ground_range restricted to 400 kms or less.

*.  In OBSFRUSTUMfunc::convert_FOVs_to_alpha_beta_angles(), explicitly
check if A or B lie outside interval [0,1].  If so, print error message and
exit.

============================================================================
ROBOT code changes made on Mon, Dec 6, 2010:

*.  In first version of void raster_parser::write_colored_raster_data(),
set z_min=0 and z_max=1 rather than computing these values from
*RtwoDarray_ptr.  Fixes Pak ROI average raytracing results bug.

*.  Second version of raster_parser::write_colored_raster_data() and
TilesGroup::convert_avg_geotifs_from_greyscale_to_color() now have infinite
while loops which stop these methods from progressing until colored geotiff
files are actually written to disk.

============================================================================
ROBOT code changes made on Sat, Dec 4, 2010 & Sun, Dec 5, 2010:

*.  Moved all min() and max() methods in basic_math.h into basic_math
namespace to avoid conflict with similar methods in <algorithm>.

*.  ISDS demos and standard pgms almost work OK as of Sat, Dec 4, 2010 at
8:47 pm on ROBOT laptop (pfiles12_4c.tgz)

*.  Added graph/fsa.h and stlastar.h to repository.

*.  Astar path searching implemented in PATHFINDER.

============================================================================
ROBOT code changes made on Fri, Dec 3, 2010:

*.  In OBSFRUSTUMfunc::compute_corner_rays(), changed SMALL_NEG from -0.01
to -0.0000001.  This alteration fixes one bad LOST bug uncovered by Howell
Yee.

*.  LOST now issues warning message if aircraft altitude lies below highest
mountain peak.

============================================================================
ROBOT code changes made on Thurs, Dec 2, 2010:

*.  Created new PathFinder and PathFinderKeyHandler classes in
osg/osgAnnotators/.

.....................................

*.  Program PATHFINDER now generates possible foot paths through ALIRT
terrain via Dijkstra's algorithm.

*.  Trying to generalize ROBOCEILING s.t. it works OK with Nick's newer,
harder RASR ladar scans.

============================================================================
ROBOT code changes made on Weds, Dec 1, 2010:

*.  Added path_predecessor_ptr member to node class along with set/get
methods.

*.  graphfunc::print_shortest_path() takes in some destination node's
pointer.  It prints the total distance of the destination from the starting
node.  This method then prints out the node IDs for the shortest path from
the destination back to the starting node.

*.  Modified graph::compute_neighbor_node_distances_from_start()
s.t. neighbor node keep track of input current node for Dijkstra's path
planning purposes.

*.  Introduced new terrainfuncs namespace within src/image

*.  Starting to compute path through terrain via Dijkstra's method.

============================================================================
ROBOT code changes made on Tues, Nov 30, 2010:

*.  gis_database::parse_worldline_geometry() now returns an STL vector of
worldline areas sorted in ascending order.

*.  In postgis_database::parse_worldline_geometry(), do NOT call
set_country_name() if max_area < 1.  This conditional eliminates labeling
small islands off of CA and TX coasts with state names.
...........

*.  In postgis_database::parse_table_contents(), reset
city_text_displacement from 50 to 25 kms above sea level.

============================================================================
ROBOT code changes made on Mon, Nov 29, 2010:

*.  QTLOS now always reads in country_borders and state_borders tables in
the ISDS_GIS postgis database.  State borders for US regions are now
displayed in thick client.

*.  Added CylidersGroup* member minor_cities_group_ptr to Earth class.

*.  Earth::retrive_US_cities_from_PostGIS_database() is a
specialized method which populates *minor_cities_group_ptr with
Cylinders based upon cities whose 1990 populations exceed some
minimal threshold.  


============================================================================
ROBOT code changes made on Thurs, Nov 25, 2010, Fri, Nov 26, 2010, Sat, Nov
27, 2010, Sun, Nov 28, 2010 and early Mon, Nov 29, 2010:

*.  In texture_rectangle class, now explicitly call delete [] m_image prior
to every instance of m_image = new unsigned char[].

*.  Added Tensor<std::pair<double,double> >::clear_values() to Tensor class.

*.  Program ROBOCEILING reads in raw Hokoyu ladar points for individual
scans collected within a room from an input text file.  It extracts gross
shape information from ladar points located near the room's ceiling.  We
assume the room's ceiling is well-represented by a flat plane (i.e. no
domes, cathedral vaulted ceilings, etc).  After RANSAC fitting a plane to
the ceiling points, all ladar points are rotated and translated so that the
floor is well represented by the z=0 plane.  ROBOCEILING then projects all
z-leveled points into a z-plane.  The largest connected component in a
binary, recursively filled twoDarray is found (in order to eliminate ladar
points which lie outside the room from open doorways).  The convex hull for
the largest connected component is calculated, and its dominant edge
direction angle (modulo 90 degrees) is determined.  Wall direction vectors
what, lhat are found from the averaged edge direction angle, and extremal W
& L coordinates are calculated.  A 2D bounding box is thus determined which
fits snugly around the large connected component's convex hull.
ROBOCEILING writes to output text files the bounding box parameters as well
as raw ladar points translated so that the bbox center = (0,0).

*. Program ROBOMERGE reads in bounding box parameters and translated XYZ
point clouds from individual ladar room scans generated by ROBOCEILING.  It
first determines bbox corner point identifications for all input bounding
boxes.  ROBOMERGE next determines corresponding direction vectors and side
dimensions each input bbox.  It then rotates and scales the translated XYZ
point clouds so that they can be trivially merged.  ROBOMERGE writes out
two registered XYZ text files - one with ceiling points and one without
which can be turned into OSGA binary files via ROBO2TDP.  Finally, this
program exports a PNG image file which represents a projected floor plan
for the room based upon all input ladar scans.

*.  Generalized texture_rectangle::convert_greyscale_image_to_hue_colored()
to take hue_min & hue_max as input arguments rather than always hardwiring
them to red and green (for LOST).

*.  In texture_rectangle::convert_greyscale_image_to_hue_colored(), set
A=255 rather than A=0 if black_pixel_flag=true (for RASR 2D floor plans).

*.  In LOSMODELSGROUP::generate_ellipse_flightpath(), recompute ellipse
flight path center after specifying UTM zone.  Fixes LOST bug observed on
Allie's machine a few days ago.

*.  ISDS demos and standard pgms almost work OK as of Sun, Nov 28, 2010 at
10:50 am on ROBOT laptop (pfiles11_28a.tgz)

*.  ROI raytracing works in Nov23g, Nov24d, Nov24e. Catastrophic ROI
raytracing error found in Nov 24f,Nov24h.  Error traced to default param
value for n_channels set to 3 rather than 4 in
initialize_twoDarray_image(const twoDarray* ptwoDarray_ptr,int
n_channels=4) of texture_rectangle.h

============================================================================
ROBOT code changes made early on Weds, Nov 24, 2010:

*.  Eliminated zplane_trapezoid in favor of zplane_triangle in OBSFRUSTUM.
LOST raytracing now correctly takes min and max ground ranges into account.

*.  At end of TilesGroup::convert_avg_geotifs_from_greyscale_to_color(),
delete colored average LOS geotif tiles in UTM coordinates (to avoid having
extra files sitting in geotif_Ptiles_subdir with avg_LOS in their names.

.............

*.  texture_rectangle::initialize_twoDarray_image() now takes n_channels
as input rather than hardwiring this param to 3.

*.  texture_rectangle::fill_twoDarray_image() now works with variable
rather than fixed number of color channels.

============================================================================
ROBOT code changes made early on Tues, Nov 23, 2010:

*.  Corrected and overhauled
LOSMODELSGROUP::compute_optimal_linesegment_params().  4 segment params are
now xc,yc,r,theta.  This method now works significantly better and faster
than previously.

............

*.  LOSMODELSGROUP::compute_avg_LOS_ptwoDarray() reads in all geotif files
whose names start with "ptwoDarray_OBSFRUSTUM***.tif" from the input
geotif_Ptiles_subdir.  We assume that these files were generated from
raytracing of relatively small ALIRT ROIs.  This method averages together
the contents of all the input geotif files and generates an output
avg_ptwoDarray.tif file within geotif_Ptiles_subdir.

*.  Starting to get time-averaged raytracing results for ALIRT patch.

*.  Split off TilesGroup::convert_avg_geotifs_from_greyscale_to_color()
from TilesGroup::export_avg_ground_bbox_LOS().

*.  TilesGroup::convert_avg_geotifs_from_greyscale_to_color()
takes in an STL vector of averaged LOS tile filenames.  It converts
the visibility geotif files' contents from greyscale to hues
ranging from red to green.  This method then transforms the full
raster image's geocoordinates from UTM to lat-lon.  Finally, it
returns the full pathname for the output, recolored and transformed
raster image.

*.  In texture_rectangle::fill_twoDarray_image(), now explicitly apply
ceiling threshold of 255 to ui_p.

*.  Can now generate time-averaged ROI visibility colored geotif file for
ALIRT patch in lat-lon coords which can be imported as an image overlay
into GE.

============================================================================
ROBOT code changes made on Mon, Nov 22, 2010:

*.  Write LOST outputs to ~Desktop/LOST_inputs_and_outputs.

...............

*.  Split off first part of MODEL::import_avg_LOS_ptwoDarray_contents()
into MODEL::find_avg_LOS_geotif_files().

*.  MODEL::find_avg_LOS_geotif_files() recovers all geotif files whose
names start with "avg_LOS" from the input geotif_Ptiles subdirectory.  It
returns their filenames within the output STL vector.

============================================================================
ROBOT code changes made on Sat, Nov 20, 2010, Sun, Nov 21, 2010 & early
Mon, Nov 22, 2010:

*.  Messenger::check_for_cancel_operation_message() listens for any 
message whose text command = CANCEL.  If found, this method
searches for a key-value pair where key="operation".  The
corresponding value is stored within member string
cancelled_operation.  

*.  Added cancelled_operation string member to Messenger class along with 
clear_cancelled_operation() and get_cancelled_operation() methods.

*.  Canceling raytracing and skymap computation now works relatively
quickly for LOST thick client.

*.  Added panel_number member to texture_rectangle class along with set
method.

*.  In LOSServer::set_raytracing_controls(), increased time step from 3 to
5 secs for point target raytracing with ladar height data.

*.  Eliminated unused LOSServer::set_visualization_parameters().

*.  Eliminated LOSMODELSGROUP member var raytrace_cellsize.  Replaced with
get_raytrace_cellsize() which depends upon ladar_height_data_flag.

*.  Instantaneous ROI raytracing for ALIRT imagery basically works within
LOST.  

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 22 at 7:27
am on ROBOT laptop (pfiles11_22a.tgz).

*.  Added skymap_ds member to LOSMODELSGORUP class.  In
LOSMODELSGROUP::candidate_linesegment_score(), set ds=0.4*skymap_ds.

============================================================================
ROBOT code changes made on Fri, Nov 19, 2010:

*.  Modified LOSServer::generate_avg_occlusion_files() s.t. geotif/nitf
files are export to webapps and Desktop subdirs.

============================================================================
ROBOT code changes made early on Thurs, Nov 18, 2010:

*.  Performed more cosmetic cleaning of LOST.

============================================================================
ROBOT code changes made early on Weds, Nov 17, 2010:

*.  LOSMODELSGROUP::compute_OBSFRUSTUM_parameters() extracts min and max
ground heights from the input *PointCloudsGroup_ptr.  It then converts the
input height-independent extremal ground sensor range parameters into a
height-independent OBSFRUSTUM elevation opening angle and maximum sensor
range (based upon a z=0 flat-earth approximation).  min_sensor_range takes
zground_max into account so that nadir-oriented sensors could see every
point within the input terrain map.

*.  QTLOS utilizes DepthPartionNode only if ladar_height_data_flag=true.

------

*.  LOSMODELSGROUP::averaged_ground_target_visibility() retrieves
previously computed target visibilities for all points along a flight path.
It forms and returns a normalized fraction corresponding to the average
visibility of all the ground targets over the entire flight path.

*.  No longer broadcast score for automatically planned flight paths based
upon skymap alignment.

*.  Added LOSServer::cancel_calculation().  Poor man's raytracing
cancellation implemented within LOST. 

============================================================================
ROBOT code changes made on Tues, Nov 16, 2010:

*.  Added ladar_height_data_flag bool member to LOSMODELSGROUP class along
with set method.

*.  In LOSMODELSGROUP::generate_LiMIT_MODEL_for_flight_PolyLine(),
suppress display of aircraft OBSFRUSTA when working with ladar imagery
rather than DTED-2 height data.

*. Arrow::set_magnitude_direction_and_center() now takes
arrowhead_size_prefactor argument.  

*.  Privatized LineSegment::generate_endpoint();

*.  LOST can now compute skymaps based upon ALIRT terrain data.

============================================================================
ROBOT code changes made on Sat, Nov 13, 2010, Sun, Nov 14, 2010 & early
Mon, Nov 15, 2010:

*.  colorfunc::bytes_to_RGBA takes in an osg::vec4ub which contains color
information as bytes.  This method returns an RGBA structure containing
renormalized red, green, blue and alpha values corresponding to the RGBA
byte quadruple.

*.  In ColorGeodeVisitor::color_geometry_vertices(), we now differentiate
between color dependent var = 0 and 1.  0 --> Correlate height with hue and
intensity with value.  This coloring scheme works well for LOST.  1 -->
Correlate height with hue and intensity.  Correlate intensity with
saturation.

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 15 at 6:46
am on ROBOT laptop (pfiles11_15a.tgz).

*.  Added ladar_height_data_flag to GeometricalsGroup class along with
set/get methods.

*.  Can start to raytrace ALIRT data in LOST.

============================================================================
ROBOT code changes made on Thurs, Nov 11, 2010 & Fri, Nov 12:

*.  bounding_box::inscribed_bbox() takes in a 4 2D corners which
approximately describe a rectangular bounding box that generally is
NOT aligned with the X & Y axes.  (For instance, the corners may be
manually selected.)  This method computes orthogonal direction
vectors what & lhat which as well as rotated rectangular bbox
coordinates wmin, wmax, lmin and lmax.  The bounding box is
guaranteed to fit inside the quadrilateral defined by the input
corners.  

*.  bounding_box::XY_inside_WL_bbox() assumes that members wmin, wmax,
lmin, lmax, what, lhat and COM have all been previously calculated via a
call to inscribed_bbox().  It tests whether input 2D point (x,y) lies the
rotated rectangular bounding box defined along the what and lhat
directions.  If so, this boolean function returns true.

*.  Generalized XYZP2TDP so that it can take in multiple XYZP files and
output a single TDP.  But this program quickly runs out of memory if the
input files are too large.

============================================================================
ROBOT code changes made on Mon, Nov 8, 2010:

*.  ISDS demos and standard pgms almost work OK as of Mon, Nov 8 at 1:17 pm
on ROBOT laptop (pfiles11_8a.tgz). 

*.  LOSServer now returns JSON string in response to Set_Automated_Path
request.

============================================================================
ROBOT code changes made on Sat, Nov 6, 2010 & Sun, Nov 7, 2010:

*.  Decrease number of samples over which automated path parameters are
drawn with each iteration.  Average score then approaches highest candidate
path score.

*.  Weight candidate automatically selected flight paths by their visiblity
scores when determining path parameter distributions.

*.  Math error fix identified on Fri Nov 5 now enabled in LOST.

*. Eliminated erroneous maximum[minimum]_allowed_vert_FOV() from
OBSFRUSTUMfuncs namespace.

============================================================================
ROBOT code changes made on Fri, Nov 5, 2010:

*. Fixed math errors in
OBSFRUSTUMfuncs::convert_FOVs_to_alpha_beta_angles().  Now use Newton's
method to solve nonlinear expression for alpha,beta.

*.  Added inverse method
OBSFRUSTUMfuncs::convert_alpha_beta_angles_to_FOVs().

*.  Starting to integrate thick and thin client LOST codes for auto path
planning.

============================================================================
ROBOT code changes made on Weds, Nov 3, 2010:

*.  ISDS demos and standard pgms almost work OK as of Weds, Nov 3 at 11:58
am on ROBOT laptop (pfiles11_3a.tgz). 

*.  User can now select multiple .osga files via filedialog entry box in
QTVIEWLADAR.

============================================================================
ROBOT code changes made on Tues, Nov 2, 2010:

*.  Added new BPFFUNCS namespace to threeDgraphics subdir.

*.  Moved ROBO2TDP from mains/mapping to rasr subdirs.

*.  BPF2TDP can now handle BPF1, BPF2 or BPF3 input file formats.

============================================================================
ROBOT code changes made on Sun, Oct 31, 2010 & Mon, Nov 1, 2010:

*.  Min and Max Z thresholding works within QTVIEWLADAR.  

*.  Eliminated ColorMap::set_map_number() in favor of set_mapnumber().

*.  Commented out all references to SKS database from SignPost classes.

*.  Added GUI_flag to AnnotatorsGroup along with set method.

*.  Can now input SignPosts label via thin client interface.

============================================================================
ROBOT code changes made on Weds, Oct 27, 2010 & Thurs, Oct 28, 2010:

*.  Program BPF2TDP reads in a Binary Point Format ladar file.  It extracts
metadata from the file's header as well as offset and extremal data values.
BPF2TDP then fills X,Y,Z and P arrays with values.  Finally, this program
outputs a TDP file containing the XYZP information.

*.  Add null_color=osg::Vec4ub(0,0,0,0) to ColorMap class.
ColorMap::retrieve_frac_color now returns null_color if frac < 0 || frac >
1.  Z threshold cropping works again in VIEWPOINTS.

*.  In ColorGeodeVisitor::color_geometry_vertices(), Ross Anderson told us
to add following lines in order to enable alpha-blending for points:

      osg::StateSet* stateset_ptr=curr_Geometry_ptr->getOrCreateStateSet();
      stateset_ptr->setMode(GL_BLEND,osg::StateAttribute::ON);

============================================================================
ROBOT code changes made on Tues, Oct 26, 2010:

*.  LOST can now start to draw ellipse flight path automatically calculated
via MIT algorithm.

*.  LOST can now fit circle, ellipse and linesegment orbits to visibility
skymaps.

*.  Starting to write translator from BPF to TDP ladar file formats.

============================================================================
ROBOT code changes made on Fri, Oct 22, 2010 & Mon, Oct 25, 2010:

*.  Starting to obtain reasonable results from automatic circular &
elliptical flight path computations.

*.  mathfunc::approx_ellipse_circumference takes in semi-major and
semi-minor axes' lengths a and b.  It evaluates and returns a closed form
approximation for the circumference of the corresponding ellipse
(http://en.wikipedia.org/wiki/Ellipse).

============================================================================
ROBOT code changes made on Thurs, Oct 21, 2010:

*.  ISDS demos and standard pgms almost work OK as of Tues, Oct 21 at 10:13
am on ROBOT laptop (pfiles10_21a.tgz). Bluegrass demo basically works
again.

*.  TilesGroup::export_avg_ground_bbox_LOS() first fills an STL vector with
averaged LOS tile filenames corresponding to the input longitude and
latitude ranges.  It then converts the visibility geotif files' contents
from greyscale to hues ranging from red to green.  This method then
transforms the full raster image's geocoordinates from UTM to lat-lon.
Finally, it returns the full pathname for the output, recolored and
transformed raster image.

*.  Add Ken Lee's cross entropy tutorial PDF file to repository.

*.  LOSMODELSGROUP::generate_random_vars() generates a set of random
variables drawn from a gaussian distribution with mean mu and standard
deviation sigma.  Random variables are forced to lie within the interval
[xmin,xmax].  The set of random variables is returned within an output STL
vector.

============================================================================
ROBOT code changes made on Weds, Oct 20, 2010:

*.  texture_rectangle::get_RGBA_twoDarrays() instantiates four twoDarrays
and fills their contents with red, green, blue and alpha channel values for
the current texture_rectangle.  This method returns the twoDarrays within
an RGBA_array.

*.  Added AtwoDarray_ptr member to raster_parser class along with get
method.

*.  LOST thick client exporting of averaged ROI raster image is starting to
work.  Agreement with GE background imagery looks decent.

============================================================================
ROBOT code changes made on Tues, Oct 12, 2010:

*.  ISDS demos and standard pgms almost work OK as of Tues, Oct 12 at 7:51
am on ROBOT laptop (pfiles10_12a.tgz). But Bluegrass demo does NOT work due
to SKS database connection failure!

...................

*.  In OBSFRUSTUM::evaluate_segment_height(), explicitly check if px,py
corresponds to genuine pixel.  If not return false.  This change fixes seg
fault in ROI raytracing.

============================================================================
ROBOT code changes made on Weds, Sep 29, 2010, Thurs, Sep 30, 2010, Sun,
Oct 3, 2010 & Sun, Oct 10, 2010:

*.  Instantiate TOCHUD_ptr within QTVIEWMOVIE before rather than after
while loop which waits for video clip selection.

*.  In AnnotationServer::get_world_annotations(), we learned the hard way
that output JSON strings must not contain carriage returns if they are to
be parsed correctly within the thin client.  So we explicitly replace any
\n character with a space in the descriptions field:

*.  KMLGPSPARSER now outputs first line in GPS track file with a comment #
character.

*.  In GPSDEVICE, added hash character for first comment line in archived
output file.

*.  In videofunc::retrieve_photo_metadata_from_database(), we now search
backwards among substrings for last one which represents a genuine number.
As of 10/3/10, we assume that this last such substring corresponds to the
frame's number.

*.  Implemented Delsey's significantly faster SQL call in 
mover_func::retrieve_correlated_fieldtest_mission_platform_sensor_metadata().

============================================================================
ROBOT code changes made on early on Tues, Sep 21, 2010:

*.  First two versions of track::broadcast_statevector() now return
interp_flag bool output.

*.  In BROADCAST_GPS, attempt to broadcast dummy position for current GPS
track position when clock time lies before start or after end of actual
track.

*.   AnnotationServer::get_photos_for_mission() now returns npx,npy info
for all photos within a mission.

....................

*.  Fixed json format bug in AnnotationServer pointed out by Jennifer.

.................

*.  Added frame counter information to get_photos_for_mission output as
requested by Jennifer

............

*.  Set times for photo annotations to photo times rather than creation
times.

============================================================================
ROBOT code changes made on Mon, Sep 20, 2010:

*.  Reduced extraction rate from 10 down to 2 fps in EXTRACT_FLIPFRAMES.  

*.  Generalized videofunc::retrieve_photo_metadata_from_database() to now
return photo urls and lonlats in addition to IDs and timestamps.

*.  Deleted global_geoalign.js from bluetracker/scripts/.  Deleted
global.js from geoalign/scripts.

.......................

*.  In videofunc::get_particular[all]_photo_annotations(), changed SELECT
statement to x(uv_posn), y(uv_posn).

============================================================================
ROBOT code changes made early on Sun, Sep 19, 2010:

*.  In mover_func::parse_GPS_logfile(), changed n_fields==10 conditional to
n_fields >= 10 conditional !

============================================================================
ROBOT code changes made on Sat, Sep 18, 2010:

*.  In TOCServer::export_geoaligned_image(), changed hardwired
tomcat_dirname to http://127.0.0.1:8080/geoalign/data/geoaligned_images/

*.  Deleted geoalign.html from webapps/bluetracker and webapps/dataloader.

*.  Added Fort Devens maps to GEOALIGN

*.  In Clock::timestamp_string_to_elapsed_secs(), eliminate any local time
zone indicator at end of hms substring.

*.  videofunc::update_photo_geometries_in_database() takes in photo lon,
lat and alt triples and their corresponding photo IDs. It generates and
executes a set of SQL UPDATE commands which modify the xy_posn and z_posn
columns of the photos table in the TOC database.

*.  mover_func::retrieve_all_tracks_in_TOC_database() takes in a selected
fieldtest ID.  It extracts from the track_points table of the TOC database
all tracks corresponding to the specified fieldtest.  This method
instantiates and returns a tracks_group containing the extracted tracks.

*.  GPS geometry transfer to photos is more-or-less working!

*.  videofunc::fuse_photo_and_gps_metadata() takes in a mission ID along
with a GPS tracks group for some fieldtest assumed to correspond to the
selected mission.  It loops over every entry within the photos table of the
TOC database corresponding to the input mission ID.  If a GPS track from
the same mission also exists within *tracks_group_ptr, this method
interpolates its position values in order to assign a lon,lat,alt triple to
as many of the mission's photos as possible.  The number of photos which
inherit GPS metadata is returned by this method.

============================================================================
ROBOT code changes made early on Fri, Sep 17, 2010:

*.  Trying to get photo annotation insertion to work with TOC database.

.................

*.  ISDS demos and standard pgms almost work OK as of Fri, Sep 17 at 7:08
pm on ROBOT laptop (pfiles9_17a.tgz). But Bluegrass demo does NOT work due
to SKS database connection failure!

============================================================================
ROBOT code changes made on Thurs, Sep 16, 2010:

*.  MovieServer::generate_JSON_for_multimission_importance_intervals()
generates and returns a JSON string containing startFrame, stopFrame and
importance triples which cover all frames within all missions for the
currently selected fieldtest.  This triple information will be displayed as
a SIMILE timeline by Diane Staheli.

============================================================================
ROBOT code changes made early on Weds, Sep 15, 2010:

*.  Video screen capture as PNG file implemented in BLUETRACKER.

*.  AVI movie generation now basically works in BLUETRACKER.  But flash
movie display is very buggy!

*.  Copied and modified progress.js and moviemanip.js from LOST to
BLUETRACKER scripts subdirs.

.......................

*.  In mains/tech_challenge/packages, deleted gps_tracks.pkg from
repository.  Added gps_tracks_local.pkg, gps_tracks_remote_LLAN.pkg and
gps_tracks_remote_private.pkg to repository.

*.  Added scripts/jwplayer-4.3 to Bluetracker repository.

*.  Deleted mains/tech_challenge/Qt/tocviewer.pro, qttocviewer.cc and
run_tocviewer from repository.

*.  Modified build_files and clean_files in mains/tech_challenge/Qt to
build and clean files in mains/video/Qt.

.....................

*.  Fixed typo in
videofunc::generate_insert_photo_annotation_SQL_command().

============================================================================
ROBOT code changes made early on Tues, Sep 14, 2010:

*.  In movie_player::startPolling(), force currFrame to actually display
true frame number.

*.  In init::initViewerControls(), replaced pollMessageQueue() call with
startPollingServer() call.

*.  videofunc::get_particular_photo_annotations() queries the
photo_annotations table within the TOC database for all annotations
associated with a particular photo ID.

.......................

*.  Starting to add LOST movie player functionality into BLUETRACKER.

*.  databasefunc::get_fieldtest_time() takes in a fieldtest ID.  It returns
the date associated with the selected fieldtest as secs since midnight Jan
1, 1970.

*.  MovieServer::generate_JSON_response_to_importance_intervals() now
returns starting and stopping frame times.  If no valid time stamps exist
within the photos table of the TOC database, set timestamps to 2 pm and 3
pm on field test's date.


============================================================================
ROBOT code changes made on Mon, Sep 13, 2010:

*.  Program QTTOCSERV starts up a TOC Server on the current machine which
can handle requests from multiple thin clients.

....................

*.  In firefox_plus_bluetracker.sh, commented out call to qttocviewer which
no longer starts any servers on local clients.

*.  QTTOCSERV and QTANOTSERV can now both run as stateless servers on beast.

...................

*.  Commented out call to no-longer-existing pollmessagequeue() in map.js.  

============================================================================
ROBOT code changes made on Sun, Sep 12, 2010:

*.  Added Burlington and FortDevens layers into
bluetracker/mapFiles/mass30cm.map

*.  Added Burlington & Fort Devens layer entries into
bluetracker/scripts/map.js.  Cleaned up this important file a bit as well.

*.  Added new tiff files for Burlington and Fort Devens into
/data_second_disk/MassGIS/

*.  colorfunc::get_platform_color() hardwires particular colors to
particular platforms in the 2010 Tech Challenge.

*.  Created new TOCHUD class for displaying Mission ID & Platform label
within TOC video player.

============================================================================
ROBOT code changes made on Sat, Sep 11, 2010 & early Sun, Sep 12, 2010:

*.  Eliminated curr_annotation_ID member of AnnotationServer class.

*.  Eliminated repetition of camera sensor types in
AnnotationServer::update_sensor_dropdown().

*.  videofunc::get_photo_annotation_ID() takes in username, label and
description fields.  It returns the integer ID automatically generated by
the photo_annotations table within the TOC database at the time the photo
annotation was inserted.  If no photo annotation matching the input
parameters is found, this method returns -1.

*.  Added photo_counter integer column to photos table of TOC database.  
videofunc::generate_insert_photo_SQL_command() now outputs photo_counter
value for each inserted photo.

*.  Deleted webapps/bluetracker/scripts/annotations.js in favor of
worldAnnotations.js and photoAnnotations.js

*.  Added fieldtest_ID integer column to photo_annotations table.

*.  Created new TOCServer class from several members split off from
AnnotationServer.

*.  Significantly refactored AnnotationServer class so that it now
exclusively handles world and photo annotation manipulations.  Eliminated
all member vars which saved state from AnnotationServer s.t. this class can
eventually be run on the beast and accessed by multiple clients.

*.  Added copilot and courier names as columns in missions table of TOC
database.  Dropped notebook_ID column.  Made corresponding changes to
databasefunc::insert_mission().

*.  DataloaderServer::insert_photos_into_database() now parses GPS time and
geolocation for GPS camera imagery.

*.  Can now view GPS track from GPS camera in BLUETRACKER.

*.  ISDS demos and standard pgms almost work OK as of Sun, Sep 12 at 6:30 am
am on ROBOT laptop (pfiles9_12a.tgz). But Bluegrass demo does NOT work due
to SKS database connection failure!

*.  QTPANOPIX now takes into account number of digits within input JPG
filenames and zero-pads as necessary.

*.  tech_challenge/Qt/QTANOTSERV asks for an input IP address for the
Annotation Server which should generally equal the Beast's.  It then starts
up an Annotation Server on the current machine which can handle requests
from multiple thin clients.

============================================================================
ROBOT code changes made early on Fri, Sep 10, 2010:

*.  videofunc::get_photo_ID() takes in a photo's URL and returns its unique
ID assigned by the TOC database.
 
*.  Added Annotate curent frame button to Viewer_controls panel

..................

*.  databasefunc::get_all_world_map_annotations() now takes fieldtest_ID
input parameter.

..................

*. videofunc::get_photo_dims() takes in a photo's ID and returns its width
and height in pixels.

============================================================================
ROBOT code changes on Thurs, Sep 9, 2010:

*.  Fixed databasefunc::update_world_annotation() SQL command.

........

*.  AnnotationServer::broadcast_annotation_deletion() emits an ActiveMQ
message containing annotation deletion metadata so that all thin clients
can be updated.

...............

*.  AnnotationServer::get_world_annotations() generates and returns a JSON
string containing metadata for all current entries within the
world_annotations table of the TOC database.

...............

*.  MovieServer::generate_JSON_response_to_importance_intervals() generates
and returns a JSON string containing startFrame, stopFrame and importance
triples which cover all frames within the current video clip.  This triple
information will be displayed as a SIMILE timeline by Diane Staheli.

============================================================================
ROBOT code changes early on Weds, Sep 8, 2010:

*.  videofunc::update_photo_importance_in_database() takes in the URL for a
particular photo.  It generates and executes a SQL update command that
resets the importance value for the row within the photos table of the TOC
database corresponding to the input URL.

*.  MovieServer::flag_frames() parses starting and stopping video frame
numbers entered by a user along with an importance value.  It updates the
corresponding entries within the photos table of the TOC database with the
input importance information.

*.  movie_player::saveAnno() now pops open alert message indicating
importance setting for flagged frames.

................

*.  Starting to update world annotation handling methods in AnnotationServer.

................

*.  Eliminated experiment_ID member of AnnotationServer class.

*.  In AnnotationServer::broadcast_world_annotation(), explicitly check
sizes of label, username and description before attempting to broadcast
them via ActiveMQ.

*.  Insertion, modification and deletion of world annotations is starting
to work.

============================================================================
ROBOT code changes early on Tues, Sep 7, 2010:

*.  MovieServer::generate_JSON_response_to_frames_query() now returns
true_framenumber as well as curr_framenumber.

*.  In MovieServer::regenerate_Movie_to_display(), set min_photo_number=0
rather than AC_ptr->get_frame_counter_offset().  Seems to fix video slider
problem.

*.  In AnimationController class, added JUMP_TO_FRAME eState.

...............

*. DataloaderServer::insert_GarminGPS_track_into_database() and
mover_func::parse_GarminGPS_kmlfile() can now parse sailplane KML files
produced by Jan's GARMIN GPS unit within DATALOADER.


============================================================================
ROBOT code changes early on Mon, Sep 6, 2010:

*.  In tech_challenge[video]/Qt/packages, added TOC_metadata_local.pkg,
TOC_metadata_remote_LLAN.pkg & TOC_metadata_remote_private.pkg

============================================================================
ROBOT code changes early on Sat, Sep 4, 2010 & early Sun, Sep 5, 2010:

*.  Program QTPANOPIX pops open a Qt file picker dialog box which allows
the user to easily select a subdirectory of sail plane images for
mosaicing.  QTPANOPIX next queries the user to enter the starting and
stopping image numbers for photos to be mosaiced as well as the image
number skip.  Scanning through the subdirectory containing all input JPEG
images, this program generates and executes a unix command which copies the
requested mosaic photo constituents to a subdirectory of
/data/tech_challenge_local/pano_pix/.

*.  Overhauled VPLAYER and QTVIEWMOVIE so that both can be used to play
video clip sequences not entered into the TOC database.

*.  Wrote up procedure for generating mosaics using VPLAYER, PANOPIX &
AUTOPANOPRO.

*.  Followed Delsey's suggestion and linked AutopanoPro to autopanopro in
/usr/local/bin.

*.  videofunc::append_counter_to_image_filenames() takes in the name for
some image filename which does not initially explicitly contain image
counter information (e.g. droid and Axis image filenames are in this
category).  It generates a new image filename with an "_###" counter field
preprended before the ".jpg" or ".png" suffix.  The original image file is
moved into an "orig_data/" subdir of the original image directory.  The
renamed image file is left within the original image directory.

 
*.  AnimationController::store_ordered_image_filenames() can now handle
input image sequences which are temporally ordered yet do not have
filenames of the form XXXX-NNN.jpg.

*.  Added AXISIMAGE & GPSCAMIMAGE SensorTypes to DataloaderServer class.

*.  Can now ingest Axis & GPS camera imagery into photos table of TOC database.

*.  ISDS demos and standard pgms almost work OK as of Sun, Sep 5 at 5:45 am
am on ROBOT laptop (pfiles9_5a.tgz). But Bluegrass demo does NOT work due
to SKS database connection failure!

*.  In order to make GPS track & video clip selection much easier for human
analysts, append platform label to mission label within Mission Selector
for both DATALOADER & BLUETRACKER.


*. MovieServer::deduce_movie_params_from_frame_files() assumes that a set
of temporally ordered video frames reside within input movie_frames_subdir.
It first loads these frames into the STL map of *AnimationController_ptr.
This method next extracts the minimum and maximum image numbers for the
ordered sequence.  It broadcasts this extremal image information.  Finally,
this method resets the AnimationController's frame offset to equal the
minimum image number.

*.  Cleaned up text display for QTD7FRAMES and QTFLIPFRAMES.

============================================================================
ROBOT code changes early on Fri, Sep 3, 2010:

*.  Eliminated calls to OpenViewerControls() prior to user filling out
fieldtest, mission, platform and sensor IDs in Select Clip menu of Video
tab for BLUETRACKER.  This reversion implements Diane's idea for hopefully
fixing terrible javascript problem.

*.  Append image counter to end of droid image filenames.  Move raw droid
image and text files into a new orig_droid_data/ subdir of original droid
data subdir.

................

*.  videofunc::find_numbered_image_filenames() takes in a subdirectory
which is assumed to hold a temporally ordered sequence of image files.  It
returns an STL string with the names of the image files it finds within the
specified subdir.

*.  AnimationController::store_ordered_image_filenames() takes in a
subdirectory which is assumed to hold a temporally ordered sequence of
image files. The images are assumed to have names of the forms
XXXX-NNNNN.jpg or XXXX_NNNNN.jpg where XXXX may contain any number of
dashes or underscores.  This method fills STL map member
ordered_image_filenames with the true image numbers NNN and the
corresponding image file name.

*.  AnimationController::get_next_ordered_image_filename() searches STL map
member ordered_image_filenames_map for a filename corresponding to the
current true framenumber.  If one exists, this method returns the retrieved
filename.  Otherwise, it returns an empty string.


============================================================================
ROBOT code changes early on Thurs, Sep 2, 2010:

*.  videofunc::extract_droid_image_time_from_metadata_file() takes in the
full path for an image captured via Paul Breimyer's codes operating on a
droid cell phone.  It searches for a corresponding metadata text file also
generated by Paul's codes.  If both files exist, this method extracts and
returns the image's time from the text file.

*.  mains/tech_challenge/DROID_PIX parses the text files generated by Paul
Breimyer's codes running on droid cell phones which accompany output JPEG
images.  SQL commands are generated which insert photo timestamp and
geolocation into the photos table of the TOC database.

*.  Added DROIDIMAGE SensorType to DataloaderServer.h

*.  Eliminated iPhone from Sensors table and replaced Droid with Droid GPS
and Droid camera.

..............

*.  Explicitly set photogroup base URL in GENERATE_PHOTO_HIERARCHY.

*.  DATALOADER can now ingest DROID imagery into photos table of TOC
database.

*.  Starting to be able to view DROID imagery in BLUETRACKER

============================================================================
ROBOT code changes early on Weds, Sep 1, 2010:

*.  Program PANO_PIX queries the user to enter the starting and stopping
image numbers for photos to be mosaiced as well as the image number skip.
Scanning through the subdirectory containing all input JPEG images, this
program generates and executes a unix command which copies the requested
mosaic photo constituents to a subdirectory of
/data/tech_challenge_local/pano_pix/.

============================================================================
ROBOT code changes early on Tues, Aug 31, 2010:

*.  Added progress bar update info for hockeypuck GPS data upload.

*.  Diane's modifications to viewer controls is partially working in
DATALOADER web app.

...................

*.  Added human-readable timestamp into GPS tracks file output of
GPSDEVICE.

============================================================================
ROBOT code changes early on Mon, Aug 30, 2010:

*.  In Clock::YYYY_MM_DD_H_M_S(), force minute output to be exactly 2
digits in length.  Also, added new n_secs_digits parameter with default
value of 2.

*.  Pop open video controls window when user presses video tab.

....................

*.  Moved first frame, last frame and n_images display out of
viewer_controls window into video tab of bluetracker window.  

*.  GPSDEVICE now again exports lon,lat rather than UTM geocoords.

============================================================================
ROBOT code changes early on Sun, Aug 29, 2010:

*.  tech_challenge/Qt/QTD7FRAMES utilizes FFMPEG to decompose an input D7
.flv or .mkv file into individual JPG frames.  It prompts the user to enter
a D7 flash movie using a Qt file finder widget.  QTD7FRAMES generates an
output subdirectory within the input subdirectory with the same basename
and _jpg_frames suffix.  JPG frames are written to this output subdir.

*.  tech_challenge/Qt/QTFLIPFRAMES utilizes FFMPEG to decompose an input
Flip .mp4 file into individual JPG frames.

*.  ISDS demos and standard pgms almost work OK as of Sun, Aug 22 at 7:47 am
am on ROBOT laptop (pfiles8_29c.tgz). But Bluegrass demo does NOT work due
to SKS database connection failure!

============================================================================
ROBOT code changes early on Sat, Aug 28, 2010:

*.  Programs mains/tech_challenge/EXTRACT_FLIPFFRAMES is now more user
friendly.

============================================================================
ROBOT code changes early on Fri, Aug 27, 2010:

*.  Expanded upon README.sync_clock_w_gps

*.  Generalized search for SD card in GPSDEVICE and CAPTURE_WEBCAM_IMAGES.

============================================================================
ROBOT code changes made on Tues, Aug 24, 2010:

*.  Added DROIDGPS SensorType to DataloaderServer class.

*.  Added GPS_AND_IMAGE as new SensorType in AnnotationServer class.

*.  Can now upload droid GPS data to TOC database.

*.  In movieplayer.js, added getNframesAndCurrFramenumber() in response to
Diane Staheli's request.

============================================================================
ROBOT code changes made early on Mon, Aug 23, 2010:

*.  Tried to carefully go through entire source tree and make sure
YYYY_MM_DD_H_M_S() now takes 3 rather than 2 explicit input arguments.

*.  mover_func::parse_droid_GPS_logfile() extracts instantaneous time
stamp, longitude, latitude and altitude values from the GPS logfile
generated by Paul Briemyer's program running on the droid phones.  After
alpha-filtering the raw geocoordinates, this method fills input
*gps_track_ptr with GPS metadata.

.................

*.  Fixed DROID_GPS so that it can again parse Paul's droid GPS log files.

.................

*.  moverfunc::parse_droid_GPS_logfile() extracts time stamp, longitude,
latitude and altitude values from the GPS logfile generated by Paul
Briemyer's program running on the droid phones.  After alpha-filtering the
raw geocoordinates, this method fills input *gps_track_ptr with GPS
metadata.

============================================================================
ROBOT code changes made on Sat, Aug 21, 2010 & Sun, Aug 22, 2010:

*.  Added KenLee subdir to mains/afghanistan containing Ken King Ho Lee's
Masters thesis and matlab codes for automatic circle and ellipse flight
path planning.

*.  Starting to instrument DataloaderServer and videofuncs methods with
progress update functionality.

*.  With lots of help from Delsey, we learned the hard and painful way that
Live Bookmarks updating within firefox must be DISABLED in order for thin
client polling to not be messed up.  Live Bookmarks automatically reload
themselves on a regular basis.  Deleting all live bookmarks will stop these
connections from being made.

*.  Modified prototype-1.6.0.3.js script in
webapps/dataloader,bluetracker,LOST/scripts to incorporate Ajax call
timeout functionality.  Also modified jmslog.js in each of these subdirs to
explicitly implement timeout. With these changes, polling via ActiveMQ
appears to be robust!

*.  Eliminated frame_time.js from dataloader/scripts subdir.

*.  Video window pops open in Frame Calibration tab of Dataloader webapp.

*.  Progress bars added to Data upload and Frame Calibration tabs of
Dataloader webapp.

*.  ISDS demos and standard pgms almost work OK as of Sun, Aug 22 at 5:23
am on ROBOT laptop (pfiles8_22a.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

*.  Programs mains/tech_challenge/EXTRACT_D7FRAMES,CAPTURE_WEBCAM_IMAGES &
GPSDEVICE are now more user friendly.  The latter two programs also try to
write output files to mounted SD cards.

*.  We empirically found that we could not create subdirectories on SD
cards named like webcam_images_2010-08-22_8:48:31.00.  But if the colons in
the time stamp part of the directory name are replaced by underscores, we
can create the folder on an SD chip.  So we wrote an overloaded version of
Clock::YYYY_MM_DD_H_M_S() that allows for this naming flexibility.

============================================================================
ROBOT code changes made on Thurs, Aug 19, 2010:

*.  Sensor dropdown lists on GPS and VIDEO tabs of BLUETRACKER now are
restricted to GPS or camera sensors.  

............................

*.  New mission entry tab in DATALOADER app now allows user to enter SDcard
and notebook IDs.

============================================================================
ROBOT code changes made early on Weds, Aug 18, 2010:

*.  Minor modifications to DataloaderServer to send back confirmation for
display after user uploads metadata information.

*.  Minor modifications to dataloader.html and datahandling.js to display
metadata upload confirmation.

.............................

*.  mover_func::alpha_filter_raw_GPS_data() smooths noisy GPS track with
simple alpha filter.

*.  mover_func::parse_Quad_GPSlog_output() parses the GPS/IMG file
generated by the Pelican quad-rotor computers.  It fills input
*Quad_track_ptr with this Quad GPS information.

*.  Added QUADGPS as sensortype to DataloaderServer class.

============================================================================
ROBOT code changes made on Mon, Aug 16, 2010 & Tues, Aug 17, 2010:

*.  Annotation[Movie]Server now returns info within JSON string if no
track[imagery] exists within TOC database corresponding to specified input
params.  datahandling::pick_mission() now generates alerts in these cases.

*.  BLUETRACKER starting to work with identifying GPS tracks via mission
and sensor IDs.

============================================================================
ROBOT code changes made on Sun, Aug 15, 2010 & early Mon, Aug 16, 2010:

*.  In mains/tech_challenge/GPSDEVICE, the archived statevector was
originally being calculated via a call to
gps_track_ptr->get_interpolated_statevector().  On 8/15/10, we realized to
our horror during a Burlington RC field test that no GPS information was
actually being written to the output archive file.  So we replaced this
previous (and almost surely incorrect!) call with a statevector constructor
which simply uses raw GPS information...
      
*.  In mains/tech_challenge/SYNC_CLOCK_W_GPS, relaxed max horiz_dilution to
2.1 or n_satellites >= 5 in order for GPS lock to be acceptable.

*.  Added mains/tech_challenge/EXTRACT_D7FRAMES.cc to repository.

*.  In 2 videofunc::retrieve_photo_metadata_from_database() methods,
now explicitly check whether field_array_ptr==NULL.  If so, return from
these void methods.

============================================================================
ROBOT code changes made on Sat, Aug 14, 2010; Sun, Aug 15, 2010:

*.  gps::hideGPStrack() destroys GPS track feature from GPSTracksLayer.

*.  Added ORDER BY id to SQL command produced by
videofunc::generate_retrieve_photos_SQL_command() 

*.  Separated off video player controls into secondary window in
BLUETRACKER.

*.  In all mover_func::retrieve____from_database() methods, now explicitly
check whether returned Genarray<string>* ptr is NULL.  If so, these methods
simply return.

*.  Eliminated gis_database::select_data() which was an exact copy of
database::select_data().

*.  database::select_data() now always returns field_array_ptr (which can
be NULL).

*.  In track::broadcast_statevector() #3, now broadcast get_label_ID() as
value for 'ID' key and get_ID() as value for 'Secondary_ID' key

*.  Added mains/tech_challenge/extract_flip_frames.cc to repository.

*.  Alert containing mission ID and sensor label displayed after user
uploads data in New Data tab of Dataloader app.

*.  ISDS demos and standard pgms almost work OK as of Sun, Aug 15 at 8:53
am on ROBOT laptop (pfiles8_15c.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

============================================================================
ROBOT code changes made late on Weds, Aug 11, 2010 and early Thurs, Aug 12,
2010:

*.  MovieServer::retrieve_movie_frames() first recovers the name of the
subdirectory in which a sequcne of PNG or JPG images for a particular
mission and sensor reside.  It then scans through all these files and
determines the min and max frame numbers.  The starting frame number and
total number of images is stored within *AnimationController_ptr.  Finally,
this method attempts to correlate frame numbers and local world times based
upon database records.

*.  Mission ID in Map Positioning section automatically filled in when user
selects video clip mission metadata.

*.  Added Movie_ptr member to MovieServer class along with set method.

*.  MovieServer::regenerate_Movie_to_display() destroys any existing
texture rectangle and regenerates it using the first_frame_filename.  It
also destroys any existing movie and regenerates a new movie from the
texture rectangle.  This method returns a pointer to the new Movie object.


============================================================================
ROBOT code changes made early on Weds, Aug 11, 2010:

*.  In mover_func::parse_insparse_output(), ignore any MIDG output
correspond to status value less than min_MIDG_status=100.


============================================================================
ROBOT code changes made early on Tues, Aug 10, 2010:

*.  Select video clip button on VIDEO tab of BLUETRACKER now launches a Qt
file dialog box which lets the user select a folder with images.

*.  QTVIEWMOVIE now waits until MovieServer receives a
SELECT_MOVIE_FRAMES_SUBDIR url from Bluetracker thin client.  It then pops
open a Qt dialog box and an OSG video player window.

.................

*.  DataloaderServer::calibrate_frames_to_local_world_time() takes in a
starting and stopping set of frame numbers as well as local time stamps.
It linearly interpolates/extrapolates these user specified data to assign a
timestamp to all frames within the current video clip.  This method updates
the timestamp column within the photos table of the TOC database.

*.  Eliminated redundant AnimationController_ptr members of
AnnotationServer and DataloaderServer classes.  This member already exists
within BasicServer class from which these two inherit.

*.  BLUETRACKER can now pull timestamps from photos table of TOC database.
If timestamps exist, they're pulled into and displayed within BLUETRACKER
automatically when user loads a new set of video frames.

============================================================================
ROBOT code changes made on Mon, Aug 9, 2010:

*.  Fieldtest, mission, platform selection code copied from New Data tab
onto Calibration tab within dataloader webapp.

*.  videofunc::retrieve_photo_metadata_from_database() takes in mission and
sensor IDs.  It queries the photos table of the TOC database for entries
with matching mission and sensor IDs.  This method returns STL vectors
containing output photo IDs and filenames which match the input parameter
specifications.

*.  videofunc::update_photo_timestamps_in_database() takes in a calculated
set of photo timestamps and their corresponding photo IDs as well as
mission and sensor IDs.  It generates a set of SQL UPDATE commands which
modifies the timestamp column of the photos table in the TOC database.

*.  EXTRACT_D7FRAMES now generates JPG rather than PNG files.  Image quality
similar but file size about 5X smaller.

..................


============================================================================
ROBOT code changes made late on Fri, Aug 6, 2010; Sat, Aug 7, 2010; Sun,
Aug 8, 2010; early Mon, Aug 9, 2010:

*.  Eliminated dependence of mover_func::
retrieve_track_points_metadata_from_database() upon fieldtest_ID,
platform_ID and sensor_ID. 

*.  In track::get_interpolated_statevector(), changed returned
interpolation_successful_flag from true to false if input time exceeds raw
track stop time.

*.  MovieServer::relate_frames_to_local_world_time() now handles case where
user doesn't enter secs entry.

*.  videofunc::insert_photo_metadata_into_database() takes in an already
opened GIS database along with metadata for multiple photos within input
STL vectors.  It retrieves an STL vector filled with SQL insert commands.
This method then has the GIS database execute the insert commands to
populate the photos table of the TOC database with imagery metadata
information.

*.  mover_func::get_fieldtest_date() takes in some selected_fieldtest_ID and
returns a string containing the fieldtest's date in YYYY-MM-DD form.

*.  mover_func::parse_insparse_output() takes in a 42-column text file
generated by INSPARSE.EXE from MIDG binary output.  It extracts the MIDG's
GPS timestamp, geoposition and geo-orientation.  This MIDG metadata is
saved into *MIDG_track_ptr.

*.  Can now insert MIDG metadata generated by INSPARSE.EXE into
track_points table of TOC database.

*. mover_func::retrieve_fieldtest_mission_platform_metadata_from_database()
queries the fieldtest, mission and platform tables in the TOC database for
correlated labels and IDs returned in increasing chronological order.

*.  In LatLongGrid::initialize() #2, set northern_hemisphere_flag based
upon maximal corner's lon & lat.

*.  Downloaded World Magnetic Model WMM2010 coeffs and updated
/astro_geo/WMM.COF.  

*.  ISDS demos and standard pgms almost work OK as of Mon, Aug 9 at 7:50 am
on ROBOT laptop (pfiles8_9b.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

============================================================================
ROBOT code changes made early on Fri, Aug 6, 2010:

*.  Added dataloader/scripts/data_handling.js to repository.

*.  Added "_" in addition to "-" and "." in search list for input filenames
within videofunc::find_min_max_photo_numbers() &
texture_rectangle::read_next_photo().

................

*.  mains/tech_challenge/KMLGPSPARSER is a specialized utility program
which takes in a KML file generated by a GPS unit.  It calls gpsbabel in
order to convert the KML output to a human-readable text file.  This
program then parses the text file and extracts GPS data as a function of
GPS time.  KMLGPSPARSER generates an output GPS track file whose form
matches that produced by program GPSDEVICE.

*.  Added README.midg to repository

============================================================================
ROBOT code changes made early on Thurs, Aug 5, 2010:

*.  Pass fieldtest_ID and platform_ID to databasefunc::insert_mission()

...............

*.  Mission ID returned by DataloaderServer when new mission created.

============================================================================
ROBOT code changes made early on Weds, Aug 4, 2010:

*.  Include gps.js in GEOALIGN.html.

*.  Separated off webapps/dataloader from webapps/bluetracker into its own
subdir.  

*.  Tried moving several tomcat modules into /webapps/common

*.  Added tabs to dataloader webapp.

.....................

*. mover_func::parse_GPS_logfile() extracts instantaneous time stamp,
longitude, latitude, altitude, fix_quality, n_satellites, horizontal
dilution values.  After alpha-filtering the raw geocoordinates, this
program fills input *gps_track_ptr with GPS metadata.

*.  Dataloaderserver::select_file_via_GUI() instantiates and pops open a
Qt dialog window which allows a user to easily select a GPS track file to
import.  The full path for the selected filename is returned by this
method.

============================================================================
ROBOT code changes made on Tues, Aug 3, 2010:

*.  Mission time now incorporated into mission label display in GPS tab for
Bluetracker app

*.  Metadata uploading for field tests, missions, platforms and sensors
into TOC database starting to work.

*.  Added vector<rpy> roll_pitch_yaw member to track class along with get
methods.

============================================================================
ROBOT code changes made on Mon, Aug 2, 2010 & early Tues, Aug 3, 2010:

*.  Retrieval of Fieldtest, Mission, Platform and Sensor metadata from TOC
database starting to work in GPS tab of bluetracker!

*.  Added Delsey's revised SQL command to retrieve fieldtest date which is
now displayed with fieldtest label.

*.  Added DataloaderServer class to repository.

============================================================================
ROBOT code changes made on Sat, July 31, 2010; Sun, Aug 1, 2010

*.  Program PARSE_MIDG is a specialized utility for parsing text output
generated by the windows application INSPARSE.EXE.  When we run this latter
program via the WINE emulator, it converts binary MIDGE output to
human-readable text.  PARSE_MIDG then converts the the text file into SQL
statements which insert MIDG metadata into the track_points table of the
TOC database.

*.
moverfunc::retrieve_fieldtest_mission_platform_sensor_metadata_from_database()
executes Delsey's SQL command which queries the track_points table from the
TOC database for fieldtest, mission, platform and sensor labels and IDs.

*.  AnnotationServer::retrieve_GPS_tracks_metadata() queries the trackpoints
table in the TOC database for fieldtest, mission, platform and sensor
metadata.  The results are returned in a JSON string.

*.  Added README.sync_clock_w_gps to repository.

*.  mains/tech_challenge/MULTI_WEBCAMS can capture individual stills from
one of multiple external webcams attached via USB ports to a computer.  It
generates a time-stamped subdirectory within /data/tech_challenge/ to hold
JPEG frames captured via FFMPEG from a webcam.  FFMPEG assigns a unique
name to each captured JPEG frame.

*.  ISDS demos and standard pgms almost work OK as of Sun, Aug 1 at 11 
am on ROBOT laptop (pfiles8_1c.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

============================================================================
ROBOT code changes made early on Fri, July 30, 2010:

*.  Added more functionality to ladar thin client.

*.  Clock::GPS_time_to_elapsed_secs() takes in GPS_week_number and
secs_into_GPS_week.  It computes the number of secs elapsed since the GPS
reference date [6 Jan 1980 at 0 hour].  This method returns the
corresponding UTC time measured in secs since Jan 1, 1970 at midnight.

============================================================================
ROBOT code changes made early on Thurs, July 29, 2010:

*.  Edited README.Allie.

......................

*.  Reworked GPS trackpoint insertion and retrieval from new TOC database
in mover_funcs namespace and track class.


============================================================================
ROBOT code changes made on Weds, July 28, 2010:

*.  Auto-indented all javascript files in bluetracker/scripts.

*.  mover_func::UTC_timestamp_to_secs_since_epoch() converts UTC time stamp
strings retrieved from the track_points table in the expt_metadata database
into elapsed secs since reference epoch.

......................

*.  Starting to see GPS tracks displayed as polylines in OpenLayers.

......................

*.  LOSServer::generate_avg_occlusion_geotif() takes in a ground ROI
bbox. It instantiates R, G & B twoDarrays to hold color information
corresponding to time-averaged visibility within ROI ground cells.  These
color twoDarrays are output via a raster_parser object to a geotif file
which has valid bbox header information.

============================================================================
ROBOT code changes made early on Tues, July 27, 2010:

*.   Moved generate_insert_track_point_SQL_command() out of track class
into mover_funcs namespace.

*.  Added fix_quality,n_satellites & horiz_dilution STL vector members to
track class.

*.  track::set_posn_velocity_GPSquality() is intended to accept raw data
from an input GPS sensor.  In particular, it takes in threevector q which
contains the current GPS fix quality, number of visible GPS satellites and
horizontal dilution of precision:

*.  GPSDEVICE no longer outputs entry to archive file if satellite lock is
lousy.

.................

*.   Generalized and moved retrieve_track_points_metadata_from_database()
from track class into mover_funcs namespace.

*.  LOSServer::generate_JSON_response_to_generate_avg_occlusion_geotif()
returns a JSON string to the thin client which contains the full path for a
geotif containing average ROI occlusion fractions.  The message also
contains LineString written in GEOJSON format corresponding to the image's
georegistered bbox.
 
============================================================================
ROBOT code changes made on Mon, July 26, 2010:

*.  Renamed mains/tech_challenge/set_clock.cc as sync_clock_w_gps.cc

*.  AnnotationServer::generate_JSON_response_to_image_geoalignment() now
includes the full pathname for the geoaligned output image.

......................

*.  Added /usr/include/gdal to include path in config.pro.

*.  AnnotationServer::geoalign_image() now returns tomcat subdir where
output PNG/TIF files are written.

......................

*.  Added MAIN_PHOTOSYNTH_DEMO_DIR to Makefile and mains/build_all.

*.  Fixed mains/photosynth/TOUR.cc so that this pgm compiles again.

============================================================================
ROBOT code changes made on Sat, July 24, 2010 & Sun, July 25, 2010:

*.  Added GPS track locking to bluetracker

*.  Split off new GEOALIGN html, desktop and icon files within bluetracker
webapps subdir.  Do NOT attempt to run Allie's orthorectification within
main bluetracker app anymore.

*.  ISDS demos and standard pgms almost work OK as of Sun, Jul 25 at 8:00
am on ROBOT laptop (pfiles7_25a.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

*.  Can now generate output PNG and TIF files containing transparent alpha
layers.

*.  Tried to change all get methods in texture_rectangle class to const.
Also changed few get methods to const in VidFile class.

*.  ViewerManager:: set_thick_client_window_position() sets the Window's X
and Y origin coordinates to values appropriate for 30" monitor and LOST
laptop screens.

*.  Added PointCloudsGroup::get_ntotal_points();

*.  Creating completely new thin client counterpart for QTVIEWLADAR.

============================================================================
ROBOT code changes made early on Fri, July 23, 2010:

*.  videofunc::find_min_max_photo_numbers() now works with just base
filenames when searching for extremal photo numbers.

*.  MovieServer::reset_movie_params() now forces actual framenumber to
remain within valid interval [first_framenumber,last_framenumber] :

*.  AnimationController works internally with curr frame counter which
ranges from 0 to n_images.  True frame = curr frame + counter_offset.
Fixed some frame counter/timing logic bugs in MovieServer and
AnimationController classes.

============================================================================
ROBOT code changes made on Weds, July 21 2010 & Thurs, July 22, 2010:

*.  Added AnimationController_ptr member to AnnotationServer class along
with set method.

*.  Initialize minU, minV and maxV in
texture_rectangle::initialize_member_objects().

*.  Explicitly set max_U in texture_rectangle::import_photo_from_file()

*.  Starting to generate warped version of HAFB video still image.

*.  videofunc::compute_image_corner_world_coords() takes in a set of image
plane points and their corresponding lon-lat tiepoints in STL vectors UV
and XY respectively.  After converting XY from lon-lat to UTM
geocoordinates, this method computes the homography which maps image plane
onto the world plane.  It then projects the image's corner points onto
their world counterparts.

*.  videofunc::compute_extremal_easting_northing() takes in the
geocoordinates for an orthorectified image's corners.  It returns the
extremal easting and northing values among these 4 geocoords.  This method
also computes the width and height of a new image which encloses the
orthorectified image as a bounding box.

============================================================================
ROBOT code changes made early on Tues, July 20, 2010:

*.  AnimationController::get_world_time_string() returns YYYY_MM_DD_H_M_S
either in UTC or local time depending upon input bool UTC_flag.

*.  Added display_UTC_flag bool member to ImageNumberHUD class along with
set method.

*.  Eliminated world_time_label member from AnimationController class.

.............  

*.  Fixed initialize_member_objects in AnimationController class.

.............  

*.  Overloaded genmatrix::pseudo_inverse() works with current genmatrix A.
It returns (Atrans A)**-1 Atrans which yields the least- squares solution
to A x = b.

*.  Starting to compute affine transformation needed to warp geoaligned
image onto rectangle which can be displayed in OpenLayers.

============================================================================
ROBOT code changes made on Mon, July 19, 2010:

*.  Added messenger_ptr member to AnimationController class along with set
method.

*.  Clock::timestamp_string_to_elapsed_secs() takes in a timestamp string
of the form YYYY_MM_DD_H_M_S as well as a bool flag indicating UTC or local
time.  This method returns the corresponding number of seconds elapsed
since the reference epoch.

============================================================================
ROBOT code changes made on Sun, July 18, 2010 & early Mon, July 19, 2010:

*.  videofunc::broadcast_video_params() takes in the starting & stopping
image numbers for some video clip as well as the total number of frames.
It broadcasts this metadata to ActiveMQ messenger *messenger_ptr.

*.  Frame scrubber for vplayer is starting to work.

============================================================================
ROBOT code changes made on Sat, July 17, 2010; Sun, July 18, 2010:

*. homography::compute_homography_matrix() now automatically calls
compute_homography_inverse().

*.  AnnotationServer::geoalign_image() extracts tiepoint pair coordinates
from a world map and corresponding image.  It solves for the
inverse homography which maps the image onto the map.  This method
then computes and returns the lon-lat geocoordinates for the
image's lower left and upper right corners.  

*. Program INSERT_GPS parses the GPS track file generated by a program
GPS_DEVICE.  It extracts instantaneous time stamp, longitude, latitude and
altitude values.  After alpha-filtering the raw geocoordinates, this
program generates a SQL script which can be used to insert the GPS metadata
into the track_points table of the expt_metadata postgis database.

*.  Added LL Pavilion entry to global.js for blue force tracker web app.

*.  Added Clock::set_year_month_day(int year,int month,int day).

*.  Extensively overhauled Clock class.  UTM_zone_time_offset is now
independent of local_daylight_savings_flag.  Added UTC_to_local_hour() and
local_to_UTC_hour() which takes local_daylight_savings_flag into account.

*.  Added GPS icon to desktop.

*.  Enabled Qt file dialog in QTVIEWMOVIE in order to obtain full path for
selected subdirectory holding video frames.

*.  Clock::reset_local_computer_time() runs the local computer's date
command to reset the computer's clock to the current Clock object's local
time.  We wrote this utility method in July 2010 in order to synchronize a
local machine's clock with GPS time read in via a GPS unit attached as a
USB device.  If the local machine's clock is successfully reset, this
boolean method returns true. This method can only be run by the root
superuser.

*. SET_CLOCK is a stripped variant of GPSDEVICE.  It attempts to establish
a connection to GPS satellites via a GPS unit attached as a USB device.  If
a satellite connection is established, this program resets the computer's
local time to GPS time.  SET_CLOCK must be run by the root superuser within
a tcsh shell with Peter's .cshrc environmental variables enabled.

*.  In OBSFRUSTAGROUP::load_thumbnail_photo(int OBSFRUSTUM_ID) we need to
reset the video filename to the full resolution photo filename so that
program VIEWBUNDLER will reload the full photo if an OBSFRUSTUM is viewed
more than once.

*.  ISDS demos and standard pgms almost work OK as of Sun, Jul 18 at 8:45
am on ROBOT laptop (pfiles7_18b.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

*.  Generalized PassesGroup and texture_rectangle classes to handle MP4 as
well as mp4 suffix.

============================================================================
ROBOT code changes made early on Fri, July 16, 2010:

*.  Generalized videofunc::find_min_max_photo_numbers(),
texture_rectangle::read_next_photo() and
videofunc::get_next_photo_filename() to handle complex filenames
containing several dashes.

============================================================================
ROBOT code changes made early on Thurs, July 15, 2010:

*.  Started to add AnnotationServer::georegister_image() method to handle
Allie's map alignment tab in blueforce tracker.

........................

*.  Added baud_rate member to serial_device class along with input param
for constructor.

============================================================================
ROBOT code changes made early on Weds, July 14, 2010:

*.  ISDS demos and standard pgms almost work OK as of Weds, July 14 at 6:11
am on ROBOT laptop (pfiles7_14a.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

*.  Created global xyz_map_ptr and cameraID_xyz_map_ptr in videofuncs
namespace.  

............

*.  Added MAIN_TECH_CHALLENGE to makefile.

............

*.  Added readData_into_binary_file() method to serial_device class.

============================================================================
ROBOT code changes made on Mon, July 12, 2010:

*.  Updated ImageServer class to take advantage of extra fields broadcast
by newer iPhones which Ross recently incorporated into his client.

*.  imageservertest can now take iPhone GPS signal and rebroadcast it via
ActiveMQ to blueforce tracker.

============================================================================
ROBOT code changes made on Sat, July 10, 2010, Sun, July 11, 2010 & early
Mon, July 12, 2010:

*.  Added new MovieServer class to src/Qt/web.

*.  Added subdir mains/video/Qt to repository.

*.  mains/video/VIDEO2PNGS calls ffmpeg to decompose an input movie file
into constituent video frames as PNG files.

*.  Added world_time_label member along with
set_world_time_label_to_local() to AnimationController class.

*.  ISDS demos and standard pgms almost work OK as of Mon, July 12 at 7:05
am on ROBOT laptop (pfiles7_12a.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

============================================================================
ROBOT code changes made early on Fri, July 9, 2010:

*.  Added more members to LadarServer class.

============================================================================
ROBOT code changes made on Thurs, July 8, 2010:

*.  LOSMODELSGROUP::get_interpolated_groundtarget_visibility_flag() takes
in continuous (x,y) UTM coordinates for some point within a skymap as well
as a continuous azimuthal heading angle for the sensor measured in degrees.
It also takes in discrete index g labeling a particular ground target.  If
the skypoint lies inside of pre-calculated skymaps, this method returns the
visibility flag averaged over the two discrete heading twoDarrays.

This method is a rough approximation for the 3D triple bilinear
interpolation implemented by Ken Lee for automatic elliptical flightpath
determination.

*.  Program VPLAYER is an OSG based viewer for photographs and video
imagery.  It is a variant of VIDEO intended specifically to play temporal
sequences of video frame stills.

*.  Started adding new LadarServer class to src/Qt/web/

============================================================================
ROBOT code changes made on Tues, July 6, 2010, Weds, July 7, 2010 and early
Thurs, July 8, 2010:


*.  Made vector<twoDarray*> target_skymap_twoDarray_ptrs a member of
LOSMODELSGROUP class.  No longer pass this STL vector around as parameter
of various methods.  Also, explicitly delete any prior contents of this STL
vector in LOSMODELSGROUP::initialize_skymaps().

*.  Eliminated redundant last_framenumber member of AnimationController
class in favor of existing first_framenumber and nframes members.

*.  ISDS demos and standard pgms almost work OK as of Thurs, Jul 8 at 6:47
am on ROBOT laptop (pfiles7_8a.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

*.  Eliminated STL vector target_skymap_twoDarray_ptrs member of
LOSMODELSGROUP in favor of STL map target_skymap_map_ptr.  Latter
explicitly depends upon azimuthal heading angle index t and ground target
index g.
  
============================================================================
ROBOT code changes made on Sun, July 4, 2010 & Mon, July 5, 2010:

*.  Moved get_next_photo_filename() out of texture_rectangle class into
videofuncs namespace.

*.  videofunc::find_min_max_photo_numbers() takes in a subdirectory which
is assumed to hold video frames named like XXXX-NNNNN.png.  It scans over
all integer NNNNN values and returns the minimal and maximal number values
for all the video frames.

*.  VPLAYER now automatically sets min and max video frame numbers.

*.  Added Qt subdir to mains/OSG.  Starting to develop qtladarviewer.cc

============================================================================
ROBOT code changes made early on Thurs, July 1, 2010:

*. Eliminated redundant last_imagenumber member of texture_rectangle class
in favor of existing first_imagenumber and Nimages members.


============================================================================
ROBOT code changes made early on Weds, Jun 30, 2010:

*.  Modified update command for world annotations to handle altered lon,lat
geocoords.

*.  In texture_rectangle::import_photo_from_file(), call
set_video_filename(photo_filename);

*.  G99VD::get_future_photo_filename() takes in the current photo
filename which is assumed to be of the form XXXX-NNNN.suffix .  If input
bool prev_number_flag==true [false], this method returns a new filename
where the index number is decreased [increased] by one.

*.  Moved few lines out of Movie::reset_displayed_photograph() into
G99VideoDisplay::reset_texture_content()

============================================================================
ROBOT code changes made early on Tues, Jun 29, 2010:

*.  In WebServer::extract_KeyValue_pairs(), we finally figured out how to
to convert encoded URL values into conventional STL strings where '+' is
replaced with ' ' and percent characters are returned to their unencoded
forms.

.....................

*.  Added curl_ptr member to WebServer class along with initialization and
destruction libCurl calls.

*.  As of 6/29/10, we still cannot get QUrl::fromPercentEncoding() to
successfully decode %23FF00FF as #FF00FF (magenta coloring).  So we perform
a libCurl call to decode URL encoded values.

.....................

*.  AnnotationServer::broadcast_world_annotation() emits an ActiveMQ
message containing annotation metadata so that all thin clients can be
updated.

============================================================================
ROBOT code changes made on Fri, Jun 25, 2010; Sat, Jun 26, 2010; Sun, Jun
27, 2010:

*.  Working on inserting annotations from thin client into
world_annotations table in expt_metadata database.

*.  Added display_UTC_flag argument with default true value to
Clock::YYYY_MM_DD_H_M_S().  If false, hour value corresponds to local
rather than UTC time.

*.  database::get_n_table_rows() takes in the name for some table within
the current database.  It counts and returns the total number of rows in
the table.

*.  Added viewer_messenger_ptr member to AnnotationServer along with set
method.  AnnotationServer::insert_world_annotation() now broadcasts message
contents via *viewer_messenger_ptr.

*.  ISDS demos and standard pgms almost work OK as of Sun, Jun 27 at 7:40
pm on ROBOT laptop (pfiles6_27d.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.

============================================================================
ROBOT code changes made on Thurs, Jun 24, 2010:

*.  In LOSServer::set_ground_target_parameters(), altered logic for
extracting numerical indices appearing after Longitude, Latitude and Label
keywords coming from thin client.  

============================================================================
ROBOT code changes made on Tues, Jun 22, 2010:

*.  Added mains/tech_challenge/broadcast_gps to repository.

============================================================================
ROBOT code changes made on Mon, Jun 21, 2010:

*.  mains/tech_challenge/DROID_POINTING parses the pointing log file
generated by a DROID cell phone.  It extracts instantaneous time stamp, az,
pitch and roll values.  After alpha-filtering the raw pointing angles, this
program generates a SQL file containing insert commands so that the
pointing information can be stored in the expt_metadata database.

============================================================================
ROBOT code changes made on Sat, Jun 19, 2010, Sun Jun 20, 2010, and early
on Mon, Jun 21, 2010:

*.  Replaced postgis_database_ptr with gis_database_ptr in videofuncs
methods which store/retrieve photo metadata from databases.

*.  Moved photo neighbor export methods out of videofuncs into jsonfuncs.

*.  Starting to create new Qt server class AnnotationServer.

*.  track::generate_insert_track_point_SQL_command() takes in metadata
associated with a single point in the current track.  It generates and
returns a string containing a SQL insert command needed to populate a row
within the track_points table of the expt_metadata postgis database.

*.  Added constructor geopoint(bool northern_hemisphere_flag,int UTM_zone,
const threevector& east_north_height)

*.  track::write_SQL_insert_track_commands() loops over all points within
the current track.  We assume that the position STL vector has previously
been filled with longitude, latitude and altitude (rather than UTM easting,
northing and altitude) coordinate values.  This method writes SQL insert
commands to the specified SQL_filename which are needed to populate the
photo table of the data_network postgis database.

*.  Eliminated dependence of PHOTO_INFO upon postgis_database in favor of
gis_database.

*.  track::retrieve_track_points_metadata_from_database() takes in
*gis_database_ptr which is assumed to contain an "expt_metadata" database
with a "track_points" table.  It extracts all rows and columns from this
database table.  After sorting the extracted rows according to photo_ID,
this method fills output STL vectors with track metadata.

*.  Added tech_challenge/packages to repository.

*.  databasefunc::retrieve_world_annotations_from_database() takes in
*gis_database_ptr which is assumed to contain an "expt_metadata"
database with a "world_annotations" table.  It extracts all rows
and columns from this database table.  After sorting the extracted
rows according to photo_ID, this method fills output STL vectors
with annotation metadata.

============================================================================
ROBOT code changes made early on Fri, Jun 18, 2010:

*.  mains/tech_challenge/DROID_GPS parses the GPS log file generated by a
DROID cell phone.  It extracts instantaneous time stamp, longitude and
latitude values.  After alpha-filtering the raw geocoordinates, this
program broadcasts the filtered positions so that they can be displayed as
a moving dot within the Blue Force Tracker thin client.


============================================================================
ROBOT code changes made early on Thurs, Jun 17, 2010:

*.  Added GraphicalsGroup_bug_ptr member to GraphicalsGroup class along
with set method.

*.  New version of FFMPEG actually does support video jumping.  But for
Bluegrass Constant Hawk Video, jumping runs excruciatingly slowly!  So
resetting movie frame number in OSGButtonServer::monitor_ROI() effectively
stalls entire Bluegrass demo under new FFMPEG version.  Otherwise,
Bluegrass demo seems to work OK on new Ubuntu 10.4 laptop.

*.  Added colorfunc::RGB_to_RRGGBB_hex(RGB) method;

*.  3 overloaded versions of track::broadcast_statevector() now take
final color arguments with default colorfunc::white values.

============================================================================
ROBOT code changes made early on Tues, Jun 15, 2010:

*.  CAPTURE_WEBCAM_IMAGES now tests for video device rather than assuming
webcam is attached to /dev/video0.

============================================================================
ROBOT code changes made on Mon, Jun 14, 2010:

*.  Added source_ID member to node class along with get method.

*.  GENERATE_PHOTO_HIERARCHY now exports source ID for each node into SQL
files for storing within node table in data_network database.

============================================================================
ROBOT code changes made on Sat, Jun 12, 2010 & Sun, Jun 13, 2010:

*.  Eliminated unnecessary quote_posn search in EXTRACT_OGDF_LAYOUT.

*.  Eliminated photogroup::output_link_to_SQL().

*.  BUNDLER_PHOTOS now exports a SQL file containing photo metadata
information which can be loaded into the photo table of the data_network
database.

============================================================================
ROBOT code changes made early on Weds, June 9, 2010:

*.  GPSDEVICE now searches for GPS device attached to /dev/ttyUSBN where
N=0,1,2,...

............

*.  We learned (the painful and hard way) that strncat calls in
tdp_sub_header_cpp are inconsistent with gcc-4.4.3.  Ross Anderson
uncovered this error in TDP and suggested that we try to somehow append a
\0 to the end of the "endian_length" char array.  Since endian_length is
only used for an error message, we simply comment out the original
dangerous calls to strncat.

============================================================================
ROBOT code changes made on Tues, Jun 1, 2010, Weds, June 2, 2010, 
Sat, Jun 5, 2010 and Sun, Jun 6, 2010:

*.  NYC 1K photosynth demo works OK when pre-calculated photo sizes are NOT
read in.  

*.  Added new mains/tech_challenge subdir to repository.

*.  mains/tech_challenge/CAPTURE_WEBCAM_IMAGES generates a time-stamped
subdirectory within the user's top-level directory to hold 800x600 JPEG
frames captured via FFMPEG from a webcam.  FFMPEG assigns a unique name to
each captured JPEG frame.

*.  Move GPSDEVICE.cc & GPS_SIMULATOR.cc out of mains/src/rasr into
src/tech_challenge. 

*.  Now include colorfuncs.h within graphfuncs.h

*.  In stringfunc::decompose_string_into_substrings(), explicitly declare
vector<unsigned int> char_posn & separator_posn.  Also check for j >=
inputstring.length() rather than j>=inputstirng.length()-1.

*.  Finally gave up on our buggy, unreliable
stringfunc::decompose_string_into_substrings() and replaced with Tokenizer
code taken from
http://oopweb.com/CPP/Documents/CPPHOWTO/Volume/C++Programming-HOWTO-7.html.

============================================================================
ROBOT code changes made on Sat, May 29, 2010 & early Mon, May 31, 2010:

*.  Eliminated sleep(1) call in mains/rasr/GPS_SIMULATOR & GPSDEVICE.

*.  filefunc::chardevexist() returns true if the input character device
(e.g. /dev/ttyUSB0) exists.

*.  In stringfunc::decompose_string_into_substrings(), add sanity check on
index j value:

   if (j==string::npos || j >= inputstring.length()-1) break;

*.  Eliminated VECTHREEVECTOR_MAP type in instantaneous_obs class with
VECTHREEVECTOR_VEC type.  After making this major alteration to this class,
RAYTRACE seems to work OK on Ubuntu10.4 laptop!

*.  Added changes_ROBOT.txt to repository

============================================================================
ROBOT code changes made early on Thurs, May 27, 2010:

*.  Updated GPSDEVICE to emit lon,lat rather than easting,northing
geocoordinates.  

============================================================================
ROBOT code changes made on Weds, May 26, 2010:

*.  Added -I/usr/include/ImageMagick to CXXFLAGS within Makefile.  Need
this modification for Ubuntu10.4 but not Ubuntu8.4.

*.  In GPS_datastream::read_curr_data(), now return if curr_data.size() <
1.

*.  Need to include -lswscale after -lavutil within Makefile for Ubuntu10.4
laptop.

*.  In stringfunc::decompose_string_into_substrings(), now check whether
index k ever exceeds inputstring.length()-1.  If so, terminate while loop
search for separators.

============================================================================
ROBOT code changes made on Monday, May 24, 2010 and Tues, May 25,
2010:

*.  In stringfunc::decompose_string_into_substrings(), must eliminate cluge
of adding extra white space to input string in order to this method to work
OK under gcc 4.4.3.

*.  In Tensor::docopy(), added 

 Indices[r]=m.get_Indices(r);

*.  In Genarray constructor, added explicit checks on positivity for
mdim,ndim.

*.  Copy constructors for twovector and threevector classes now call
genvector(2) and genvector(3) rather than genvector(v) followed by
docopy(v).  Explicitly transfer contents of input v into new two/three
vectors.

*.  In instantaneous_obs::docopy(), call clear for STL maps rather than
deleting and reinstantiating them.  
