// ========================================================================
// Program LOAD_PHOTO_METADATA imports metadata for sets of
// "synchronous time slice" tripod photos from a user-specified text
// file generated by Mike Sheppard's MATLAB codes.  LOAD_PHOTOS
// expects to find this text file sitting within $PLUME_ROOT/metadata/
// .  For example, here are the first few lines from the time-slice
// text file for experiment 2B:

/*

0,0,0,17,1321378370.15,/B/time_slices/t000/IMG_7349.JPG,B/time_slices/t000/IMG_7349_bksub.jpg
1,1,0,18,1321378370.15,/B/time_slices/t000/IMG_4999.JPG,B/time_slices/t000/IMG_4999_bksub.jpg
2,2,0,19,1321378370.15,/B/time_slices/t000/IMG_4154.JPG,B/time_slices/t000/IMG_4154_bksub.jpg

*/

// Tripod photos, their thumbnails and associated masks at a
// particular time slice must exist within common
// subdirectories.  For example, the 10 tripod camera JPG files at
// timeslice 0 reside in 

//   /data/ImageEngine/plume/Nov2011/Day2/B/images/time_slices/t000 . 

// The thumbnail versions of the 10 tripod photos sit in 

//   /data/ImageEngine/plume/Nov2011/Day2/B/images/time_slices/t000/thumbnails

// The smoke mask files corresponding to these 10 photos reside in 

//   /data/ImageEngine/plume/Nov2011/Day2/B/bksub/time_slices/t000

// LOAD_PHOTO_METADATA enters the metadata from Mike's text file into
// the photos table of the plume database.

// 	  ./load_photo_metadata --GIS_layer ./packages/plume_metadata.pkg

// ========================================================================
// Last updated on 9/27/12; 1/9/13; 1/10/13
// ========================================================================

#include <iostream>
#include <map>
#include <string>
#include <vector>

#include "astro_geo/Clock.h"
#include "general/filefuncs.h"
#include "image/imagefuncs.h"
#include "general/outputfuncs.h"
#include "passes/PassesGroup.h"
#include "video/photogroup.h"
#include "postgres/plumedatabasefuncs.h"
#include "osg/osgGIS/postgis_databases_group.h"
#include "general/sysfuncs.h"
#include "templates/mytemplates.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::map;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);
   
   int cloudpass_ID=passes_group.get_curr_cloudpass_ID();
   vector<int> GISlayer_IDs=passes_group.get_GISlayer_IDs();
//   cout << "GISlayer_IDs.size() = " << GISlayer_IDs.size() << endl;

// Instantiate postgis database objects to send data to and retrieve
// data from external Postgres database:

   postgis_databases_group* postgis_databases_group_ptr=
      new postgis_databases_group;
   postgis_database* postgis_db_ptr=postgis_databases_group_ptr->
      generate_postgis_database_from_GISlayer_IDs(
         passes_group,GISlayer_IDs);
//   cout << "postgis_db_ptr = " << postgis_db_ptr << endl;

   int fieldtest_ID=1;	// Nov 2011 South Carolina campaign
   cout << "Enter fieldtest ID:" << endl;
   cout << " (fieldtest_ID = 1 for Nov 2011 South Carolina campaign)"
        << endl;
   cout << " (fieldtest_ID = 2 for Nov 2012 South Carolina campaign)"
        << endl;
   cout << "Note: Make sure this fieldtest has a start_date entered in"
        << endl;
   cout << " the fieldtests table of the plume database!" << endl << endl;
   cin >> fieldtest_ID;

   string start_timestamp;
   plumedatabasefunc::retrieve_fieldtest_metadata_from_database(
      postgis_db_ptr,fieldtest_ID,start_timestamp);
//   cout << "start_timestamp = " << start_timestamp << endl;

   Clock clock;
   cout.precision(13);

   bool UTC_flag=true;
   double epoch=
      clock.timestamp_string_to_elapsed_secs(start_timestamp,UTC_flag);
   int year=clock.get_year();
   string month_name=clock.get_month_name();

   int mission_ID=4;	// Expt 2B
   cout << "Enter mission ID for current plume experiment:" << endl << endl;
   cout << "  e.g. mission ID = 4 for Experiment B on Day 2" << endl;
   cout << "       mission ID = 22 for Experiment H on Nov 2012 Day 2" 
        << endl;
   cout << "  Reminder:  Use PGADMIN3 to look at contents of missions table within PLUME database to find mission IDs" << endl << endl;
   cin >> mission_ID;

   int day_number;
   string experiment_label;
   plumedatabasefunc::retrieve_mission_metadata_from_database(
      postgis_db_ptr,fieldtest_ID,mission_ID,
      day_number,experiment_label);

   string experiment_subdir="/data/ImageEngine/plume/";
   experiment_subdir += month_name+stringfunc::number_to_string(year)+"/Day";
   experiment_subdir += stringfunc::number_to_string(day_number)+"/"+
      experiment_label+"/";
   cout << "experiment_subdir = " << experiment_subdir << endl;
   
   if (!filefunc::direxist(experiment_subdir)) 
   {
      cout << "Photo subdir=" << experiment_subdir << endl;
      cout << "  not found!" << endl;
      exit(-1);
   }

   string images_subdir=experiment_subdir+"images/";
   string bk_subdir=experiment_subdir+"bksub/";
   cout << "images_subdir = " << images_subdir << endl;
   cout << "bk_subdir = " << bk_subdir << endl;

//   string metadata_filename="./metadata/2B_time_slices.txt";
   string metadata_filename="./metadata/mini.csv";
   cout << endl;
   cout << "Enter name of time slice metadata file (generated by Mike Sheppard's" << endl;
   cout << "MATLAB codes) to be imported from ./metadata/:" << endl << endl;
   cin >> metadata_filename;
   metadata_filename="./metadata/"+metadata_filename;
   cout << "metadata_filename = " << metadata_filename << endl;
   if (!filefunc::fileexist(metadata_filename))
   {
      cout << "Error:  Cannot find time slice file " << metadata_filename
           << endl;
      exit(-1);
   }

   filefunc::ReadInfile(metadata_filename);
   string separator_chars=",";
   double prev_epoch_secs=-1;

   int starting_photo_ID=0;
   int photo_ID=starting_photo_ID;

   vector<int> camera_IDs;
   vector<double> epoch_secs;
   int n_lines=filefunc::text_line.size();

   for (int i=0; i<n_lines; i++)
   {
      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         filefunc::text_line[i],separator_chars);
      
      int curr_slice_number=stringfunc::string_to_number(substrings[2]);
      int curr_camera_ID=stringfunc::string_to_number(substrings[3]);

//      double curr_epoch_secs=stringfunc::string_to_number(substrings[4]);
      long lawrence_time=
         stringfunc::string_to_long(substrings[4]);
      double datenum=lawrence_time*1E-10;
      double curr_epoch_secs=clock.datenum_to_elapsed_secs(datenum);

      int UTM_zone=17;	// South Carolina
//      int UTM_zone=19;	// Boston
      clock.compute_UTM_zone_time_offset(UTM_zone);
      clock.convert_elapsed_secs_to_date(curr_epoch_secs);

//      cout << "lawrence_time = " << lawrence_time << endl;
//      cout << "datenum = " << datenum << endl;
//      cout << "epoch secs = " << epoch_secs << endl;
//      cout << "Date = " << clock.YYYY_MM_DD_H_M_S() << endl;

      string curr_photo_basename=filefunc::getbasename(substrings[5]);

      clock.convert_elapsed_secs_to_date(curr_epoch_secs);
      string date_stamp=clock.YYYY_MM_DD_H_M_S();

      string slice_subdir=images_subdir+"time_slices/t"+
//         stringfunc::integer_to_string(curr_slice_number,3)+"/";
         stringfunc::integer_to_string(curr_slice_number,5)+"/";
      string thumbnails_subdir=slice_subdir+"thumbnails/";
      string masks_subdir=bk_subdir+"time_slices/t"+
//         stringfunc::integer_to_string(curr_slice_number,3)+"/";
         stringfunc::integer_to_string(curr_slice_number,5)+"/";

      string URL=slice_subdir+curr_photo_basename;
      string thumbnail_filename="thumbnail_"+curr_photo_basename;
      string thumbnail_URL=thumbnails_subdir+thumbnail_filename;

//      string mask_filename=stringfunc::prefix(curr_photo_basename)
//         +"_bksub.jpg";
      string mask_filename=stringfunc::prefix(curr_photo_basename)
         +"_bksub.bin";
      string mask_URL=masks_subdir+mask_filename;
      
      cout << endl;
      cout << " photo_ID = " << photo_ID 
           << " time slice = " << curr_slice_number 
           << " camera_ID = " << curr_camera_ID
           << " date_stamp = " << date_stamp
           << " URL = " << URL
           << " thumbnail_URL = " << thumbnail_URL
           << " mask_URL = " << mask_URL << endl;

      plumedatabasefunc::insert_photo_metadata(
         postgis_db_ptr,photo_ID,fieldtest_ID,mission_ID,
         curr_slice_number,curr_camera_ID,
         date_stamp,curr_epoch_secs,URL,thumbnail_URL,mask_URL);

      photo_ID++;

   } // loop over index i labeling lines within input metadata file

   string banner="Image & mask URLs for each time slice entered into photos table of PLUME database";
   outputfunc::write_big_banner(banner);
}

