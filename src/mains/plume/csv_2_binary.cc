// ==========================================================================
// Program CSV_2_BINARY reads in comma-separated value files ending
// "txt" suffixes from the present working directory.  Entries within
// these CSV files are assumed to correspond to logs of 3D gaussian
// change-detection probabilities generated by Joe Isaacson.  This
// program parses the input CSV files, quantizes their gaussian
// probabilities and exports a binary array of short (2 byte)
// integers.  The exported binary files are bzipped2 in order to
// minimize their disk usage.

// ==========================================================================
// Last updated on 11/27/12; 11/28/12; 11/30/12
// ==========================================================================

#include  <iostream>
#include  <string>
#include  <vector>

#include "image/arrayfuncs.h"
#include "general/filefuncs.h"
#include "general/stringfuncs.h"
#include "image/TwoDarray.h"

using std::cin;
using std::cout;
using std::endl;
using std::ofstream;
using std::string;
using std::vector;

int main(int argc, char* argv[])
{
   cout.precision(12);

   string subdir="./";
   vector<string> allowed_suffixes;
   allowed_suffixes.push_back("txt");

   vector<string> input_filenames=
      filefunc::files_in_subdir_matching_specified_suffixes(
         allowed_suffixes,subdir);

   for (int i=0; i<input_filenames.size(); i++)
   {
      string input_filename=filefunc::getbasename(input_filenames[i]);
      string banner="Converting CSV file "+input_filename
         +" to compressed binary format";
      outputfunc::write_banner(banner);

      twoDarray* ptwoDarray_ptr=arrayfunc::parse_CSV_file(input_filename);
      short xdim=ptwoDarray_ptr->get_mdim();
      short ydim=ptwoDarray_ptr->get_ndim();
      cout << "xdim = " << xdim << " ydim = " << ydim << endl;

      string prefix=stringfunc::prefix(input_filename);
      string binary_filename=prefix+".bin";
      ofstream binary_outstream;
      filefunc::open_binaryfile(binary_filename,binary_outstream);

      filefunc::writeobject(binary_outstream,xdim);
      filefunc::writeobject(binary_outstream,ydim);

      for (int py=0; py<ydim; py++)
      {
         for (int px=0; px<xdim; px++)
         {
            double q=1.5*log(2*PI)-ptwoDarray_ptr->get(px,py);
            int q_integer=round(q*10);
            q_integer=basic_math::min(q_integer,32767);
            short q_short(q_integer);
            if (q_short < 0)
            {
               cout << "q = " << q 
                    << " q_integer = " << q_integer
                    << " q_short = " << q_short << endl;
            }
            filefunc::writeobject(binary_outstream,q_short);
         }
      }
      delete ptwoDarray_ptr;
      binary_outstream.close();

      filefunc::bzip2_file(binary_filename);
   } // loop over index i labeling input CSV files
   
}

