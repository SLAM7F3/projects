========================================================================
Peter's programs for calculating volumes for "t > 0" plume images and 
generating time-dependent 3D movies.
(Cheat sheet #5 for plume reconstruction project)
========================================================================
Last updated on 8/2/12; 10/26/12; 1/28/13
========================================================================

Preliminaries:

A.  In this README, we define the following root directory:

	plume_root= ~/programs/c++/svn/projects/src/mains/plume/

All of Peter's programs are most easily run from within this subdirectory.
So first change directories to this location:

cd ~/programs/c++/svn/projects/src/mains/plume/

B.  All of the programs on this final cheat sheet can and should be run on
the G47 laptop rather than on the LLGrid virtual machine.  However, we need
to copy some package files previously generated on LLGrid over to the G47
laptop:

  i.  On the LLGrid VM, cd to $plume_root.

 ii.  cd ./bundler/plume/Nov_2011/Day2B (or the analogous folder for some
                                         experiment other than Day2B)
 
iii.  Collect together all of the package files sitting in
$plume_root/bundler/plume/Nov_2011/Day2B by chanting

		tar cvzf packages.tgz ./packages

iv.  Transfer the gzipped tar file from the LLGrid virtual machine to the
G47 laptop:

sftp 155.34.162.189 (or whatever the IP is for the G47 clone)
mput packages.tgz
quit (to leave ftp transfer program)

v.  On the G47 laptop, move the gzipped tar file into its
$plume_root/bundler/plume/Nov_2011/Day2B folder

cd $plume_root/bundler/plume/Nov_2011/Day2B
mv ~/packages.tgz .

vi.  Unpack the gzipped tarfile on the G47 laptop:

tar xvzf packages.tgz


------------------------------------------------------------------------
1.  Execute the run_setparams script

   ~/programs/c++/svn/projects/src/mains/plume/run_setparams

Program SETPARAMS tries to implement Will Lawrence's idea for identifying a
prefered voxel smokiness threshold.  For a specified time slice, this
program loops over smokiness threshold values ranging from 0.05 to 0.95.
It computes and plots reconstructed plume volume as a function of this
threshold setting.  With enough imagination, we see a "knee" in these plots
of otherwise monotonically decreasing function of voxel smokiness threshold
around s_v=0.3.


------------------------------------------------------------------------
2.  Execute the auto-generated run_dbvolume script

   ~/programs/c++/svn/projects/src/mains/plume/run_dbvolume

Program DBVOLUME reads in calibration parameters for N <= 10
fixed tripod cameras from the sensors table of the PLUME database.
DBVOLUME first export package files corresponding to smoke photos
using camera metadata retrieved from plume database. It also reads
in masks from the photos table of the PLUME database. DBVOLUME then
instantiates a VolumetricCoincidenceProcessor volume whose lateral
dimensions are initially set by the cameras' positions.  DBVOLUME
iterates over all voxels within the VCP volume and projects each
into all cameras' image planes.  If the voxel lies inside some
minimal number of the cameras' smoke contours, it is marked with
the number of such contours.  DBVOLUME consequently computes a "3D
visual hull" corresponding to 2D plume masks derived from "t>0"
tripod camera photos.

For each time slice, DBVOLUME generates an OpenSceneGraph OSGA file for the
point cloud associated with all of the marked voxels.  The OSGA files are
written to a dynamically generated subdirectory of
bundler_IO_subdir/plume_results/.  Generating OSGA files for ~100 time
slices takes approximately an hour on my fastest linux machine.

The OSGA files can be viewed on the G47 laptop via the VIEWPOINTS program
via commands like

 		   viewpoints plume_hull_030.osga

------------------------------------------------------------------------
3.  Execute the auto-generated script run_calc_volumes

   ~/programs/c++/svn/projects/src/mains/plume/run_calc_volumes

Program CALC_VOLUMES automatically searches for TDP files generated by
program DBVOLUME corresponding to reconstructed 3D plume volumes at
different time slices. For each time slice, a
VolumetricCoincidenceProcessor is filled with the point clouds contents.
The number of filled voxels multiplied by voxel volume yields the total
volume for the 3D plume at the time slice.

CALC_VOLUMES exports plume volume vs time slice number to
volumes_vs_timeslices.txt.  It also generates a JPEG plot of
plume volume vs timeslice.  These output files are exported to the
same subdirectory of bundler_IO_subdir/plume_results/ as where
program DBVOLUME wrote the final OpenSceneGraph OSG files for each
time slice. 

Note: The JPG file may be viewed either by doubleclicking on its icon
within the bundler_IO_subdir/plume_results/ folder.  Or else chant
something analogous to 

view ./bundler/plume/Nov_2011/Day2B/plume_results/2B_volumes_vs_timeslice.jpg

------------------------------------------------------------------------
4.  Execute the auto-generated script run_interp_missing_slices

   ~/programs/c++/svn/projects/src/mains/plume/run_interp_missing_slices

Program INTERP_MISSING_SLICES imports the volumes_vs_timeslice.txt
file generated by program CALC_VOLUMES.  It searches for missing
reconstructions at isolated time slices.  (For example, if too few
tripod camera masks exist at some timeslice, then no 3D volume
reconstruction can be performed.)  INTERP_MISSING_SLICES performs
piecewise linear interpolation to estimate missing time slice plume
volumes.  It also links missing a OSGA file at time_slice t to an
existing OSGA file at time_slice t-1.  

------------------------------------------------------------------------
5.  Execute the auto-generated script run_generate_view3Dmovie_script

   ~/programs/c++/svn/projects/src/mains/plume/run_generate_view3Dmovie_script

Program GENERATE_VIEW3DMOVIE_SCRIPT recovers the starting UTC time
for the first OSGA file generated by program DBVOLUME from the
photos table in the plume database.  It exports an executable
script which needs to be run in order to view the reconstructed
"t>0" plume volumes as 3D point clouds evolving over time.  

------------------------------------------------------------------------ 
6.  On the G47 laptop clone, execute the auto-generated script
run_dbview3Dmovie output by program GENERATE_VIEW3DMOVIE_SCRIPT:

  ~/programs/c++/svn/projects/src/mains/plume/run_dbview3Dmovie


Program DBVIEW3DMOVIE is a variant of VIEW3DMOVIE.  It queries the photos
table in the plume database for correlated Movie IDs, slice numbers and
thumbnail filenames.  DBVIEW3DMOVIE then populates the MoviesGroup STL map
with these metadata.  It also reads in the reconstructed plume volumes as a
function of time slice generated by program INTERP_MISSING_SLICES.  

After loading in all the calculated data, DBVIEW3DMOVIE plays back the set
of point clouds as a 3D movie.  It also updates the 10 tripod cameras'
image planes with their appropriate thumbnails.  The "t>0" tripod imagery
is consequently visualized as video clips inside the 10 tripod frusta.  
For context, DBVIEW3DMOVIE also incorporates colored markers which indicate
the locations of various chemical sensors relative to the center of the
experimental test pade.  And it reports the reconstructed volume as a
time-dependent label in the upper left corner of each frame of the 3D
movie.

In order to play the 3D movie, press "p" when the program is in "Run Movie
Mode".  Pressing "p" again pauses the movie.  The movie frame number
automatically wraps around when it reaches the final reconstructed plume
volume.  To speed up movie playback, press "_" (underscore key).  To slow
down the movie, press "+".  The mouse controls for translating, rotating
and zooming the 3D scene are exactly the same as for program VIEWPOINTS.

Finally, the coloring of the reconstructed plume point clouds can be
changed by first switching modes to "View Data Mode".  To do so, press "V"
once.  (Pressing "V" again will suppress mode display at the bottom of the
3D viewer.)  To change the dependent coloring variable from its default
height (Z) value, press "c" a few times.  The coloring will cycle through
Z, P, X and Y.  Probability P coloring is greyscale and is *loosely*
correlated with smoke density.  Press "R" to switch from "View Data Mode"
to "Run Movie Mode".


Virtual camera flightpath entry:
-------------------------------

i.  After starting program DBVIEW3DMOVIE, set the virtual camera to some
desired position and orientation relative to the 3D map.  Press "w" to set
an initial waypoint at this starting virtual camera location.

ii.  Translate, rotate and scale the virtual camera via the 3-button mouse
to some new waypoint location and press "w".  Repeat this for as many
waypoints as desired.  

Note: It's a good idea to not rotate the virtual camera too much between
waypoints.  Occasionally, waypoint interpolation between large orientation
differences can lead to bad virtual camera flips in the playback.

iii.  After entering the final waypoint, press "W" in order to end waypoint
entry.  Then enter some filename for the waypoint path file such as
"myflythru".  Program DBVIEW3DMOVIE will then export a text file called
"myflythru.path" in the directory from which it was called.

iv.  Quit out of DBVIEW3DMOVIE.

v.  Here are the contents of an example "myflythru.path" file:


time   X             Y                Z           Q0 Q1 Q2 Q3

0 -0.117002040148 3.27763125885e-14 144.384231567 -0 -0 -0 1
5 -0.117002040148 5.23624519395e-14 54.7628059387 -0 -0 -0 1
10 1.60914266109 -21.4510650635 44.2557258606 0.30971349672 0.00319116932406 0.00981962259217 0.950773864491
15 2.20995378494 3.04504013062 21.2714767456 0.30971349672 0.00319116932406 0.00981962259217 0.950773864491


The first column indicates waypoint time measured in secs.

Columns 2,3,4 indicate the virtual camera's position in the coordinate
system of the grey grid which appears below the plume cloud, fixed tripods,
colored chemical sensors, etc in DBVIEW3DMOVIE.

Columns 5,6,7,8 indicate the virtual camera's attitude in terms of a
4-dimensional quaternion.

You may want to manually edit the entries in the time column in order to
speed up or slow down the virtual camera's flight between waypoints.  In
order to generate smooth AVI movies, I often need to slow down the virtual
camera's flight speed so that the final movie looks smooth.

vi.  Copy myflythru.path onto saved_animation.path within the same directory
in which DBVIEW3DMOVIE was called.


Virtual camera flightpath playback:
----------------------------------

i.  Restart DBVIEW3DMOVIE by calling its script:

  ~/programs/c++/svn/projects/src/mains/plume/run_dbview3Dmovie

Then press "Z" in order to transfer command of the virtual camera from
manual 3-button mouse control to the waypoint path in
"saved_animation.path".

Press "1" in order to return virtual camera control to the mouse.


AVI movie generation (easy approach not involving frame grabbers)
-----------------------------------------------------------------

i.  Select Applications -> Sound & Video -> gtk-RecordMyDesktop which is an
installed Ubuntu screen capture utility.  A red circle should appear along
the task bar at the bottom of the screen.

ii.  Right click on red circle and choose "Select Area On Screen".  Then
draw a red box around window region to be recorded (e.g. window in which 3D
output from DBVIEW3DMOVIE appears).  

iii.  Click on red circle in order to begin screen capture.  Red circle
turns into grey box when recording starts.  Click on grey box to stop
screen capture.  

iv.  gtk-RecordMyDesktop generates a movie in "OGV" format and places the
output file in /home/plume/  .  You can use your favorite movie player
program (e.g. xine, MoviePlayer, VLC ) to view the movie.

v.  To convert the OGV movie into AVI format which will play inside
powerpoint, chant

				ogv2avi out.ogv 

where out.ogv is the filename for the OGV movie exported by
gtk-RecordMyDesktop.




