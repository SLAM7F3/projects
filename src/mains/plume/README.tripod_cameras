========================================================================
Peter's programs for calibrating tripod cameras and populating sensors
table in the "plume" database.
(Cheat sheet #2 for plume reconstruction project)
========================================================================
Last updated on 9/13/12; 9/18/12; 1/7/13
========================================================================

Preliminaries:

 In this README, we define the following root directory:

	plume_root= ~/programs/c++/svn/projects/src/mains/plume/

We also define bundler_IO_subdir as the subdirectory of plume_root/bundler/
which contains the output from Noah Snavely's bundler program.  In this
README, we'll assume bundler_IO_subdir =
plume_root/bundler/plume/Nov_2011/Day2B/

------------------------------------------------------------------------
1.  In bundler_IO_subdir, there should be a text file called
reconstructed_camera_posns.dat which was previously generated by program
BUNDLER_PHOTOS.  Its contents look like

0  17_6268.rd.jpg  10.4307705189  -52.2760455407  -0.163345887165
1  17_6293.rd.jpg  10.4340535561  -52.2806224187  -0.161545904185
2  17_6303.rd.jpg  10.431387089  -52.279142833  -0.161347134018
3  17_7898.rd.jpg  10.3980951387  -52.2563402471  -0.169698268294
4  18_4413.rd.jpg  4.92919385615  -59.3649423343  -0.484971382907
5  18_4429.rd.jpg  3.62972468381  -56.0071757249  -0.376638687463
6  18_5487.rd.jpg  7.08097952355  -57.8290145234  -0.369683712379
7  18_5513.rd.jpg  8.56738744828  -60.5854888191  -0.0725911963523
8  19_3799.rd.jpg  -9.32115193074  -56.6182129677  -0.777913746272
9  19_4489.rd.jpg  -9.31495683006  -56.5819825026  -0.779700332039
.
.
.
33  25_4549.rd.jpg  12.7442652513  -31.6831554485  0.106853557068
34  25_4594.rd.jpg  12.2359639599  -31.8829612847  0.148287414088
35  25_5689.rd.jpg  15.9527377965  -31.5562350974  0.215184687839
36  25_5723.rd.jpg  15.1678630694  -31.9444390288  0.219867938517
37  26_3481.rd.jpg  14.852439609  -45.0989444675  0.0134501637169
38  26_4214.rd.jpg  15.0762040965  -45.2595485932  -0.018639099542
39  26_4228.rd.jpg  14.7589440478  -45.038191765  0.0284506810478
40  26_4274.rd.jpg  14.9795760977  -45.1258210006  -0.0306650328542
41  IMG_0274_17B.rd.jpg  10.3014941027  -52.6243301836  -0.0502211670245
42  IMG_0275_17B.rd.jpg  9.42452659155  -53.5086102407  -0.0546999457764
43  IMG_0276_17B.rd.jpg  8.71172904199  -54.2053322925  -0.134093258479
44  IMG_0277_17B.rd.jpg  7.79413151153  -54.9299179879  -0.176524923246
45  IMG_0278_17B.rd.jpg  6.46503480516  -55.531220232  -0.213280005269
.
.
.
1087  IMG_3286_18C.rd.jpg  5.020686851  -62.1431550313  -0.579004167849
1088  IMG_3287_18C.rd.jpg  3.96995494404  -62.3498258475  -0.555573034062


In this example, lines 0 - 40 correspond to images from tripod cameras 17,
18, ..., 26.  Lines 41 - 1088 correspond to rover camera photos.  Text file
reconstructed_camera_posns.dat lists the camera position in Noah's
arbitrary coordinate system for each image reconstructed by BUNDLER.  We
want to convert tripod camera positions and pointing angles from Noah's
coordinate system to the real-world coordinate system defined by the survey
measurements.  We'll then extract the real-world positions and poses for
the 10 tripod cameras.

Important note: As of Sep 2012, we assume that fixed tripod camera image
filenames all begin like "17_blahblah.jpg", "18_blahblah.jpg", etc.  The
codes explicitly search for an initial camera number followed by an
underscore symbol in order to differentiate fixed tripod from rover camera
images!

------------------------------------------------------------------------
2.  Copy bundler_IO_subdir/reconstructed_camera_posns.dat onto
bundler_IO_subdir/unfitted_reconstructed_camera_posns.dat :

cd bundler_IO_subdir

cp reconstructed_camera_posns.dat unfitted_reconstructed_camera_posns.dat

------------------------------------------------------------------------
3.  Using nano, emacs, VI or some other text editor, open text file
unfitted_reconstructed_camera_posns.dat and eliminate all lines which do
NOT correspond to tripod cameras.  (In the example above, we need to delete
lines 41 through 1088.)

------------------------------------------------------------------------
4.  Also eliminate 3D positions for any tripod cameras which did not have
reasonably self-consistent reconstructions.  For example, it's probably a
good idea to initially ignore any tripods whose multiple reconstructed
frusta do not all lie within a small percentage of each other's location.
Alternatively, we can use program mains/photosynth/VIEWBUNDLER to look at
just the reconstructed tripod locations and determine by inspection which
ones look self-consistent.

For Day2B, I chose the following 24 reconstructed tripod positions as a
self-consistent set and left them inside
bundler_IO_subdir/unfitted_reconstructed_camera_posns.dat. Note that line
11 for camera 19 is badly off from the others reconstructed positions for
camera 19:

# Cameras 17, 19, 20, 21, 22, 26 all had reasonably self-consistent
# reconstructions.  

0  17_6268.rd.jpg  10.4307705189  -52.2760455407  -0.163345887165
1  17_6293.rd.jpg  10.4340535561  -52.2806224187  -0.161545904185
2  17_6303.rd.jpg  10.431387089  -52.279142833  -0.161347134018
3  17_7898.rd.jpg  10.3980951387  -52.2563402471  -0.169698268294
8  19_3799.rd.jpg  -9.32115193074  -56.6182129677  -0.777913746272
9  19_4489.rd.jpg  -9.31495683006  -56.5819825026  -0.779700332039
10  19_4520.rd.jpg  -9.28615104973  -56.4846270264  -0.775143164037
12  20_5141.rd.jpg  -17.5657017479  -49.2840089734  -0.84522672152
13  20_5219.rd.jpg  -17.6136368478  -49.2771750914  -0.831373065932
14  20_6476.rd.jpg  -17.5974242422  -49.2421708668  -0.819999880796
15  20_6506.rd.jpg  -17.6453829877  -49.2668320569  -0.83094691129
16  20_6517.rd.jpg  -17.721223287  -49.2570267472  -0.898563354023
17  21_4590.rd.jpg  -18.754565309  -35.325349102  -0.744282264942
18  21_4683.rd.jpg  -18.9201692347  -35.2408943142  -0.472998815531
19  21_5770.rd.jpg  -18.6556087181  -35.4133649623  -0.706370668353
20  21_5841.rd.jpg  -18.4707129645  -35.402171824  -0.596514121114
21  22_4539.rd.jpg  -13.7758799684  -27.2849981964  -0.141947460285
22  22_4568.rd.jpg  -13.8384638977  -27.221909848  -0.149151539385
23  22_4598.rd.jpg  -13.8006069692  -27.2577198246  -0.137395326341
24  22_5651.rd.jpg  -13.7890169654  -27.274754372  -0.149535778631
37  26_3481.rd.jpg  14.852439609  -45.0989444675  0.0134501637169
38  26_4214.rd.jpg  15.0762040965  -45.2595485932  -0.018639099542
39  26_4228.rd.jpg  14.7589440478  -45.038191765  0.0284506810478
40  26_4274.rd.jpg  14.9795760977  -45.1258210006  -0.0306650328542

Now we've got a set of tripod camera positions coming from Noah's bundler
codes.  We next need to find the corresponding real-world locations for the
tripod cameras coming from survey measurements.

------------------------------------------------------------------------
5.  Open a new terminal by chanting "xterm" and change its directory to
plume_root

	cd ~/programs/c++/svn/projects/src/mains/plume/

Then run GENERATE_SCRIPTS program via following command:

		generate_scripts

Program GENERATE_SCRIPTS queries the user to enter a subdirectory of
./bundler/ in which some set of tripod images and bundler output reside.
It exports executable scripts for several programs that must be run in
order to georegister the tripod cameras, populate database tables and
reconstruct 3D point clouds from calibrated 2D tripod camera stills.

------------------------------------------------------------------------
6.  Execute the auto-generated run_survey_camera_posns script

  ~/programs/c++/svn/projects/src/mains/plume/run_survey_camera_posns

Program SURVEY_CAMERA_POSNS contains survey measurements of radii and
azimuthal angles for the 10 camera tripod locations at the EARTH and VENUS
sites in South Carolina campaign #1.  It exports text file
bundler_IO_subdir/measured_camera_posns.dat which has XYZ camera locations
in the square-pad's coordinate system.


Here is the contents of measured_camera_posns.dat for our Day2B example:


Camera 17   -2.29563   29.912   1
Camera 18   13.3292   27.0581   1
Camera 19   27.3444   13.048   1
Camera 20   30.0035   -5.34008   1
Camera 21   17.0248   -24.8858   1
Camera 22   2.27346   -29.9679   1
Camera 23   -14.0657   -26.6939   1
Camera 24   -27.0023   -13.0605   1
Camera 25   -29.0906   7.26493   1
Camera 26   -16.011   25.7208   1


------------------------------------------------------------------------
7.  Execute the auto-generated run_georegister_cameras script

  ~/programs/c++/svn/projects/src/mains/plume/run_georegister_cameras

Program GEOREGISTER_CAMERAS reads in reconstructed tripod camera posns
generated by Noah Snavely's BUNDLER program in some arbitrary 3D coordinate
system.  It also reads in the text file
bundler_IO_subdir/measured_camera_posns.dat containing surveyed locations
for the tripod cameras generated by program SURVEY_CAMERA_POSNS.  A
modified version of measured_camera_posns.dat called
modified_measured_camera_posns.dat is generated which has the same tripod
camera ID multiplicity as
bundler_IO_subdir/unfitted_reconstructed_camera_posns.dat. This program
does NOT alter any of the surveyed camera position vectors!

GEOREGISTER_CAMERAS next computes the global rotation, translation and
scaling needed to transform bundler into real-world coordinates.  It
overwrites the trivially-valued parameters in
bundler_IO_subdir/packages/peter_inputs.pkg with a new version containing
the global transformation parameters needed to convert from bundler's
arbitrary coordinate system to the surveyed coordinate system.

Here is the contents of peter_inputs.pkg for our Day2B example:


--bundle_filename ./bundler/plume/Nov_2011/Day2B/bundle.out
--image_list_filename ./bundler/plume/Nov_2011/Day2B/image_list.dat
--fitted_world_to_bundler_distance_ratio 1.70463
--bundler_translation_X 9.83405
--bundler_translation_Y 0.648333
--bundler_translation_Z 1
--global_az 139.684
--global_el -1.41779
--global_roll -1.34847
--bundler_rotation_origin_X -6.02955
--bundler_rotation_origin_Y -44.002
--bundler_rotation_origin_Z -0.430017

------------------------------------------------------------------------
8.  Now that the tripod cameras have been georegistered, we need to
regenerate a new set of "package" files containing their reconstructed
position and pose parameters.  The new package files will subsequently be
used for tripod camera display within AVI movies, 3D plume point cloud
generation, etc:

Re-run the auto-generated run_bundler_photos script 

  ~/programs/c++/svn/projects/src/mains/plume/run_bundler_photos

For our Day2B example, 1089 "package" files are newly generated in
bundler_IO_subdir/packages.


Note:  When queried to enter a frustum sidelength in meters, it'll be
useful to pick 0.5 meters or smaller.

------------------------------------------------------------------------ 
9.  Out of all the georegistered tripod photos, we need to pick a final set
of ten which correspond to cameras 17, 18, ..., 25, 26.  It's probably a
good idea to choose a set of ten tripod package files whose camera
locations are fairly close to the surveyed measurements.

So execute the auto-generated run_select_fixed_tripods script

Program SELECT_FIXED_TRIPODS reads in a set of georegistered
package files corresponding to fixed tripod cameras.  It also
imports surveyed camera positions from a text file generated by
program GEOREGISTER_CAMERAS.  SELECT_FIXED_TRIPODS visualizes the
candidate georegistered cameras as selectable view frusta and their
surveyed positions as 3D "signposts".  When a user doubleclicks on
any view frustum, its corresponding image and package filenames are
displayed in the terminal window.  

SELECT_FIXED_TRIPODS will hopefully help a human user cull all candidate
fixed tripod package files down to a final set of 10.


My C++ program archive_camera_params which populates the sensors table
within the plume database with calibrated tripod camera metadata expects to
find ten "package" files for all ten fixed tripod cameras sitting in
bundler_IO_subdir/packages which are called tripod_17.pkg, tripod_18.pkg,
... , tripod_26.pkg. 

For the Day 2B example, I made the following soft links ( = shortcuts)
which represent the final choice for all 10 tripod camera parameters after
visually comparing the surveyed and candidate fixed tripod camera locations
via SELECT_FIXED_TRIPODS:


cd ~/programs/c++/svn/projects/src/mains/plume/bundler/plume/Nov_2011/Day2B/packages

ln -s photo_0003.pkg ./tripod_17.pkg
ln -s photo_0005.pkg ./tripod_18.pkg
ln -s photo_0010.pkg ./tripod_19.pkg
ln -s photo_0016.pkg ./tripod_20.pkg
ln -s photo_0017.pkg ./tripod_21.pkg
ln -s photo_0024.pkg ./tripod_22.pkg
ln -s photo_0025.pkg ./tripod_23.pkg
ln -s photo_0032.pkg ./tripod_24.pkg
ln -s photo_0036.pkg ./tripod_25.pkg
ln -s photo_0038.pkg ./tripod_26.pkg

ln -s photo_0003.pkg ./video_tripod_01.pkg
ln -s photo_0011.pkg ./video_tripod_02.pkg
ln -s photo_0015.pkg ./video_tripod_03.pkg
ln -s photo_0023.pkg ./video_tripod_04.pkg
ln -s photo_0025.pkg ./video_tripod_05.pkg
ln -s photo_0035.pkg ./video_tripod_06.pkg
ln -s photo_0039.pkg ./video_tripod_07.pkg
# ln -s photo_???.pkg ./video_tripod_08.pkg
ln -s photo_0043.pkg ./video_tripod_09.pkg
ln -s photo_0049.pkg ./video_tripod_10.pkg

------------------------------------------------------------------------
10.  Start PGADMIN3 on your local machine and select the gridvision
(172.23.3.30:5432) server.  Then select the plume database as well as the
missions table.  Right-click on missions and select View Data -> View All
Rows.  You should then see a PGADMNIN3 window pop open with mission,
fieldtest, day_number and experiment_label columns.  Note that Day 2B
corresponds to mission 4.  The next program to run, ARCHIVE_CAMERA_PARAMS,
will ask for this information before it can populate the sensors table of
the plume database with the calibrated tripod camera metadata.

------------------------------------------------------------------------
11.  Execute the auto-generated run_archive_camera_params

  cd ~/programs/c++/svn/projects/src/mains/plume/

  ~/programs/c++/svn/projects/src/mains/plume/run_archive_video_camera_params

  ~/programs/c++/svn/projects/src/mains/plume/run_archive_SRL_camera_params


Program ARCHIVE_CAMERA_PARAMS exports the reconstructed and correctly
scaled tripod camera parameters to the user-friendly text file
bundler_IO_subdirs/camera_params.txt.  It also inserts or updates rows
within the sensors table of the plume database with intrinsic and
georegistered extrinsic camera parameter information.

------------------------------------------------------------------------
12.  Use PGADMIN3 to view the sensors table within the plume database on
the gridvision server.  Right-click on sensors and select View Data -> View
All Rows.  You should see 10 new rows within the sensors table containing
georegistered tripod camera position and pose metadata.


Note that the X and Y coordinates for all 10 tripod cameras basically
satisfy X**2 + Y**2 = (30 meters)**2.  Moreover for Day2B, camera 17 was
located near the northern direction and basically looked southward.  Camera
azimuth refers to the sensor's pose and NOT its position.  Azimuth = 0
corresponds to a camera pointing due east, azimuth = +90 degs corresponds
to a camera pointing due north, azimuth = 180 degs corresponds to a camera
pointing due west, and azimuth = 270 degs = -90 degs corresponds to a
camera pointing due south.






