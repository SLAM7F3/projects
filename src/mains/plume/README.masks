========================================================================
Peter's programs for generating and temporally filtering smoke masks for
"t>0" images.  (Cheat sheet #2.1 for plume reconstruction project)
========================================================================
Last updated on 7/1/13
========================================================================

Preliminaries:

 In this README, we define the following root directory:

	plume_root= ~/programs/c++/svn/projects/src/mains/plume/

All of Peter's programs are most easily run from within this subdirectory.
So first change directories to this location:

cd ~/programs/c++/svn/projects/src/mains/plume/

------------------------------------------------------------------------ 

1.  Program SMOKE_MASKS employs the ViBe background subtraction algorithm
in order to classify pixels as "smoke" or "non-smoke" for t > 0 plume
images.  By varying the ViBe radius threshold, we generate increasingly
strict "smoke" classes.  SMOKE_MASKS eliminates small connected components
whose number of pixels is less than a min_n_pixels_per_cluster threshold
whose value varies with the Vibe radius threshold.  After the multiple
masks are consolidated, median filling is performed to minimize small holes
in smoke plumes (caused by foreground occluders).


------------------------------------------------------------------------
2.  Execute the auto-generated run_temporally_filter_masks script

   ~/programs/c++/svn/projects/src/mains/plume/run_temporally_filter_masks

Program TEMPORALLY_FILTER_MASKS reads in raw mask filenames from the photos
table in the plume database.  Each raw mask is assumed to contain the
substring "_bksub" in its file name. For each time slice,
TEMPORALLY_FILTER_MASKS finds n_timesteps=0 (for montage AVI movie
generation) and n_timesteps=2 masks earlier and later in time.  This
program uses gaussian weights to generate a temporally averaged mask.  Such
temporal smoothing reduces some smoke classification errors.

Both greyscale and colored versions of the n_timesteps=2 temporally
averaged masks are exported as JPG files to the same subdirectories
containing the original raw masks.  Only colored versions of the
n_timesteps=0 (i.e. not-temporally averaged) versions of the raw masks are
exported as JPG files for AVI movie generation purposes in program
GENERATE_MONTAGE_AVIS.


Note: TEMPORALLY_FILTER_MASKS generally takes roughly an hour to run to
completion for the Day2B Nov2011 plume experiment.


========================================================================
Deprecated programs
========================================================================


3.  Program MATLAB_BINARY_2_IMAGE reads in binary MATLAB files generated by
Joe Isaacson containing mask information for Nov 2012 experiments.  It
parses each binary file and exports a corresponding JPG.

4.  Program CSV_2_BINARY reads in comma-separated value files ending "txt"
suffixes from the present working directory.  Entries within these CSV
files are assumed to correspond to logs of 3D gaussian change-detection
probabilities generated by Joe Isaacson.  This program parses the input CSV
files, quantizes their gaussian probabilities and exports a binary array of
short (2 byte) integers.  The exported binary files are bzipped2 in order
to minimize their disk usage.

5.  Program BINARY_2_IMAGE reads in bzipped files generated by CSV_2_BINARY
which compresses change-detection masks from CSV to a quantized binary
format.  It parses each binary file and exports a corresponding JPG.
