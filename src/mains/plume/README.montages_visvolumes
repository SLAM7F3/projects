========================================================================
Peter's programs for loading "t>0" photo and mask metadata into the "plume"
database, generating AVI montage movies and visualizing volumes visible to
tripod cameras. 
(Cheat sheet #4 for plume reconstruction project)
========================================================================
Last updated on 1/10/13; 1/15/13; 1/28/13; 7/1/13
========================================================================

Preliminaries:

 In this README, we define the following root directory:

	plume_root= ~/programs/c++/svn/projects/src/mains/plume/

All of Peter's programs are most easily run from within this subdirectory.
So first change directories to this location:

cd ~/programs/c++/svn/projects/src/mains/plume/

------------------------------------------------------------------------ 

1.  Run Mike Sheppard's MATLAB codes which generate tripod camera
synchronous metadata output for all "t>0" time slices.  Mike's codes
generate a text file that tabulates time slice number, tripod camera ID,
time (measured in epoch secs since midnight Jan 1, 1970), tripod camera
image filename, and mask filename for some plume experiment.  

For example, here are the first few lines from the time-slice text file for
experiment 2B:


0,0,0,17,1321378370.15,/B/time_slices/t000/IMG_7349.JPG,B/time_slices/t000/IMG_7349_bksub.jpg
1,1,0,18,1321378370.15,/B/time_slices/t000/IMG_4999.JPG,B/time_slices/t000/IMG_4999_bksub.jpg
2,2,0,19,1321378370.15,/B/time_slices/t000/IMG_4154.JPG,B/time_slices/t000/IMG_4154_bksub.jpg
.
.
.

Important note:  The slashes must be "forward" rather than "backward"!
i.e. /B/time_slices/... and NOT \B\time_slices\...

Copy the text file from Mike's MATLAB codes into $PLUME_ROOT/metadata/ . 

------------------------------------------------------------------------
2.  Run program 

  ~/programs/c++/svn/projects/src/mains/plume/populate_timeslice_dirs

Program POPULATE_TIMESLICE_DIRS generates a set of folders with names of
the form /tNNNNNN.  It then fills these folders with soft-links which
convert a set of t>0 plume images organized according to camera ID to a new
set organized according to time slices.  It also generates a set of
soft-links for t>0 mask files so that they too are organized according to
time slice ID.  We wrote this utility in order to convert the format of
Will Lawrence's set of Nov 2012 Day2H video frames into that needed by
LOAD_PHOTO_METADATA.

------------------------------------------------------------------------
3.  Execute the auto-generated run_thumbnails script

   ~/programs/c++/svn/projects/src/mains/plume/run_thumbnails

Program THUMBNAILS queries the user to enter the full path for the
subdirectory which holds all t>0 "time-slice" photos.  It then
reads JPEG photos from that root directory along with all its
children subdirectories.  THUMBNAILS generates subsampled versions
of each JPG file and exports them to files of the form
blah/blah/thumbnails/thumbnail_blahblah.JPG

------------------------------------------------------------------------
4.  Make sure a valid date has been manually entered into the fieldtests
table of the plume database for the current field test.  Then execute the
auto-generated run_load_photos script

  ~/programs/c++/svn/projects/src/mains/plume/run_load_photo_metadata


Program LOAD_PHOTO_METADATA imports metadata for sets of "synchronous time
slice" tripod photos from a user-specified text file generated by Mike
Sheppard's MATLAB codes.  LOAD_PHOTOS expects to find this text file
sitting within $PLUME_ROOT/metadata/ .  

Tripod photos, their thumbnails and associated masks at a particular time
slice must exist within common subdirectories.  For example, the 10 tripod
camera JPG files at timeslice 0 reside in

   /data/ImageEngine/plume/Nov2011/Day2/B/images/time_slices/t000 . 

The thumbnail versions of the 10 tripod photos sit in 

   /data/ImageEngine/plume/Nov2011/Day2/B/images/time_slices/t000/thumbnails

The smoke mask files corresponding to these 10 photos reside in 

   /data/ImageEngine/plume/Nov2011/Day2/B/bksub/time_slices/t000

LOAD_PHOTO_METADATA enters the metadata from Mike's text file into the
photos table of the plume database.  To see its results, start up PGADMIN3
and look at the gridvision server.  Then click on Databases -> plume ->
schemas -> public -> tables -> photos.  Right click on "photos" and then
right click on View Data -> View All Rows.  You should then see photo IDs,
sensor IDs, time stamps, thumbnail URLs, mask URLs, etc for all t > 0 plume
experiment photos.

------------------------------------------------------------------------
5.  Execute the auto-generated run_generate_montage_AVIs script

   ~/programs/c++/svn/projects/src/mains/plume/run_generate_montage_AVIs

Program GENERATE_MONTAGE_AVIS loops over "t>0" images for the 10 tripod
cameras.  For each camera, it retrieves all non-time averaged colored mask
jpeg files exported by program TEMPORALLY_FILTER_MASKS in temporal
order. This program forms an mpeg4 AVI movie which shows the raw tripod
camera's view on the left-hand side and the simultaneous corresponding
smoke mask on the right-hand side.

The 10 output montage AVI files are exported to subdirectory "./AVIs/" of
$PLUME_ROOT.


Note: GENERATE_MONTAGE_AVIS takes many minutes to produce a single AVI
movie.  And it requires roughly an hour to run to completion for all 10
cameras for the Day2B Nov2011 plume experiment.  

------------------------------------------------------------------------
6.  Run

   ~/programs/c++/svn/projects/src/mains/plume/temporal_composites

Program TEMPORAL_COMPOSITES loops over all tripod cameras.  For each pixel
in a tripod camera's mask, it computes the maximum intensity value over all
time-slices.  The resulting temporally composited mask illustrates where
plume activity actually occurred within a particular camera's image plane.
We intend to use the temporal composite masks to ignore image plane regions
where no smoke ever passed for 3D volume reconstruction.

------------------------------------------------------------------------
7.  Execute the auto-generated run_dbvisibility script

   ~/programs/c++/svn/projects/src/mains/plume/run_dbvisibility

Program DBVISIBILITY reads in calibration parameters for N <= 10 fixed
tripod cameras from the sensors table of the PLUME database.  DBVISIBILITY
also imports and thresholds temporally composited masks generated by
program TEMPORAL_COMPOSITES.  The thresholded temporal composites are
output as JPG files.

DBVISIBILITY instantiates a VolumetricCoincidenceProcessor volume whose
lateral dimensions are initially set by the cameras' positions.
DBVISIBILITY iterates over all voxels within the VCP volume and projects
each into all cameras' image planes.  If the voxel falls inside some
minimal number of cameras image planes, it is marked with a "detection
probability" value proportional to that number.

DBVISIBILITY generates an OpenSceneGraph OSGA file for the point cloud
associated with all of the marked voxels.  The OSGA file can be viewed on
the G47 laptop via the VIEWPOINTS program.  

viewpoints $PLUME_ROOT/bundler/plume/"subdir_for_experiment"/visible_hull.osga

where "subdir_for_experiment" will depend upon the particular data set
being analyzed (e.g. "subdir_for_experiment" = Nov_2011/Day2B).

Within the VIEWPOINTS viewer, press "c" to change point coloring from the
default Z (height) channel to the P (probability) channel. The volumes
which can be seen by 10, 9, 8, 7 and 6 tripod cameras then appear as dark
red, light red, dark orange, light orange and yellow regions in the 3D map.
