// ========================================================================
// Program VIEW_IMAGEPAIR_FEATURES imports a set of
// "matching/nonmatching" training or test image pair 3D features.
// Feature points are colored to indicate training labels or test
// score function values. A decision plane generated via
// SVM_GLOBAL_DESCRIPS is also displayed in the 3D feature space.

// When in INSERT_FEATURE mode, a user can select any feature.  The
// corresponding image pair is displayed as a montage.  

// ========================================================================
// Last updated on 10/16/13; 10/17/13
// ========================================================================

#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>

#include "osg/osgGraphicals/AnimationController.h"
#include "osg/osgGraphicals/CentersGroup.h"
#include "osg/osgGraphicals/CentersKeyHandler.h"
#include "osg/osgGraphicals/CenterPickHandler.h"
#include "osg/osg2D/ColorbarHUD.h"
#include "osg/osgOrganization/Decorations.h"
#include "osg/osgSceneGraph/HiresDataVisitor.h"
#include "math/ltthreevector.h"
#include "osg/ModeController.h"
#include "osg/osgModels/MODELSGROUP.h"
#include "osg/osgSceneGraph/MyDatabasePager.h"
#include "osg/osgOperations/Operations.h"
#include "passes/PassesGroup.h"
#include "geometry/plane.h"
#include "osg/osg3D/PointCloudsGroup.h"
#include "osg/osg3D/PointCloudKeyHandler.h"
#include "osg/osgGraphicals/PointFinder.h"
#include "osg/osgGeometry/PolygonsGroup.h"
#include "osg/osgGeometry/PolyLinesGroup.h"
#include "osg/osgGeometry/PolyhedraGroup.h"
#include "osg/osg3D/Terrain_Manipulator.h"
#include "osg/osgGeometry/TrianglesGroup.h"
#include "osg/osgWindow/ViewerManager.h"

#include "osg/osg2D/ArrowHUD.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::ifstream;
   using std::map;
   using std::pair;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);
   
// Use an ArgumentParser object to manage the program arguments:
   
   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);

   int cloudpass_ID=passes_group.get_curr_cloudpass_ID();
   cout << "cloudpass_ID = " << cloudpass_ID << endl;

// Import scores for matching and nonmatching image pairs from text
// files generated by program GENERATE_MATCH_SCORES:

   string JAV_subdir="/data/video/JAV/NewsWraps/early_Sep_2013/";
   string images_subdir=JAV_subdir+"jpg_frames/";
   string root_subdir=JAV_subdir;

//   string ImageEngine_subdir="/data/ImageEngine/";
//   string tidmarsh_subdir=ImageEngine_subdir+"tidmarsh/";
//   string images_subdir=tidmarsh_subdir;
//   string root_subdir=tidmarsh_subdir;

   vector<string> image_pair_filenames;
   image_pair_filenames.push_back(root_subdir+"matching_images.dat");
   image_pair_filenames.push_back(root_subdir+"nonmatching_images.dat");
   image_pair_filenames.push_back(root_subdir+"scores.dat");

   typedef map<threevector,pair<string,string>,ltthreevector> MONTAGE_MAP;
   MONTAGE_MAP montage_map,magnified_montage_map;
   MONTAGE_MAP::iterator iter;

// independent threevector: color,gist,texture matching scores
// dependent pair<string>: image1_filename and image2_filename   

// Load pairs of matching and nonmatching image filenames into
// montage_map as functions of their color, gist and texture matching
// scores:
   
   for (unsigned int f=0; f<image_pair_filenames.size(); f++)
   {
      vector<vector<string> > row_substrings=
         filefunc::ReadInSubstrings(image_pair_filenames[f]);
      
      for (unsigned int r=0; r<row_substrings.size(); r++)
      {
         int n_columns=row_substrings[r].size();

//         cout << "f = " << f << " r = " << r << " n_columns = " << n_columns
//              << endl;
         
         threevector feature;
         vector<string> image_filenames;
         for (int c=0; c<n_columns; c++)
         {
            string curr_substring=row_substrings[r].at(c);
//            cout << "c = " << c << " curr_substring = " << curr_substring
//                 << endl;
            
            if (n_columns==5 && c >= 0 && c <= 2)
            {
               feature.put(c,stringfunc::string_to_number(curr_substring));
            }
            else if (n_columns==6 && c >=1 && c <= 3)
            {
               feature.put(c-1,stringfunc::string_to_number(curr_substring));
            }
            else if (n_columns==5 && c >= 3)
            {
               image_filenames.push_back(images_subdir+curr_substring+".jpg");
            }
            else if (n_columns==6 && c >= 4)
            {
               image_filenames.push_back(images_subdir+curr_substring+".jpg");
            }
         } // loop over index c labeling columns

         pair<string,string> P(image_filenames[0],image_filenames[1]);
         montage_map[feature]=P;
      } // loop over index r labeling rows

   } // loop over index f labeling matching and nonmatching image filenames

   threevector COM(Zero_vector);
   for (iter=montage_map.begin(); iter != montage_map.end(); iter++)
   {
      COM += iter->first;
//      cout << iter->first.get(0) << " " 
//           << iter->first.get(1) << " "
//           << iter->first.get(2) << "   "
//           << iter->second.first << " "
//           << iter->second.second << endl;
   }
   COM /= montage_map.size();
   cout << "COM = " << COM << endl;

// Recall that we artificially magnified offsets wrt COM for
// visualization purposes.  So need to generate a new version
// of the montage map which contains image pair filenames as functions
// of magnified feature coordinates:

   threevector magnification_factors(1,1,1);
//   threevector magnification_factors(1,10,1);
   for (iter=montage_map.begin(); iter != montage_map.end(); iter++)
   {
      threevector curr_delta=iter->first-COM;
      for (unsigned int d=0; d<curr_delta.get_mdim(); d++)
      {
         curr_delta.put(d,magnification_factors.get(d)*curr_delta.get(d));
      }
      threevector new_feature_coords=COM+curr_delta;
      magnified_montage_map[new_feature_coords]=iter->second;
   }

// Construct the viewer and instantiate a ViewerManager:

   WindowManager* window_mgr_ptr=new ViewerManager();
   window_mgr_ptr->initialize_window("3D imagery");
   
// Create OSG root node:

   osg::Group* root = new osg::Group;

// Instantiate Operations object to handle mode, animation and image
// number control:

   bool display_movie_state=false;
//   bool display_movie_state=true;
   bool display_movie_number=false;
//   bool display_movie_number=true;
   bool display_movie_world_time=false;
   bool hide_Mode_HUD_flag=false;
//   bool hide_Mode_HUD_flag=true;
   Operations operations(
      ndims,window_mgr_ptr,passes_group,
      display_movie_state,display_movie_number,display_movie_world_time,
      hide_Mode_HUD_flag);

   ModeController* ModeController_ptr=operations.get_ModeController_ptr();
   AnimationController* AnimationController_ptr=
      operations.get_AnimationController_ptr();
   root->addChild(operations.get_OSGgroup_ptr());

// Add a custom manipulator to the event handler list:

   osgGA::Terrain_Manipulator* CM_3D_ptr=new osgGA::Terrain_Manipulator(
      ModeController_ptr,window_mgr_ptr);
   CM_3D_ptr->set_min_camera_height_above_grid(0.1);	// meters
//   CM_3D_ptr->set_min_camera_height_above_grid(100);	// meters
   CM_3D_ptr->set_enable_underneath_looking_flag(true);	
   window_mgr_ptr->set_CameraManipulator(CM_3D_ptr);

// Instantiate group to hold all decorations:
   
   Decorations decorations(window_mgr_ptr,ModeController_ptr,CM_3D_ptr);

   AlirtGrid* grid_ptr=decorations.add_AlirtGrid(
      ndims,passes_group.get_pass_ptr(cloudpass_ID));
//    grid_ptr->set_threeD_grid_flag(true);


   threevector* grid_origin_ptr=grid_ptr->get_world_origin_ptr();
   CM_3D_ptr->set_Grid_ptr(grid_ptr);
   decorations.set_grid_origin_ptr(grid_origin_ptr);


// Instantiate triangle decorations group:

   decorations.add_Triangles(ndims,passes_group.get_pass_ptr(cloudpass_ID));

// Instantiate group to hold pointcloud information:

   PointCloudsGroup clouds_group(
      passes_group.get_pass_ptr(cloudpass_ID),grid_origin_ptr);
   bool index_tree_flag=false;

   vector<PointCloud*>* PointCloud_ptrs_ptr=clouds_group.generate_Clouds(
      passes_group,index_tree_flag,decorations.get_TrianglesGroup_ptr());
   window_mgr_ptr->get_EventHandlers_ptr()->push_back(
      new PointCloudKeyHandler(&clouds_group,ModeController_ptr,CM_3D_ptr));

// Initialize ALIRT grid based upon cloud's bounding box:

//   Grid::Distance_Scale distance_scale=Grid::meter;
//   Grid::Distance_Scale distance_scale=Grid::kilometer;
//   double delta_s=-1;	// meters
//   double magnification_factor=12;
   AlirtGridsGroup* AlirtGridsGroup_ptr=decorations.get_AlirtGridsGroup_ptr();
   AlirtGridsGroup_ptr->initialize_grid(
      grid_ptr,clouds_group.get_xyz_bbox());
//   decorations.get_AlirtGridsGroup_ptr()->initialize_grid(
//      grid_ptr,clouds_group.get_xyz_bbox(),distance_scale,delta_s,
//      magnification_factor);
   grid_ptr->set_axes_labels("Color match","GIST match");
   grid_ptr->set_axis_char_label_size(3);
   grid_ptr->update_grid();
   
   cout << "*grid_origin_ptr = " << *grid_origin_ptr << endl;

/*
// FAKE FAKE:  For displaying GPS vs geoaligned GEO camera path for pass 15
// Tues Mar 5, 2013 at 2:35 pm

   grid_ptr->set_delta_xy(1000,1000);
   grid_ptr->set_axis_char_label_size(
      3*grid_ptr->get_axis_char_label_size());
   grid_ptr->set_tick_char_label_size(
      3*grid_ptr->get_tick_char_label_size());
   grid_ptr->update_grid();
*/

// Instantiate a MyDatabasePager to handle paging of files from disk:

   viewer::MyDatabasePager* MyDatabasePager_ptr=new viewer::MyDatabasePager(
      clouds_group.get_SetupGeomVisitor_ptr(),
      clouds_group.get_ColorGeodeVisitor_ptr());
   clouds_group.get_HiresDataVisitor_ptr()->setDatabasePager(
      MyDatabasePager_ptr);

// Set height color map:

   PointCloud* PointCloud_ptr=PointCloud_ptrs_ptr->at(0);
   ColorMap* height_ColorMap_ptr=PointCloud_ptr->get_z_ColorMap_ptr();
   height_ColorMap_ptr->set_mapnumber(14); 
		      // reverse large hue value sans white
// Instantiate a PointFinder;

   PointFinder pointfinder(&clouds_group);
   CM_3D_ptr->set_PointFinder(&pointfinder);

// Instantiate signpost and feature decoration groups:

   SignPostsGroup* SignPostsGroup_ptr=
      decorations.add_SignPosts(ndims,passes_group.get_pass_ptr(cloudpass_ID));
   SignPostsGroup_ptr->set_altitude_dependent_size_flag(false);

   FeaturesGroup* FeaturesGroup_ptr=
      decorations.add_Features(ndims,passes_group.get_pass_ptr(cloudpass_ID));
   FeaturesGroup_ptr->set_montage_map_ptr(&magnified_montage_map);
   FeaturesGroup_ptr->set_PointFinder_ptr(&pointfinder);
   
   FeaturePickHandler* FeaturePickHandler_ptr=
      decorations.get_FeaturePickHandler_ptr();
   FeaturePickHandler_ptr->set_insert_single_feature_flag(true);
   FeaturePickHandler_ptr->set_cloud_picking_flag(true);
   FeaturePickHandler_ptr->set_surface_picking_flag(false);
   FeaturePickHandler_ptr->set_Zplane_picking_flag(false);

// Instantiate Polygons decoration group:

   fourvector pi(
      4.81851,
      23.6321,
      2.01145,
      -24.1697);
   plane decision_plane(pi);
   threevector decision_plane_pt=
      decision_plane.projection_into_plane(COM)-*grid_origin_ptr;

   threevector n_hat=decision_plane.get_nhat();

   cout << "Initial n_hat = " << n_hat << endl;

   for (int i=0; i<3; i++)
   {
      n_hat.put(i,n_hat.get(i)*magnification_factors.get(i));
   }
   n_hat=n_hat.unitvector();

   cout << "Magnified n_hat = " << n_hat << endl;

   plane magnified_decision_plane(n_hat,decision_plane_pt);
   threevector a_hat=magnified_decision_plane.get_ahat();
   threevector b_hat=magnified_decision_plane.get_bhat();
//   cout << "a_hat = " << decision_plane.get_ahat() << endl;
//   cout << "b_hat = " << decision_plane.get_bhat() << endl;
   
   vector<threevector> V;
   V.push_back(decision_plane_pt+1*a_hat+1*b_hat);
   V.push_back(decision_plane_pt+1*a_hat-1*b_hat);
   V.push_back(decision_plane_pt-1*a_hat-1*b_hat);
   V.push_back(decision_plane_pt-1*a_hat+1*b_hat);
   V.push_back(V.front());

   polyline decision_plane_polyline(V);
   polygon decision_plane_poly(decision_plane_polyline);
//   cout << "decision_plane_poly = " << decision_plane_poly << endl;

   osgGeometry::PolygonsGroup* PolygonsGroup_ptr=decorations.add_Polygons(
      ndims,passes_group.get_pass_ptr(cloudpass_ID),AnimationController_ptr);

   osgGeometry::Polygon* Polygon_ptr=
      PolygonsGroup_ptr->generate_new_Polygon(
         *grid_origin_ptr,decision_plane_poly);
   Polygon_ptr->set_permanent_color(colorfunc::blue,0.5);
   PolygonsGroup_ptr->reset_colors();

//   PolygonsGroup_ptr->set_OSGgroup_nodemask(0);  // suppress polygon display

   root->addChild(decorations.get_OSGgroup_ptr());
   root->addChild(clouds_group.get_OSGgroup_ptr());

// Attach scene graph to viewer:

   window_mgr_ptr->setSceneData(root);

// Create the windows and run the threads.  Viewer's realize method
// calls the CustomManipulator's home() method:

   window_mgr_ptr->realize();

   while( !window_mgr_ptr->done() )
   {
      window_mgr_ptr->process();
   }

   delete window_mgr_ptr;
}

