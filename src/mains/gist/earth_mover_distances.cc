// ==========================================================================
// Program EARTH_MOVER_DISTANCES imports a set of line segment
// histograms generated via program COMPUTE_SEGMENT_HISTOGRAMS.  For
// each pair of histograms, this program computes their "earth mover
// distance" which is a measure of histogram similarity.  The earth
// mover distances are sorted and exported to an output text file with
// the corresponding pair's image filenames.
// ==========================================================================
// Last updated on 9/5/13; 9/6/13
// ==========================================================================

#include <cstdlib>
#include <iostream>
#include <map>
#include <string>
#include <vector>

#include "optimum/emdL1.h"
#include "general/filefuncs.h"
#include "templates/mytemplates.h"
#include "general/outputfuncs.h"
#include "math/prob_distribution.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::ios;
using std::map;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   string image_subdir="/data/ImageEngine/tidmarsh/";
   string textures_histogram_subdir=image_subdir+"texture_histograms/";
   vector<string> allowed_suffixes;
   allowed_suffixes.push_back("texture_hist");
   vector<string> histogram_filenames=
      filefunc::files_in_subdir_matching_specified_suffixes(
         allowed_suffixes,textures_histogram_subdir);

   int n_horiz_subimage_bins=8;
   int n_vert_subimage_bins=8;
   int n_frac_mag_bins=8;
   int n_theta_bins=4;
   int n_bins=n_horiz_subimage_bins*n_vert_subimage_bins*n_frac_mag_bins*
      n_theta_bins;
   cout << "n_bins = " << n_bins << endl;

   int n_histograms=histogram_filenames.size();
   cout << "Enter n_histograms to compare:" << endl;
   cin >> n_histograms;

   timefunc::initialize_timeofday_clock();      

// Import line texture histograms generated by program
// COMPUTE_TEXTURE_HISTOGRAMS:

   vector<double*> histogram_ptrs;
   for (int i=0; i<n_histograms; i++)
   {
//      cout << "i = " << i << " histogram_filename = " 
//           << histogram_filenames[i] << endl;
      vector<double> curr_bin_values=filefunc::ReadInNumbers(
         histogram_filenames[i]);
      
      double* curr_histogram_ptr=new double[n_bins];
      histogram_ptrs.push_back(curr_histogram_ptr);

      for (unsigned int j=0; j<curr_bin_values.size(); j++)
      {
         (curr_histogram_ptr)[j]=curr_bin_values[j];
      }
   } // loop over index i labeling input histogram files

   EmdL1 em;			// EMD_L1 class

   // run experiments with EMDL1 for 2D histograms

// As of 9/5/13, we empirically believe that any two pictures whose
// earth mover distance exceeds max_emd are qualitatively dissimilar:

//   const double max_emd=3000;
//   const double max_emd=5000;
   const double max_log10_emd=6.5;
//   const double max_log10_emd=7;

   vector<string> image_pair_names;
   vector<double> emd_distances;
   for (int i=0; i<n_histograms-1; i++)
   {
      outputfunc::update_progress_fraction(i,5,n_histograms);
      double* curr_histogram_ptr=histogram_ptrs[i];
      for (int j=i+1; j<n_histograms; j++)
      {
         double* next_histogram_ptr=histogram_ptrs[j];
         double curr_emd=em.EmdDist(
            curr_histogram_ptr,next_histogram_ptr,
            n_horiz_subimage_bins,n_vert_subimage_bins,
            n_frac_mag_bins*n_theta_bins);
         
         curr_emd=log(curr_emd)/log(10.0);
         if (curr_emd > max_log10_emd) continue;
         
         emd_distances.push_back(curr_emd);
         string basename_i=
            filefunc::getbasename(histogram_filenames[i]);
         string basename_j=
            filefunc::getbasename(histogram_filenames[j]);
         image_pair_names.push_back(
            stringfunc::prefix(basename_i)+"  "+
            stringfunc::prefix(basename_j) );

      } // loop over index j 
   } // loop over index i 
   
   templatefunc::Quicksort(emd_distances,image_pair_names);

   string output_filename="image_textures.comparison";
   ofstream outstream;
   filefunc::openfile(output_filename,outstream);
   for (unsigned int i=0; i<emd_distances.size(); i++)
   {
      outstream << "EMD = " << emd_distances[i] << " "
                << image_pair_names[i] << endl;
   }
   filefunc::closefile(output_filename,outstream);

   prob_distribution textures_prob(emd_distances,100,0);
   textures_prob.writeprobdists();

   string banner="Exported image texture histogram comparison to "+
      output_filename;
   outputfunc::write_big_banner(banner);

   cout << "At end of program EARTH_MOVER_DISTANCES" << endl;
   outputfunc::print_elapsed_time();

}
