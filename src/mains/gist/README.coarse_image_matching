==========================================================================
Coarse image matching program notes
==========================================================================
Last updated on 11/20/13; 12/14/13; 12/15/13
==========================================================================

Global image descriptor computation & comparison programs:

*.  mains/gist/COMPUTE_COLOR_HISTOGRAMS loops over all images within
an images directory.  It exports their color histograms to text files
within a color_histograms subdirectory of the images directory.

*.  mains/gist/COMPARE_COLOR_HISTOGRAMS imports a set of color
histograms generated by program COMPUTE_COLOR_HISTOGRAMS.
Looping over all imported histograms, it calculates dotproducts
between successive pairs.  The dotproducts are sorted in descending
order.  Dotproducts exceeding a specified threshold value are
exported to an output text file with the corresponding pair's image
filenames.

*.  Program COMPUTE_GIST_HISTOGRAMS imports images from a set of input
subdirectories. Each input image is first rescaled and cropped down to
256x256 pixels in size.  The LEAR C program is then called to compute a
3*512 dimensional descriptor for the subsampled image.  All GIST descriptor
vectors are written to output text files.

*.  mains/gist/COMPARE_GIST_HISTOGRAMS computes the magnitude of the
difference between GIST descriptors for pairs of images.  It outputs a
probability distribution for the difference magnitudes.  COMPARE_GIST also
exports a text file containing pairs of similar images whose difference
magnitude is less than some user-specified threshold.

*.  mains/gist/COMPUTE_TEXTURE_HISTOGRAMS loops over all images within some
set of subdirectories.  For each input image, it computes gradient
magnitude and phases for separate R, G and B color channels.  The results
are separated into 45, 90, 135 and 180 orientation angle bins as well as
logarithmic fractional magnitude bins.  Binning according to coarse image
plane gridding is performed as well.  Concatenated texture histograms are
exported to output text files.

*. mains/gist/COMPARE_TEXTURE_HISTOGRAMS imports a set of texture
histograms generated by program COMPUTE_TEXTURE_HISTOGRAMS.  Looping over
all imported histograms, it computes dotproducts between successive pairs.
The dotproducts are sorted in descending order and exported to an output
text file with the corresponding pair's image filenames.

*.  mains/gist/COMPUTE_LBP_HISTOGRAMS is a minor rewrite of LBPTest.cpp
written by Navid Nourani-Vatani on 1/25/2013.  It subdivides each input
image into a small number of regions of interest.  Within each ROI,
COMPUTE_LBP_HISTOGRAMS calls Noruani-Vatani's LBP descriptor library and
generates a histogram.  The ROI histgrams are individually L2-normalized
and then concatenated together into a single large descriptor which is also
L2-normalized.  Concatenated LPB histograms are exported to output text
files.

*.  mains/gist/COMPARE_LBP_HISTOGRAMS imports a set of LBP histograms
generated by program COMPUTE_LBP_HISTOGRAMS.  Looping over all imported
histograms, it computes dotproducts between successive pairs.  The
dotproducts are sorted in descending order and exported to an output text
file with the corresponding pair's image filenames.

*.  mains/gist/COMPUTE_SURF_HISTOGRAMS imports SURF features extracted by
program EXTRACT_SURF_FEATURES from a set of input jpg images.  For each
image, 1D probability distributions are calculated for SURF interest
points' scales, angles and separation distances.  Probability densities and
cumulative functions are exported to metafile subdirectories of the input
SURF keys directory.

*.  mains/gist/COMPARE_SURF_HISTOGRAMS imports sets of cumulative
probability distribution functions generated by program
COMPUTE_SURF_HISTOGRAMS.  Looping over all imported cumulative
distributions, it computes the maximum difference between successive pairs.
The similarity between two cumulative distributions is taken to equal 1 -
their maximum difference.  The similarity scores are sorted in descending
order and exported to an output text file with the corresponding pair's
image filenames.

*.  mains/JAV/SEGMENT_VIDEO_FRAMES imports video frames from a specified
subdirectory.  After downsizing each input frame, it iteratively picks
previously unselected seed pixel locations. SEGMENT_VIDEO_FRAMES performs
"color oozing" at each seed location and generates a pixel flood region.
Different flood regions whose median RGB colors are sufficiently similar
are assigned to the same equivalence class via a union_find datastructure.
Distinct flood regions are colored and exported to an segment image file.

SEGMENT_VIDEO_FRAMES also generates cumulative distribution functions for
the zeroth ("mass") and second ("moment of inertia") moments of all
nontrivially-sized parent regions.  The cumulative distribution functions
are exported metafile subdirectories of the segmentation subdir.

*.  mains/gist/COMPARE_SEGMENT_HISTOGRAMS imports sets of cumulative
probability distribution functions generated by program
mains/JAV/SEGMENT_VIDEO_FRAMES.  Looping over all imported cumulative
distributions, it computes the maximum difference between pairs.  The
similarity between two cumulative distributions is taken to equal 1 - their
maximum difference.  The similarity scores are sorted in descending order
and exported to an output text file with the corresponding pair's image
filenames.

*.  mains/JAV/BUILD_HOG_DICTIONARY is a superficial rewrite of Davis King's
quick-n-dirty code to generate a BoW dictionary from HOG features extracted
from an input set of images.  It partitions the HOG descriptor space with
randomly oriented planes.  "Voronoi cells" within this partitioned space
form HOG words.  BUILD_HOG_DICTIONARY exports a serialized version of the
random projection hash to a binary output file in BoW_histograms_subdir.

*.  mains/JAV/COMPUTE_BOW_HISTOGRAMS is a variant of the quick-n-dirty HOG
BoW code which Davis King wrote in Dec 2013.  It imports the HOG dictionary
generated by program BUILD_HOG_DICTIONARY.  Looping over all files within
images_subdir, it forms an image pyramid and projects onto the HOG
dictionary basis.  COMPUTE_BOW_HISTOGRAMS exports a L1-normalized histogram
of HOG BoW coefficients for each input image.

*.  mains/JAV/COMPARE_BOW_HISTOGRAMS imports a set of BoW histograms
generated by program COMPUTE_BoW_HISTOGRAMS.  Looping over all imported
histograms, it computes matching scores between successive pairs.  For each
HOG word, overlap scores are sorted in descending order and exported to an
output text file labeled by the HOG word's index.  Video frame pair clip
and frame IDs are also written to the output text files.





*.  mains/gist/TRAIN_IMAGE_COMPARISONS imports comparison scores for pairs
of images based upon their color histogram dotproducts, gist descriptor
difference magnitudes and texture histogram dotproducts.  It first stores
these measures of image similarity within an STL map which depends upon
first and second clip IDS and frame IDs.  Iterating over a subset of the
entries within the STL map, TRAIN_IMAGE_COMPARISONS then displays a pair of
images and asks the user to label them as either matching or nonmatching.
The triple of global image descriptors is then exported to either a
matching or non-matching text file.  The labeled triple descriptors can
later be used to generate binary classified and/or rank SVM functions.

*.  mains/gist/GENERATE_MATCHING_FILENAMES scans over montage images
(generated by program TEST_IMAGE_COMPARISONS) within a specified input
subdirectory.  It extracts clip and frame IDs for matching image pairs.
Full path filenames for matching image pairs are then exported to an output
text file.

*.  mains/gist/GENERATE_NONMATCHING_FILENAMES scans over montage images
(generated by program TEST_IMAGE_COMPARISONS) within a specified input
subdirectory.  It extracts clip and frame IDs for nonmatching image pairs.
Full path filenames for nonmatching image pairs are then exported to an
output text file.

*.  mains/gist/GENERATE_MATCH_SCORES imports relatively small numbers of
pairs of matching image filenames generated via program
TRAIN_IMAGE_COMPARISONS.  It first instantiates an STL map to hold
quadruples formed from the image pairs' clip and frame IDs.
GENERATE_MATCH_SCORES next imports scores indicating overlap within color,
GIST, texture, etc channels for large numbers of image pairs.  Dependent
score vectors are filled for independent image pair quadruples within the
STL map.

Iterating over all entries in the STL map, GENERATE_MATCH_SCORES exports
matching_images.dat and nonmatching_images.dat text files which list
n-tuples of feature matching scores for matching and nonmatching image
categories.  These text files become input for program SVM_GLOBAL_DESCRIPS.

*.  mains/gist/GENERATE_BOW_SCORES is a variant GENERATE_MATCH_SCORES
specialized to work exclusively with HOG BOW features.  It first imports
relatively small numbers of pairs of manually identified matching &
non-matching image filenames generated via programs
GENERATE_[NON]MATCHING_FILENAMES.  An STL map is instantiated to hold
quadruples formed from the image pairs' clip and frame IDs.
GENERATE_BOW_SCORES next imports scores indicating BoW overlap for each HOG
word.  Dependent score vectors are filled for independent image pair
quadruples within the STL map. Repeated image pair filenames are ignored.

Iterating over all entries in the STL map, GENERATE_BOW_SCORES exports
matching_images.dat and nonmatching_images.dat text files which list
n_HOG_bins feature matching scores for matching and nonmatching image
categories.  These text files become input for program SVM_GLOBAL_DESCRIPS.
It also outputs matching_files.txt and nonmatching_files.txt which contain
the names of paired files whose scores are actually exported in
matching_images.dat and nonmatching_images.dat.

*.  mains/gist/SVM_GLOBAL_DESCRIPS first imports matching and non-matching
labels for pairs of images generated via program TRAIN_IMAGE_COMPARISONS.
It then uses Davis King's DLIB library to load the input samples along with
their positive and negative labels.  After the ordering of the input
samples is randomized, cross-correlation is performed in order to estimate
a reasonable value for a linear-SVM slack variable C.  DLIB then trains
binary decision and probabilistic decision functions. Serialized versions
of the binary and probabilistic decision functions are exported to output
binary files in learned_funcs_subdir.

*.  mains/gist/TEST_IMAGE_COMPARISONS imports a probabilistic binary
classifier decision function generated via SVM_GLOBAL_DESCRIPTORS.  It also
imports color histogram, GIST descriptor and texture histogram dotproducts
for pairs of images.  If the decision function operating on an image pair's
global descriptor dotproducts exceeds some user-specified threshold, the
image pair is declared to represent a match.  A montage for the pair of
matching images is then generated, displayed and stored within
matches_subdir.

*. mains/gist/BOW_IMAGE_COMPARISONS is a variant of TEST_IMAGE_COMPARISONS.
It imports a probabilistic binary classifier decision function generated
via SVM_GLOBAL_DESCRIPTORS.  It also imports BoW matching scores for pairs
of images.  If the decision function operating on an image pair's global
BoW matching scores exceeds some user-specified threshold, the image pair
is declared to represent a match.  A montage for the pair of matching
images is then generated and stored within matches_subdir.

*.  mains/gist/GENERATE_EDGELIST imports image basenames from
bundler_IO_subdir/image_list.dat .  It next recovers coarse image matching
scores generated by program BOW_IMAGE_COMPARISONS.  After querying the user
to enter a minimum graph edge weight threshold, GENERATE_EDGELIST exports
an edge list which can be used to form an image search network.

==========================================================================
Ancillary programs
==========================================================================

*.  mains/gist/PLOT_LABELED_POINTS imports 3-feature vectors for pairs of
manually labeled matching and nonmatching image pairs.  It generates and
exports .osga files which visualize these labeled feature vectors as green
and red points in 3D space.  PLOT_LABELED_POINTS also exports probability
density distributions for color, GIST and texture feature values for both
matching and nonmatching image pair samples.

*.  mains/gist/VIEW_IMAGEPAIR_FEATURES imports a set of
"matching/nonmatching" training or test image pair 3D features.  Feature
points are colored to indicate training labels or test score function
values. A decision plane generated via SVM_GLOBAL_DESCRIPS is also
displayed in the 3D feature space.

When in INSERT_FEATURE mode, a user can select any feature.  The
corresponding image pair is displayed as a montage.

*.  mains/JAV/COMPARE_FACE_DETECTIONS

==========================================================================
Deprecated programs
==========================================================================

*.  mains/JAV/PLOT_AFFINE_ELLIPSES imports a set of JPG files from a
specified subdirectory.  Looping over each image, this program extracts
interest points via the Affine Covariant Region Detector linux binary (see
http://www.robots.ox.ac.uk/~vgg/research/affine/detectors.html).
Parameters associated with the elliptical affine covariant regions are
written to an output text file.  Ellipses corresponding to each affine
region are also superposed on the input image and exported to
ellipses_subdir.

*.  mains/gist/COMPUTE_ELLIPSE_HISTOGRAMS imports ellipse parameters
extracted by program PLOT_AFFINE_ELLIPSES from a set of input jpg images.
For each image, 1D probability distributions are calculated for the
ellipses' fractional areas, number density and center separation distances.
Probability densities and cumulative functions are exported to metafile
subdirectories of the input ellipses directories.

*.  mains/gist/COMPARE_ELLIPSE_HISTOGRAMS imports sets of cumulative
probability distribution functions generated by program
COMPUTE_ELLIPSE_HISTOGRAMS.  Looping over all imported cumulative
distributions, it computes the maximum difference between successive pairs.
The similarity between two cumulative distributions is taken to equal 1 -
their maximum difference.  The similarity scores are sorted in descending
order and exported to an output text file with the corresponding pair's
image filenames.
