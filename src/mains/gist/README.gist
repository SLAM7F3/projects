==========================================================================
GIST program notes
==========================================================================
Last updated on 10/17/13; 10/21/13; 10/22/13
==========================================================================

Image scene classification based on GIST descriptors:

*.  Program DELETE_EMPTY_FLICKR_IMAGES scans through a specified
subdirectory containing new, raw images semi-automatically downloaded from
flickr.  In April 2013, we empirically found that several downloaded flickr
images are essentially content-free.  Such empty flickr images all seem to
have byte-size = 9218.  So this program deletes any flickr image with this
particular byte count.

*.  Program REPLACE_WHITESPACES_W_UNDERSCORES scans through all flickr
image filenames.  It replaces any space, tab or parentheses in input flickr
image filenames with underscores.

*.  Program COMPUTE_GIST imports images from a set of input
subdirectories. Each input image is first rescaled and cropped down to
256x256 pixels in size.  The LEAR C program is then called to compute a
3*512 dimensional descriptor for the subsampled image.  All GIST descriptor
vectors are written to output text files.

*.  Program COMPRESS_GIST imports GIST descriptor files from a set of input
subdirectories.  Within each input subdirectory, a binary hdf5 file is
generated which contains all its scene GIST descriptors.

*.  Program COMPRESS_NONGIST imports GIST descriptor files from a set of
input subdirectories corresponding to distinct scenes.  Within each input
subdirectory, a binary hdf5 file is generated which contains all GIST
descriptors for every other input subdirectory.

*.  Program REMOVE_DANGLING_GIST_FILES scans through all gist files within
the testing images subdirs.  For each gist file, it searches for a
corresponding test image.  If no such test image exists, this program
deletes the dangling gist file.

We wrote this program to clean out gist files for test images after they're
repurposed as training images.

*.  Program SVM_GIST reads in K=3*512 dimensional feature descriptors for N
scene and N' non-scene 256x256 images generated by COMPRESS_GIST.  It then
uses Davis King's DLIB library to load the input samples along with their
positive and negative labels.  After the ordering of the input samples is
randomized, cross-correlation is performed in order to estimate a
reasonable value for a linear-SVM slack variable C.  DLIB then trains
binary decision and probabilistic decision functions. Serialized versions
of the binary and probabilistic decision functions are exported to output
binary files.

*.  Program GIST_RECOG imports gist descriptors for 8 outdoor scenes.  It
classifies each descriptor as belonging or not to each of the 8 categories
based upon their thresholded probability values.

*.  Program CLASSIFY_IMAGES recursively imports all image files from some
specified subdirectory.  It also imports probabilistic decision functions
for several scene categories previously generated via progarm SVM_GIST.
Looping over each input image, CLASSIFY_IMAGES computes its GIST descriptor
and scene category probability.  Any probability below some input threshold
is ignored.  The maximal surviving probability is used to classify the
scene for the input image.  A soft link is generated between classified
images and scene subdirectories.


*.  Program QUANTIZE_COLORS imports a set of images and computes their
color histograms.  Each image's histogram is exported to a text file with a
.colorhist suffix.
