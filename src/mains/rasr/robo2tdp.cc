// ==========================================================================
// Program ROBO2TDP reads in and parses a text file generated by the
// Hokuyu ladar onboard the G47 packbot.  It converts the XYZ points
// in this file into a TDP output file.  The TDP file is subsequently
// converted to OSGA binary format via a call to Ross Anderson's
// LODTREE program.

// 			   robo2tdp filename.txt

// ==========================================================================
// Last updated on 11/2/10; 11/9/10; 11/28/10; 12/2/10
// ==========================================================================

#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include "general/filefuncs.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "osg/osg3D/tdpfuncs.h"
#include "threeDgraphics/xyzpfuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   string hokoyu_filename=argv[1];
   cout << "hokoyu_filename = " << hokoyu_filename << endl;

   threevector robo_coords;
   vector<threevector>* xyz_pnt_ptr=
      xyzpfunc::parse_Hokoyu_binary_datafile(hokoyu_filename,robo_coords);
   cout << "xyz_pnt_ptr->size() = " << xyz_pnt_ptr->size() << endl;

// Read in raw Hokoyu ladar data from individual scans conducted at
// fixed locations within a room from text files with one X,Y,Z
// triple written per input line:

   vector<double> X,Y,Z;
   for (int i=0; i<xyz_pnt_ptr->size(); i++)
   {
      if (i%1000==0) cout << i/1000 << " ";
      threevector curr_xyz(xyz_pnt_ptr->at(i));
      X.push_back(curr_xyz.get(0));
      Y.push_back(curr_xyz.get(1));
      Z.push_back(curr_xyz.get(2));
   } // loop over index i labeling text lines within input robot XYZ file
   cout << endl;

   cout << "Z.size() = " << Z.size() << endl;

   string prefix=stringfunc::prefix(hokoyu_filename);
   string tdp_filename=prefix+".tdp";
   tdpfunc::write_relative_xyz_data(tdp_filename,X,Y,Z);

   string banner="Ladar XYZ point cloud written to "+tdp_filename;
   outputfunc::write_big_banner(banner);

   string unix_cmd="lodtree "+tdp_filename;
   sysfunc::unix_command(unix_cmd);
   
}
