// ==========================================================================
// Program DPM_BBOXES parses text files generated by Myra Nam using
// the Deformable Parts Model matlab codes.  It extracts bounding
// boxes in UV image plane coordinates which supposedly surround
// people within a 20 image subset of the MIT2317 photo set.

//				dpm_bboxes

// ==========================================================================
// Last updated on 1/30/12; 1/31/12; 8/13/12; 6/7/14
// ==========================================================================

#include <iostream>
#include <string>
#include <vector>

#include "geometry/bounding_box.h"
#include "general/filefuncs.h"
#include "image/imagefuncs.h"
#include "geometry/polyline.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "templates/mytemplates.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   string images_subdir="./DPM_bboxes/images/";
   string bboxes_subdir="./DPM_bboxes/bboxes/";
   vector<string> image_filenames=filefunc::files_in_subdir(images_subdir);

   for (unsigned int i=0; i<image_filenames.size(); i++)
   {
      unsigned int xdim,ydim;
      imagefunc::get_image_width_height(image_filenames[i],xdim,ydim);

      string file_basename=filefunc::getbasename(image_filenames[i]);
      string DPM_filename=bboxes_subdir+"dpm_bboxes.txt";
      cout << "i = " << i 
           << " image = " << file_basename
           << " DPM = " << DPM_filename
           << endl;
      cout << "xdim = " << xdim << " ydim = " << ydim << endl;

      string human_bbox_filename=bboxes_subdir+file_basename+".bboxes";
      ofstream human_bbox_stream;
      filefunc::openfile(human_bbox_filename,human_bbox_stream);

      string polyline_filename=bboxes_subdir+"polylines_"
         +stringfunc::integer_to_string(i,3)+".txt";
      ofstream polystream;
      filefunc::openfile(polyline_filename,polystream);
      polystream << "# " << file_basename << endl;
      polystream << "# Time   PolyLine_ID   Passnumber   X Y R G B A"
                 << endl << endl;

      filefunc::ReadInfile(DPM_filename);
      const unsigned int n_columns=6;
      for (unsigned int r=0; r<filefunc::text_line.size(); r++)
      {
         string curr_line=filefunc::text_line[r];
//         cout << "curr_line = " << curr_line << endl;
         if (curr_line.size() < n_columns) continue;

         vector<string> substrings=
            stringfunc::decompose_string_into_substrings(curr_line);
         vector<double> column_values;
         for (int s=0; s<n_columns; s++)
         {
            column_values.push_back(stringfunc::string_to_number(
               substrings[s]));
//             cout << "s = " << s << " value = " << column_values[s] << endl;
         }
         
         double c1=column_values[0];
         double r1=column_values[1];
         double c2=column_values[2];
         double r2=column_values[3];
         double confidence=column_values[4];
         int color_code=column_values[5];

//         if (confidence < 0) continue;

         const double aspect_ratio=double(xdim)/double(ydim);

         double ulo=double(c1-1)/xdim * aspect_ratio;
         double uhi=double(c2-1)/xdim * aspect_ratio;
         double vhi=1-double(r1-1)/ydim;
         double vlo=1-double(r2-1)/ydim;

//         if (ulo > uhi) templatefunc::swap(ulo,uhi);
 //        if (vlo > vhi) templatefunc::swap(vlo,vhi);

         ulo=basic_math::max(ulo,0.0);
         uhi=basic_math::min(uhi,aspect_ratio);
         vlo=basic_math::max(vlo,0.0);
         vhi=basic_math::min(vhi,1.0);

         human_bbox_stream << ulo << "     # ulo" << endl;
         human_bbox_stream << uhi << "     # uhi" << endl;
         human_bbox_stream << vlo << "     # vlo" << endl;
         human_bbox_stream << vhi << "     # vhi" << endl;
         human_bbox_stream << "1.7     # physical height (meters)" << endl;
         human_bbox_stream << color_code << "    # color code" << endl;
         human_bbox_stream << endl;

         cout << "c1 = " << c1
              << " r1 = " << r1
              << " c2 = " << c2
              << " r2 = " << r2 
              << " confidence = " << confidence 
              << " color code = " << color_code 
              << endl;
         cout << "ulo = " << ulo << " uhi = " << uhi << endl;
         cout << "vlo = " << vlo << " vhi = " << vhi << endl;

         threevector lower_left_corner(ulo,vlo);
         threevector lower_right_corner(uhi,vlo);
         threevector upper_right_corner(uhi,vhi);
         threevector upper_left_corner(ulo,vhi);
         vector<threevector> V;
         V.push_back(lower_left_corner);
         V.push_back(lower_right_corner);
         V.push_back(upper_right_corner);
         V.push_back(upper_left_corner);
         V.push_back(lower_left_corner);
         
         for (unsigned int v=0; v<V.size(); v++)
         {
            threevector curr_V=V[v];
            polystream  << "0  " << r << "  0  " 
                        << curr_V.get(0) << "  "
                        << curr_V.get(1) << "  "
                        << "1  1  1  1" << endl;
         }
         polystream << endl;
      } // loop over index r labeling lines within DPM output text file
      cout << endl;

      filefunc::closefile(human_bbox_filename,human_bbox_stream);
      filefunc::closefile(polyline_filename,polystream);
      
   } // loop over index i labeling image filenames
   

}
