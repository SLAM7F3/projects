========================================================================
Image dictionary generation and exploitation code notes
========================================================================
Last updated on 8/21/13; 8/22/13; 8/30/13
========================================================================

*.  Program COMPUTE_SIFT_KEYFILES imports a set of images from a specified
set of subdirectories of /data/ImageEngine/.  It calls either Lowe's binary
or libsiftfast in order to generate a text SIFT keyfile for every input
image.  A random integer is added to each output keyfile name in order to
minimize the probability any two image files yield the same key file name.

*.  Program BINARIZE_SIFT_DESCRIPTORS imports all sift keyfiles from some
specified subdirectory.  All 128-dimensional descriptors from a key file
are converted into unsigned char bytes.  They are exported to a binary file
whose byte size = 128*n_features in key file.  The original text key file
is then deleted, and the binary file is compressed.  Empirically, we
observe that this binarization procedure cuts down disk space usage by at
least a factor of 4.

*.  Program RANDOMHASH imports a subset of compressed binary SIFT keyfiles
from a specified subdirectory.  It samples some fraction of each binary
keyfile's SIFT descriptors.  The input O(10**8) SIFT descriptors are
accumulated within an STL vector of dlib column vectors.  We then call
dlib's create_random_projection_hash() method.  The resulting projection
hash object is serialized and written out to a binary file.

*. Program CELL_FREQ imports SIFT descriptors from compressed binary key
files.  It also inputs the random projection hash function generated by
program RANDOMHASH.  Looping over some fraction of all input keys,
CELL_FREQ computes their corresponding Voronoi cell IDs.  It plots the
frequency histogram for the Voronoi cell IDs.

*.  Program DESCRIPTORS_COVAR parses all compressed binary SIFT descriptor
files within a specified input subdirectory.  It sequentially forms first
and second moments from SIFT descriptors as they're individually imported.
Once all SIFT descriptors have been processed, their 128x128 covariance
matrix is calculated.  The mean, covariance, square root and inverse square
root covariance matrices are written to text and binary files within the
sift keys subdirectory.

*.  Program IMAGE_WORD_HISTOGRAMS imports the random projection hash
function generated by program RANDOMHASH.  Looping over all images which
have SIFT key files, it imports SIFT feature descriptors for each image.
IMAGE_WORD_HISTOGRAMS maps image SIFT features to word Voronoi clusters.
It exports a text file for each image containing its Voronoi cell
histogram.

*.  Program IMAGE_RELNS imports Voronoi cell histograms generated by
program IMAGE_WORD_HISTOGRAMS for some number of input images.  It fills a
term-frequency matrix whose entries are renormalized to take into account
variable image "document" size.  Inverse document frequencies are next
computed to assess individual SIFT word importance. SIFT words whose
importance lie below some minimal threshold are added to a stop-list.
TF-IDF ratios are formed and exported to text and binary file formats.

*.  Program SIFTWORDS_2_TEXT imports Voronoi cell histograms generated by
program IMAGE_WORD_HISTOGRAMS for some number of input images.  Each SIFT
word that has a nonzero frequency within an input image "document" is
converted into a 5-digit integer string (0-16383).  The integer string is
exported to an output text file with a frequency equaling that in the
Voronoi cell histogram.  The output file represents a "text document"
equivalent for an image.

*.  Program IDENTIFY_BAD_IMAGES imports text files containing SIFT words
for images generated by program SIFTWORDS_2_TEXT.  It counts the number of
distinct extracted SIFT words for each image.  If the number is less than
some user-specified threshold, the image contains little useful content and
is declared bad.  The basenames and SIFT word counts for bad images are
exported to an output text file.

**********************************************
As of 4/19/12, we no longer believe we'll ever have enough disk space to
realistically hold onto BOTH raw and whitened HDF5 binary files.  So we'll
simply NOT run white_features.  Instead,  GENERATE_IMAGE_WORDS reads in raw
HDF5 files and multiplies descriptors by the inverse square root of the
covariance matrix.
**********************************************

3.  Run accum_features

Program ACCUM_FEATURES imports HDF5 binary files containing SIFT
descriptors for a set of images.  It converts each SIFT descriptor unsigned
integer (0-255) to an unsigned char (byte).  Each byte is exported to
binary file "all_sift_descriptors.binary".  The final size of the
cumulative feature binary file should precisely equal 128*n_features bytes.

4.  Run cluster_centers

Program CLUSTER_CENTERS imports raw SIFT descriptors (with unsigned integer
values ranging from 0 to 255) for an entire imagery database which was
generated by program ACCUM_FEATURES.  It whitens the raw SIFT descriptors
via multiplcation by the inverse square root of their covariance matrix.
CLUSTER_CENTERS next performs approximate K-means clustering on the SIFT
descriptors via the FLANN library. Finally, cell center descriptors for
clusters containing some minimal number of SIFT descriptors are exported to
a binary file in HDF5 format.

5.  Run generate_image_words

Program GENERATE_IMAGE_WORDS reads in 128D descriptors for Voronoi cell
centroids generated by program CLUSTER_CENTERS.  Looping over all images
which have SIFT key files, it imports SIFT feature descriptors for each
image.  GENERATE_IMAGE_WORDS maps image SIFT features to word Voronoi
clusters.  It exports a text file for each image containing its SIFT word
content.

6. Run tfidf

Program TFIDF reads in word counts for text files calculated by program
GENERATE_IMAGE_WORDS.  It counts the number of words for each image.  TFIDF
exports renormalized term frequencies to output text files within a
term_freqs subdirectory of sift_keys_subdir.  It also computes inverse
document frequencies within an output binary HDF5 file.
 
7.  Run tfidf2

Program TFIDF2 reads in term frequencies and inverse document
frequencies generated by program TFIDF.  It forms TFIDF products
for each of N archive images and exports them to text files within
a tfidf subdirectory of sift_keys_subdir.  It also gzips all text
files within the term_freqs subdir.

8.  Run nplusone

Program NPLUSONE queries the user to enter a full path to some "N+1st"
image.  It then calls Lowe's binary and generates a SIFT key file in text
and HDF5 binary formats.  The SIFT descriptors are subsequently whitened
via multiplication with the inverse square root SIFT feature covariance
matrix.  The whitened SIFT descriptors for the N+1st image are exported to
an output HDF5 binary file.

9.  Run match_vocab

Program MATCH_VOCAB first imports 128D descriptors for voronoi cell
centroids.  It also reads in the vocabulary output by program
GENERATE_VOCAB.  MATCH_VOCAB then queries the user to enter SIFT feature
descriptors within an HDF5 binary file for some "N+1st" image.  Dotproducts
between the input image and the "N" database images are calculated and
sorted.  The archive images with the highest dotproducts with the N+1st
image are returned by this program.
