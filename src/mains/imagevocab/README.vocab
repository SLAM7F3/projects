========================================================================
Image dictionary generation and exploitation code notes
========================================================================
Last updated on 4/19/12; 4/26/12; 4/30/12
========================================================================

0.  Run imagesearch/downsize_images

Program DOWNSIZE_IMAGES scans through images within
bundler_IO_subdir/images.  It downsamples any which are larger than
max_xdim,max_ydim in pixel size.  Oversized original images are moved into
a separate subdirectory, and their place within the images subdir is taken
by their downsized counterparts.  Original or downsampled image size
results are saved into output text file bundler_IO_subdir/image_sizes.dat.

1a.  Run sift/extract_sift_features or keys_to_hdf5

Program EXTRACT_SIFT_FEATURES searches for bundler_IO_subdir/images/keys.
If this subdirectory does not exist, it runs Lowe's binary on all input
images writes SIFT key files to the keys subdirectory.
EXTRACT_SIFT_FEATURES then parses all individual SIFT key files and
re-exports them as HDF5 binary files.

Program KEYS_TO_HDF5 parses all individual SIFT key files within a
specified input subdirectory.  Each SIFT key file is reexported as a
compresssed HDF5 binary file.

2.  Run descriptors_covar

Program DESCRIPTORS_COVAR parses all compressed SIFT HDF5 binary files
within a specified input subdirectory.  It sequentially forms first and
second moments from SIFT descriptors as they're individually imported.
Once all SIFT descriptors have been processed, their 128x128 covariance
matrix is calculated.  The square root of the inverse covariance matrix is
written to a text file within the sift keys subdirectory.

**********************************************
As of 4/19/12, we no longer believe we'll ever have enough disk space to
realistically hold onto BOTH raw and whitened HDF5 binary files.  So we'll
simply NOT run white_features.  Instead,  GENERATE_IMAGE_WORDS reads in raw
HDF5 files and multiplies descriptors by the inverse square root of the
covariance matrix.
**********************************************

3.  Run accum_features

Program ACCUM_FEATURES imports HDF5 binary files containing SIFT
descriptors for a set of images.  It converts each SIFT descriptor unsigned
integer (0-255) to an unsigned char (byte).  Each byte is exported to
binary file "all_sift_descriptors.binary".  The final size of the
cumulative feature binary file should precisely equal 128*n_features bytes.

4.  Run cluster_centers

Program CLUSTER_CENTERS imports raw SIFT descriptors (with unsigned integer
values ranging from 0 to 255) for an entire imagery database which was
generated by program ACCUM_FEATURES.  It whitens the raw SIFT descriptors
via multiplcation by the inverse square root of their covariance matrix.
CLUSTER_CENTERS next performs approximate K-means clustering on the SIFT
descriptors via the FLANN library. Finally, cell center descriptors for
clusters containing some minimal number of SIFT descriptors are exported to
a binary file in HDF5 format.

5.  Run generate_image_words

Program GENERATE_IMAGE_WORDS reads in 128D descriptors for Voronoi cell
centroids generated by program CLUSTER_CENTERS.  Looping over all images
which have SIFT key files, it imports SIFT feature descriptors for each
image.  GENERATE_IMAGE_WORDS maps image SIFT features to word Voronoi
clusters.  It exports a text file for each image containing its SIFT word
content.

6. Run tfidf

Program TFIDF reads in word counts for text files calculated by program
GENERATE_IMAGE_WORDS.  It counts the number of words for each image.  TFIDF
exports renormalized term frequencies to output text files within a
term_freqs subdirectory of sift_keys_subdir.  It also computes inverse
document frequencies within an output binary HDF5 file.
 
7.  Run tfidf2

Program TFIDF2 reads in term frequencies and inverse document
frequencies generated by program TFIDF.  It forms TFIDF products
for each of N archive images and exports them to text files within
a tfidf subdirectory of sift_keys_subdir.  It also gzips all text
files within the term_freqs subdir.

8.  Run nplusone

Program NPLUSONE queries the user to enter a full path to some "N+1st"
image.  It then calls Lowe's binary and generates a SIFT key file in text
and HDF5 binary formats.  The SIFT descriptors are subsequently whitened
via multiplication with the inverse square root SIFT feature covariance
matrix.  The whitened SIFT descriptors for the N+1st image are exported to
an output HDF5 binary file.

9.  Run match_vocab

Program MATCH_VOCAB first imports 128D descriptors for voronoi cell
centroids.  It also reads in the vocabulary output by program
GENERATE_VOCAB.  MATCH_VOCAB then queries the user to enter SIFT feature
descriptors within an HDF5 binary file for some "N+1st" image.  Dotproducts
between the input image and the "N" database images are calculated and
sorted.  The archive images with the highest dotproducts with the N+1st
image are returned by this program.
