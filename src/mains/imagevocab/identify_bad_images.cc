// ==========================================================================
// Program IDENTIFY_BAD_IMAGES imports text files containing SIFT
// words for images generated by program SIFTWORDS_2_TEXT.  It counts
// the number of distinct extracted SIFT words for each image.  If the
// number is less than some user-specified threshold, the image
// contains little useful content and is declared bad.  The basenames
// and SIFT word counts for bad images are exported to an output text
// file.
// ==========================================================================
// Last updated on 8/22/13
// ==========================================================================

#include <iostream>
#include <string>
#include <vector>
#include "gmm/gmm.h"
#include "gmm/gmm_matrix.h"

#include "general/filefuncs.h"
#include "math/genvector.h"
#include "math/mathfuncs.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "templates/mytemplates.h"
#include "time/timefuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ifstream;
using std::ios;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   timefunc::initialize_timeofday_clock();      

   string sift_keys_subdir="/data/sift_keyfiles/";
   string voronoi_subdir=sift_keys_subdir+"voronoi/";
   string textfiles_subdir=voronoi_subdir+"text_files/";
   cout << "textfiles_subdir = " << textfiles_subdir << endl;

   vector<string> SIFTword_text_files=filefunc::files_sorted_by_bytesize(
      textfiles_subdir);
   cout << "SIFTword_text_files.size() = " << SIFTword_text_files.size() 
        << endl;

   ofstream outstream;
   string bad_images_filename=sift_keys_subdir+"bad_images.dat";
   filefunc::openfile(bad_images_filename,outstream);
   outstream << "# Bad_image_counter  Bad_image_basename   SIFT word count"
             << endl << endl;
   
   int min_n_words=20;
   for (unsigned int i=0; i<SIFTword_text_files.size(); i++)
//   for (int i=0; i<5000; i++)
   {
      filefunc::ReadInfile(textfiles_subdir+SIFTword_text_files[i]);
      int n_words=filefunc::text_line.size();
      if (n_words < min_n_words)
      {
         string image_basename=SIFTword_text_files[i];
         image_basename=image_basename.substr(0,image_basename.size()-19);
         outstream << i << "    "
                   << image_basename << "    "
                   << n_words << endl;
      }
      else
      {
         break;
      }
   }
   
   filefunc::closefile(bad_images_filename,outstream);
   string banner="Exported bad image filenames & their SIFT word count to "+
      bad_images_filename;
   outputfunc::write_big_banner(banner);

   cout << "At end of program IDENTIFY_BAD_IMAGES" << endl;
   outputfunc::print_elapsed_time();
}
