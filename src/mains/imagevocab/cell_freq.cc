// ==========================================================================
// Program CELL_FREQ imports SIFT descriptors from compressed binary
// key files.  It also inputs the random projection hash function
// generated by program RANDOMHASH.  Looping over some fraction of all
// input keys, CELL_FREQ computes their corresponding Voronoi cell
// IDs.  It plots the frequency histogram for the Voronoi cell IDs.
// ==========================================================================
// Last updated on 8/19/13
// ==========================================================================

#include <iostream>
#include <map>
#include <string>
#include <vector>

#include <dlib/svm_threaded.h>
#include <dlib/gui_widgets.h>
#include <dlib/array.h>
#include <dlib/array2d.h>
#include <dlib/image_keypoint.h>
#include <dlib/image_processing.h>

#include "general/filefuncs.h"
#include "math/prob_distribution.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ifstream;
using std::ios;
using std::map;
using std::ofstream;
using std::string;
using std::vector;

int main (int argc, char * argv[])
{
   std::set_new_handler(sysfunc::out_of_memory);
   cout.precision(16);

   timefunc::initialize_timeofday_clock();      

   string sift_keys_subdir="/data/sift_keyfiles/";
   string binary_descriptors_subdir=sift_keys_subdir+"binary_descriptors/";

// Import descriptors from compressed binary key files:

   vector<string> allowed_suffixes;
   allowed_suffixes.push_back("lzo");
   vector<string> compressed_descriptor_filenames=
      filefunc::files_in_subdir_matching_specified_suffixes(
         allowed_suffixes,binary_descriptors_subdir);

   int n_images=compressed_descriptor_filenames.size();
   int i_start=0;
   int i_stop=n_images;
   int d_dims=128;
   dlib::matrix<unsigned char,128,1> y;

   int i_skip=5;	
   int n_sampled_images=n_images/i_skip;
//   long long n_requested_total_features=1000000000;  // 100 million
   long long n_requested_total_features=2500000000;  // 250 million 
   long long n_requested_features_per_sampled_image=
      i_skip*n_requested_total_features/n_images;

   cout << "n_images = " << n_images << endl;
   cout << "i_skip = " << i_skip << endl;
   cout << "n_sampled_images = " << n_sampled_images << endl;
   cout << "n_requested_total_features = " << n_requested_total_features
        << endl;
   cout << "n_requested_features_per_sampled_image = " 
        << n_requested_features_per_sampled_image << endl;
   outputfunc::enter_continue_char();

// Import random projection hash file generated by program RANDOMHASH:

   int n_total_features=1;
   cout << "Enter actual n_total_features:" << endl;
   cin >> n_total_features;
   string hash_filename=sift_keys_subdir+"phash_"+
      stringfunc::number_to_string(n_total_features)+"_features_"+
      stringfunc::number_to_string(i_stop)+"_imgs_"+
      stringfunc::number_to_string(i_skip)+"_iskip.dat";
   cout << "hash_filename = " << hash_filename << endl;

   ifstream fin(hash_filename.c_str(),ios::binary);
   dlib::projection_hash phash;
   dlib::deserialize(phash, fin);

// Set up STL vector to hold voronoi cell occupation numbers as
// function of voronoi cell ID:

//   int n_voronoi_cells=16384;
   int n_voronoi_cells=131072;
   string n_voronoi_cells_str=stringfunc::number_to_string(n_voronoi_cells);
   vector<double> voronoi_cell_occupancy;
   for (int i=0; i<n_voronoi_cells; i++)
   {
      voronoi_cell_occupancy.push_back(0);
   }
   
   vector<int> voronoi_cell_ID;
   for (int i=i_start; i<i_stop; i += i_skip)
   {
      if (i%200==0) outputfunc::print_elapsed_time();

// First uncompress binary descriptor .lzo file:

      string unix_cmd="lzop --uncompress "+compressed_descriptor_filenames[i];
      sysfunc::unix_command(unix_cmd);

      string descriptor_filename=compressed_descriptor_filenames[i];
      descriptor_filename=descriptor_filename.substr(
         0,descriptor_filename.size()-4);
//      cout << "descriptor_filename = " << descriptor_filename << endl;

      int fskip=1;
      int n_features=
         filefunc::size_of_file_in_bytes(descriptor_filename)/d_dims;
      if (n_features > n_requested_features_per_sampled_image)
      {
         fskip=n_features/n_requested_features_per_sampled_image;
      }

      int n_bytes=n_features*d_dims;
      unsigned char* data_ptr=filefunc::ReadUnsignedChars(
         descriptor_filename,n_bytes);

      int byte_counter=0;
      for (int f=0; f<n_features; f += fskip)
      {
         for (int d=0; d<d_dims; d++)
         {
            y(d)=stringfunc::unsigned_char_to_ascii_integer(
               data_ptr[byte_counter++]);
         }
         int curr_voronoi_cell_ID=phash(y);

         voronoi_cell_occupancy[curr_voronoi_cell_ID]=
            voronoi_cell_occupancy[curr_voronoi_cell_ID]+1;
            
         voronoi_cell_ID.push_back(curr_voronoi_cell_ID);
//         cout << "f = " << f 
//              << " voronoi cell ID = " << voronoi_cell_ID.back() 
//              << endl;
      } // loop over index f labeling features

      cout << i 
           << " n_features=" << n_features 
           << " n_total_features=" << 1E-6*voronoi_cell_ID.size() << "M  "
           << endl;

      delete [] data_ptr;
      
// Delete uncompressed binary descriptor file:

      unix_cmd="/bin/rm "+descriptor_filename;
      sysfunc::unix_command(unix_cmd);

   } // loop over index i labeling binary descriptor files
   cout << endl;

   cout << "voronoi_cell_ID.size() = " << voronoi_cell_ID.size() << endl;
   outputfunc::print_elapsed_time();

// Export voronoi cell IDs and their occupation numbers to output text
// file:

   ofstream outstream;
   string output_filename="voronoi_cell_occupancy_"+
      n_voronoi_cells_str+".dat";
   filefunc::openfile(output_filename,outstream);
   outstream << "#  Voronoi cell ID         Voronoi cell occupancy" 
             << endl << endl;
   outstream << "# N_total_features=" << 1E-6*voronoi_cell_ID.size() << "M  "
             << endl;
   outstream << "# N_voronoi cells = " << n_voronoi_cells << endl;
   outstream << "# Cell occupancy = " 
             << mathfunc::mean(voronoi_cell_occupancy) << " +/- " 
             << mathfunc::std_dev(voronoi_cell_occupancy) << endl << endl;

   for (int i=0; i<n_voronoi_cells; i++)
   {
      outstream << i << "   " << voronoi_cell_occupancy[i]
                << endl;
   }
   filefunc::closefile(output_filename,outstream);

// Plot distribution of new SIFT descriptors' Voronoi cell IDs:
   
   prob_distribution prob(voronoi_cell_ID,1000);
   prob.writeprobdists(false);

   cout << "At end of program CELL_FREQ" << endl;
   outputfunc::print_elapsed_time();
} 

