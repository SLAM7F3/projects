========================================================================
Peter's 3D visualization and graph construction programs for Noah's 
BUNDLER output.
========================================================================
Last updated on 7/13/13; 7/22/13; 12/4/13
========================================================================

========================================================================
INTRO STEPS
========================================================================

1a.  In this README, we'll define the following root directory:

	$root= ~/programs/c++/svn/projects/src/mains/photosynth/

Change directory to $root:

	cd ~/programs/c++/svn/projects/src/mains/photosynth/ 

------------------------------------------------------------------------
2a.  If a /bundler subdirectory of $root doesn't already exist, then create
one:

	mkdir bundler

Then create a new, specialized subdirectory of $root/bundler/ where most
input and output files will go.  In this README, we'll work with Noah's
kermit example.  So we name this specialized subdirectory as
bundler_IO_subdir= $root/bundler/kermit/

   a.  Copy the bundler output file generated by BUNDLER (i.e. bundle.out) 
       into bundler_IO_subdir.

   b.  Copy the list-of-images file generated by BUNDLER (i.e. list_tmp.txt) 
       into bundler_IO_subdir.

   c.  Make an images subdirectory of bundler_IO_subdir.  Copy or link all
       reconstructed JPEG/PNG/etc image files (e.g. kermit000.jpg, 
       kermit001.jpg, etc) into bundler_IO_subdir/images/  .

------------------------------------------------------------------------
3a.  Next change directory to $root

	cd ~/programs/c++/svn/projects/src/mains/photosynth/ 

Then run GENERATE_PETER_INPUTS program via following command:

			generate_peter_inputs 

Program GENERATE_PETER_INPUTS queries the user to enter a subdirectory of
./bundler/ in which some set of images and metadata reside.  It expects to
find "list_tmp.txt" sitting in bundler_IO_subdir.  If no "bundle.out" file
resides in bundler_IO_subdir, GENERATE_PETER_INPUTS creates a trivial
version.  It next generates an images_list.dat file containing renamed
versions of the input images.  This program then creates a packages subdir
of bundler_IO_subdir and generates a peter_inputs.pkg file containing names
for various input parameters.  Finally, GENERATE_PETER_INPUTS writes out
executable scripts for the several programs which must be run in order to
produce thumbnails, construct SIFT graphs and visualize reconstructed
points clouds and frusta in Peter's 3D viewer.

========================================================================
IMAGE DOWNSIZING & THUMBNAIL GENERATION PROGRAMS
========================================================================

1b.  Execute the auto-generated run_downsize_images script OR
run_photo_sizes script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_downsize_images

  OR

  ~/programs/c++/svn/projects/src/mains/photosynth/run_photo_sizes

Program DOWNSIZE_IMAGES scans through images within
bundler_IO_subdir/images.  It downsamples any which are larger than
max_xdim,max_ydim in pixel size.  Oversized original images are moved into
a separate subdirectory, and their place within the images subdir is taken
by their downsized counterparts.  Original or downsampled image size
results are saved into output text file bundler_IO_subdir/image_sizes.dat.

Program PHOTO_SIZES reads in a set of photo image filenames.  It calls
ImageMagick's ping command to extract image width and height measured in
pixels.  Image size results are saved into output text file
image_sizes.dat.

This expensive operation should only be performed once!

------------------------------------------------------------------------
2b.  Execute the auto-generated run_thumbnails script: 

  ~/programs/c++/svn/projects/src/mains/photosynth/run_thumbnails

Program THUMBNAILS generates subsampled versions of input photos within
bundler_IO_subdir/images/thumbnails/.  This expensive operation should only
be performed once!

========================================================================
DATABASE UPDATING 
========================================================================

1c.  Make sure images (and not soft links to images) are placed in
appropriate subdirectory of /data/ImageEngine/.

2c.  Make sure thumbnails subdirectory of images directory exists and has
been populated.

3c.  Using PGADMIN3, enter new Campaign and Mission entries into IMAGERY
database.

4c.  Execute mains/photosynth/run_load_image_metadata.  This script runs
program mains/imagesearch/LOAD_IMAGE_METADATA which uploads image +
thumbnail metadata into images table of IMAGERY database.

  -- OR --

4c.  Execute mains/textsearch/run_load_image_metadata.  

This modified version of program LOAD_IMAGE_METADATA queries the user to
enter campaign and mission IDs for a set of text document images to be
loaded into the images table of the IMAGERY database.  It also requests a
subdirectory of /data/ImageEngine/ where a set of image and thumbnail files
must already exist.  LOAD_IMAGE_METADATA then inserts metadata for images
within image_list_filename into the images database table.

5c.  Execute mains/photosynth/run_update_image_times.  This scripts runs
program mains/imagesearch/UPDATE_IMAGE_TIMES which incorporates UTC time
information into images table of IMAGERY database.

========================================================================
GRAPH CONSTRUCTION PROGRAMS
========================================================================

1d.  Execute the auto-generated run_sift_parser

  ~/programs/c++/svn/projects/src/mains/photosynth/run_sift_parser

Program SIFT_PARSER reads in sift keyfiles generated by Noah Snavely's
BUNDLER processing pipeline from bundler_IO_subdir/matches_buildpair.  It
extracts sift matches from BUNDLER output. SIFT_PARSER outputs an edge list
text file for the sift graph to bundler_IO_subdir/graphs/sift_edgelist.dat.

-- OR --

1d.  For document search 

	Run mains/textsearch/topic_docrelns

	Manually create bundler_IO_subdir/graphs

	Copy docs_edgelist.dat into the new graphs subdir.  

	Create soft link between docs_edgelist.dat and sift_edgelist.dat.

------------------------------------------------------------------------
2d.  Execute the auto-generated run_OGDF_layout script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_OGDF_layout

Program OGDF_LAYOUT parses a text file containing a photo graph edge list
generated program SIFT_PARSER.  It queries the user to set a minimum edge
weight threshold.  It next calls a graphical layout algorithm within the
C++ Open Graph Drawing Framework (OGDF) library.  As of 9/1/09, we have
found that only the Fast Multipole Multilevel layout algorithm can handle
the 25K connected graph coming from the July 2009 MIT photo collect.  This
program outputs the OGDF layout as a Graph Modeling Language (GML) text
file which can be viewed using the yEd java graph tool.

------------------------------------------------------------------------
3d.  Execute the auto-generated run_extract_OGDF_layout script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_extract_OGDF_layout

Program EXTRACT_OGDF_LAYOUT reads in a Graph Modeling Language (GML) file
generated by OGDF_LAYOUT.  For each node within the GML file,
EXTRACT_OGDF_LAYOUT recovers its ID as well as its 2D X and Y positions
calculated by OGDF.  This program generates text file
"graph_XY_coords.fm3_layout" containing these outputs normalized to range
within [0,1] which can be read in by GRAPHJSON.

------------------------------------------------------------------------
4d.  The programs to next execute depend upon whether the input imagery set
represents video frames or disjoint photos:

*** FOR INPUT VIDEO IMAGERY ***

-- Execute the auto-generated script

  ~/programs/c++/svn/projects/src/mains/photosynth/run_generate_mcl_scripts

Program GENERATE_MCL_SCRIPTS creates an executable script which calls the
Markov Cluster Algorithm (MCL) for each connected component of the current
graph.  The executable script is called run_mcl and is written to
mains/photosynth/.

-- Execute 

   ~/programs/c++/svn/projects/src/mains/photosynth/run_mcl

This script executes 3rd-party Markov Cluster Algorithm (MCL) software (see
http://www.micans.org/mcl/ ).  It outputs text files
level_0n_clusters_CX.dat (with n=1 & 2) which partitions the input photos
into similar-looking clusters.

-- Execute

   ~/programs/c++/svn/projects/src/mains/photosynth/run_generate_singleton_clusters

Program GENERATE_SINGLETON_CLUSTERS reads in cluster text files generated
by the Markov Clustering Algorithm (MCL).  It first finds the maximum child
node ID.  GENERATE_SINGLETON_CLUSTERS then rescans all the cluster text
files and identifies those nodes whose IDs are absent.  These correspond to
images which Bundler never included into any SIFT match pair.  This program
exports level_0l_clusters_CXX.dat files (for level l=1 and 2) which
includes a single singleton node ID entry.

We wrote this program in Aug 2012 in order to force all NewsWrap video
nodes to appear in some connected component for timeline display purposes.


-- Execute the auto-generated run_mcl_clusters script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_mcl_clusters

Program MCL_CLUSTERS reads in cluster text files generated by the Markov
Clustering Algorithm (MCL).  It finds the maximum child node ID and counts
number of nodes per cluster.  MCL_CLUSTERS exports cluster metadata to
output text file clusters_info.dat.

*** FOR INPUT PHOTO IMAGERY ***

--  Execute the auto-generated run_kmeans_clusters script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_kmeans_clusters

Program KMEANS_CLUSTERS reads in the gx-gy layout for a SIFT graph
generated by program EXTRACT_OGDF_LAYOUT and the edge list generated by
program SIFT_PARSER.  It first modifies the layout by migrating nodes
towards each other depending upon their SIFT edge weight.  The modified
gx-gy node coordinates are written out to
"graph_XY_coords.modified_fm3_layout".  KMEANS_CLUSTERS next computes the
minimum number of nodes which should appear in the highest level of a graph
hierarchy pyramid.  It queries the user to enter the desired number of
levels within the pyramid.  KMEANS_CLUSTERS then uses the K-means++
algorithm of David Arthur from Stanford to compute a uniform sequence of
parent, grandparent, great-grandparent, etc nodes for the specified number
of pyramid levels.  It exports pyramided clustering results to
level_0l_clusters.dat text files.

------------------------------------------------------------------------
5d.  Execute the auto-generated run_generate_ccs script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_generate_ccs

Program GENERATE_CCS reads in the graph edge list generated by SIFT_PARSER
which establishes links between two photos if they share SIFT features in
common.  It also reads in hierarchical graph clustering information
generated by the Markov Cluster Algorithm or K-means algorithm.
GENERATE_CCS writes out SQL scripts which load metadata into the
graph_hierarchies and connected_components tables of the imagery database.

------------------------------------------------------------------------
6d.  Execute the auto-generated run_fill_photo_hierarchy script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_fill_photo_hierarchy

Program FILL_PHOTO_HIERARCHY reads in the graph edge list generated by
SIFT_PARSER which establishes links between two photos if they share SIFT
features in common.  It also reads in hierarchical graph clustering
information generated by the Markov Cluster Algorithm or K-means algorithm.
FILL_PHOTO_HIERARCHY writes out a set of SQL script files which populate
the graphs, nodes, links and graph_annotations tables in the imagery
database.  Each level within the graph pyramid contains node, edge and
connected component information which can be parsed and visualized by
Michael Yee's graph viewer.

-- OR --

6d.  For document search 

Program GENERATE_COMPONENT_HIERARCHY is a variant of
GENERATE_PHOTO_HIERARCHY which we created for MALLET-based text document
graph generation purposes.  It is called by
mains/textsearch/POPULATE_GRAPH_DIRS for each text graph component
corresponding to a fine topic.  GENERATE_COMPONENT_HIERARCHY reads in a
graph edge list generated by SIFT_PARSER which establishes links between
text documents within a particular fine topic.  It also reads in graph
clustering information output by the K-means algorithm.
GENERATE_COMPONENT_HIERARCHY writes out a set of SQL files which insert or
update graphs, nodes, connected component and graph annotations for the
text document graph pyramid.

========================================================================
VIDEO CLIP PROGRAMS
========================================================================

*.  mains/imagesearch/UPDATE_REL_FRAME_TIMES queries the user to enter a
graph hierarchy ID for a set of video frames already loaded into the images
table of the IMAGERY database.  It retrieves the campaign and mission IDs
plus UTM zonenumber corresponding to a set of images residing within
/data/ImageEngine/ from the world_regions table of the IMAGERY database.
UPDATE_REL_FRAME_TIMES assumes the current video clip began at midnight,
and it bases video frame times upon frame number.  UPDATE_REL_FRAME_TIMES
stores timing metadata within the images table of the IMAGERY database.

    ./update_rel_frame_times --GIS_layer ./packages/imagery_metadata.pkg


*. mains/imagesearch/VIDEOS_TEMPORAL_LAYOUT reads in a set of node and
image IDs as well as epoch times from the IMAGERY database for some
user-specified graph hierarchy.  (As of April 2013, we have stored video
times relative to their starting frames within the epoch column of the
IMAGERY database for Boston bombing YouTube clips.  Each clip was
arbitrarily assigned an absolute start time of midnight, April 15, 2013.)

VIDEOS_TEMPORAL_LAYOUT generates a set of stacked cosines layout for
(gx2,gy2) graph node coordinates which can serve as a reasonable timeline
display for multiple video clips.  The period for all cosines is assumed to
equal 1 minute.  VIDEOS_TEMPORAL_LAYOUT exports gx2,gy2 coordinates to
ascii output as well as updates gx2,gy2 columns in the nodes table of the
IMAGERY database.  It also exports a SQL script which contains time stamp
annotations that label the sinusoidal graph layout.  Each video clip is
also labeled on its left-hand side.

 	videos_temporal_layout --GIS_layer ./packages/imagery_metadata.pkg



========================================================================
3D VISUALIZATION PROGRAMS
========================================================================

1e.  Execute the auto-generated run_mini_convert script

~/programs/c++/svn/projects/src/mains/photosynth/run_mini_convert

Program BUNDLER_CONVERT parses and transforms Noah Snavely's BUNDLER
program text output.  BUNDLER_CONVERT can read in a set of global rotation
and scaling parameters needed to transform Noah's relatively reconstructed
XYZ points into georegistered coordinates.  After reading in the
reconstructed XYZ points, it identifies outlier points and thresholds them
away.  This program writes out the thresholded XYZ points to
"thresholded_xyz_points.dat".  It also exports to "sorted_camera_views.dat"
the XYZ-UV tiepoint pairs as a function of sorted thresholded point ID.
BUNDLER_CONVERT writes out the adjacency matrix for the photos' graph as an
edge list to "edgelist.dat".  It also exports the reconstructed points
commong to pairs of photos to "photoids_xyzids.dat".  Camera IDs vs an STL
vector of XYZIDs is also written to cameraID_vs_XYZIDS.dat.  Finally, this
program generates a TDP file for the thresholded XYZ points which contains
RGB color information.

After BUNDLER_CONVERT has run to completion, user can view BUNDLER's 3D
colored point cloud by chanting analog of following command:

	  viewpoints ./bundler/kermit/thresholded_xyz_points.osga

------------------------------------------------------------------------
2e.  Execute the auto-generated run_bundler_photos script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_bundler_photos

Program BUNDLER_PHOTOS reads in reconstructed XYZ points and cameras from
files generated by MINI[BUNDLER]_CONVERT.  It converts the cameras from
Noah's bundler coordinate system into georegistered coordinates.  TDP/OSGA
files are exported which display reconstructed camera positions.  Package
files containing reconstructed parameters need to generate 3D frusta for
each camera are written. BUNDLER_PHOTOS also exports image vs package
filename associations to bundler_IO_subdir/images_vs_packages.dat.

------------------------------------------------------------------------
3e.  Execute the auto-generated run_write_viewbundler script:

~/programs/c++/svn/projects/src/mains/photosynth/run_write_viewbundler_script

Program WRITE_VIEWBUNDLER_SCRIPT generates an executable script file for
running VIEWBUNDLE on dozens to thousands of reconstructed photos.

------------------------------------------------------------------------
4e.  Execute the auto-generated run_viewbundler script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_viewbundler


Program VIEWBUNDLER visualizes reconstructed photos as 3D view frusta
inserted into bundler's 3D point cloud.
 ~/programs/c++/svn/projects/src/mains/photosynth/run_viewbundler

