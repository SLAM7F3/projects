========================================================================
Peter's programs for processing Noah Snavely's BUNDLER output
(Cheat sheet #1 for plume reconstruction project)
========================================================================
Last updated on 3/28/12; 3/29/12; 9/18/12
========================================================================

========================================================================
INTRO STEPS
========================================================================

1a.  In this README, we define the following root directory:

	$root= ~/programs/c++/svn/projects/src/mains/photosynth/

Change directory to $root:

	cd ~/programs/c++/svn/projects/src/mains/photosynth/ 

------------------------------------------------------------------------
2a.  If a /bundler subdirectory of $root doesn't already exist, then create
one:

	mkdir bundler

Then create a new, specialized subdirectory of $root/bundler/ where most
input and output files will go.  In this README, we'll work with Noah's
kermit example.  So we name this specialized subdirectory as
bundler_IO_subdir= $root/bundler/kermit/

   a.  Copy the bundler output file generated by BUNDLER (i.e. bundle.out) 
       into bundler_IO_subdir.

   b.  Copy the list-of-images file generated by BUNDLER (i.e. list_tmp.txt) 
       into bundler_IO_subdir.

   c.  Make an images subdirectory of bundler_IO_subdir.  Copy or link all
       reconstructed JPEG image files (e.g. kermit000.jpg, 
       kermit001.jpg, etc) into bundler_IO_subdir/images/  .

------------------------------------------------------------------------
3a.  Next change directory to $root

	cd ~/programs/c++/svn/projects/src/mains/photosynth/ 

Then run GENERATE_PETER_INPUTS program via following command:

			generate_peter_inputs 

Program GENERATE_PETER_INPUTS queries the user to enter a subdirectory of
./bundler/ in which some set of images and metadata reside.  It expects to
find "list_tmp.txt" sitting in bundler_IO_subdir.  GENERATE_PETER_INPUTS
next generates an images_list.dat file containing renamed versions of the
input images.  This program then creates a packages subdir of
bundler_IO_subdir and generates a peter_inputs.pkg file containing names
for various input parameters.  Finally, GENERATE_PETER_INPUTS writes out
executable scripts for the several programs.

========================================================================
IMAGE SIZE & THUMBNAIL GENERATION PROGRAMS
========================================================================

1b.  Execute the auto-generated run_photo_sizes script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_photo_sizes

Program PHOTO_SIZES reads in a set of photo image filenames.  It
calls ImageMagick's ping command to extract image width and height
measured in pixels.  Image size results are saved into output text
file image_sizes.dat.

------------------------------------------------------------------------
2b.  Execute the auto-generated run_thumbnails script: 

  ~/programs/c++/svn/projects/src/mains/photosynth/run_thumbnails

Program THUMBNAILS generates subsampled versions of input photos within
bundler_IO_subdir/images/thumbnails/.  This expensive operation should only
be performed once!

========================================================================
3D VISUALIZATION PROGRAMS
========================================================================

1c.  Execute the auto-generated run_mini_convert script

~/programs/c++/svn/projects/src/mains/photosynth/run_mini_convert

Program MINI_CONVERT parses and transforms Noah Snavely's BUNDLER program
text output.  This program writes out the thresholded XYZ points to
"thresholded_xyz_points.dat".  It also generates TDP and OSGA files for the
thresholded XYZ points which contain RGB color information.

After MINI_CONVERT has run to completion, user can view BUNDLER's 3D
colored point cloud by chanting analog of following command:

       viewpoints ./bundler/kermit/thresholded_xyz_points.osga

------------------------------------------------------------------------
2c.  Execute the auto-generated run_bundler_photos script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_bundler_photos

Program BUNDLER_PHOTOS reads in reconstructed XYZ points and cameras from
files generated by MINI[BUNDLER]_CONVERT.  Package files containing
reconstructed parameters need to generate 3D frusta for each camera are
written.  BUNDLER_PHOTOS also exports image vs package filename
associations to bundler_IO_subdir/images_vs_packages.dat.

------------------------------------------------------------------------
3c.  Execute the auto-generated run_write_viewbundler script:

~/programs/c++/svn/projects/src/mains/photosynth/run_write_viewbundler_script

Program WRITE_VIEWBUNDLER_SCRIPT generates an executable script file for
running VIEWBUNDLER on dozens to thousands of reconstructed photos.

------------------------------------------------------------------------
4c.  Execute the auto-generated run_viewbundler script:

  ~/programs/c++/svn/projects/src/mains/photosynth/run_viewbundler


Program VIEWBUNDLER visualizes reconstructed photos as 3D view frusta
inserted into bundler's 3D point cloud.

