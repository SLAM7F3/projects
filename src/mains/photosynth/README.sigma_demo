========================================================================
Summer 2010 SIGMA demo programs
========================================================================
Last updated on 6/8/10; 6/18/10
========================================================================

========================================================================
N+1st node attaching onto MIT2317 graph
========================================================================

1a.  Open new window and change directory in order to run Michael Yee's
GraphExplorer tool:

cd ~/programs/c++/svn/projects/src/mains/graphs/GraphExplorer_Jun7_2010/
./run_startup_script


2a. In some window different from the one running Michael's GraphExplorer,
execute main program new_sift_matches:

cd ~/programs/c++/svn/projects/src/mains/photosynth
./new_sift_matches --region_filename ./bundler/individual_photo/packages/peter_inputs.pkg

Program NEW_SIFT_MATCHES first recovers the cameras which see XYZ points
within Noah's raw reconstructed point cloud from
/bundler_IO_subdir/RawXYZID_vs_cameraIDs.dat for the MIT2317 photo set.  It
next reads in a set of raw XYZ points onto which Zach matches an n+1st
photo.  NEW_SIFT_MATCHES concatenates these two lists to generate an
edgelist for the n+1st image that specifies the nodes among the original n
photos with which it has SIFT feature overlap.  The new photos's edgelist
is written to individual_photo/edgelist_n+1.dat.

3a.  Execute the main program graph_new_node:

cd ~/programs/c++/svn/projects/src/mains/photosynth

./graph_new_node \
--region_filename ./bundler/MIT2317/packages/peter_inputs.pkg \
--GIS_layer ./bundler/MIT2317/packages/graph_nodes.pkg


Program GRAPH_NEW_NODE displays the topology of an n+1st node within the
graph for n previously matched images.  It first generates the photogroup
for the n images from the contents of the photo table wtihin the
data_network database.  GRAPH_NEW_NODE then reads in the name and pixel
size of the n+1st photo from files in bundler/individual_photo/.  After
reconstructing the previously calculated graph hierarchy from the contents
of node and link tables within data_network database, this program adds the
n+1st node to the child graph.  The new node's position in the child graph
is based upon those of the nodes with which it has SIFT overlap.  Finally,
GRAPH_NEW_NODE generates a JSON file for the modified child graph which can
be displayed via Michael Yee's graph viewers.

4a.  Execute main program graphjson which sits in mains/graphs rather than
mains/photosynth:

~/programs/c++/svn/projects/src/mains/graphs/graphjson --region_filename ./bundler/individual_photo/packages/peter_inputs.pkg

Program GRAPHJSON reads in the graph edge list generated by Noah Snavely's
bundler program which establishes links between two photos if they share
SIFT features in common.  GRAPHJSON writes out a JSON file containing node
and edge information which can be parsed by Michael Yee's GraphExplorer
tool.  Michael's tool needs to be running BEFORE this program is executed
so that it can receive ActiveMQ messages generated by GRAPHJSON.

========================================================================
N+1st photo insertion into 3D point cloud
========================================================================

1b. Program INDIVIDUAL_PHOTO reads in a bundler file generated by Zach and
Karl for an n+1st reconstructed photo.  It converts between Noah's
coordinate system and geocoordinates.  A package file "photo_new.pkg"
containing reconstructed parameters needed to visualze the 3D frustum for
new camera is written out.  INDIVIDUAL_PHOTO also broadcasts an ActiveMQ
message containing the reconstructed camera's geocoordinates for display
within a Google Maps thin client.
