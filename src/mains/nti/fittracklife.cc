// ==========================================================================
// Program FITTRACKLIFE performs a quick and dirty power law fit to
// occluded vehicle lifetime as a function of Kalman filter coasting
// time results generated by program COASTING.  For occlusion
// fractions = 5%, 10% and 15%, we found using this program that
// occluded track lifetime grows approximately quadratically with
// increasing coasting time.
// ==========================================================================
// Last updated on 1/1/06
// ==========================================================================

#include <iostream>
#include <iomanip>
#include <set>
#include <string>
#include <vector>
#include "urban/bldgstrandfuncs.h"
#include "urban/cityblock.h"
#include "urban/cityblockfuncs.h"
#include "image/connectfuncs.h"
#include "threeDgraphics/draw3Dfuncs.h"
#include "ladar/featurefuncs.h"
#include "general/filefuncs.h"
#include "geometry/geometry_funcs.h"
#include "image/graphicsfuncs.h"
#include "ladar/groundfuncs.h"
#include "datastructures/Hashtable.h"
#include "image/imagefuncs.h"
#include "ladar/ladarfuncs.h"
#include "math/mathfuncs.h"
#include "math/mypolynomial.h"
#include "templates/mytemplates.h"
#include "numrec/nrfuncs.h"
#include "general/outputfuncs.h"
#include "geometry/parallelogram.h"
#include "image/recursivefuncs.h"
#include "urban/roadfuncs.h"
#include "urban/roadpoint.h"
#include "urban/roadsegment.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "urban/tree_cluster.h"
#include "urban/treefuncs.h"
#include "image/twoDarray.h"
#include "urban/urbanfuncs.h"
#include "urban/urbanimage.h"
#include "geometry/voronoifuncs.h"
#include "threeDgraphics/xyzpfuncs.h"

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::ifstream;
   using std::ios;
   using std::istream;
   using std::ofstream;
   using std::ostream;
   using std::pair;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

   string filename;
   cout << "Enter avg track lifetime vs coasting time filename:" << endl;
   cin >> filename;
//   filename="occ5.txt";
   
   filefunc::ReadInfile(filename);

   vector<double> tau_coast,lifetime;
   for (int i=0; i<filefunc::text_line.size(); i++)
   {
      double curr_tau,curr_lifetime;
      stringfunc::string_to_two_numbers(
         filefunc::text_line[i],curr_tau,curr_lifetime);
      tau_coast.push_back(curr_tau);
      lifetime.push_back(curr_lifetime);
   }
   
// Subtract off constant shift:

   vector<double> ren_lifetime;
   for (int i=0; i<lifetime.size(); i++)
   {
      ren_lifetime.push_back(lifetime[i]-lifetime[0]);
      cout << "i = " << i << " tau = " << tau_coast[i]
           <<  " renormalized lifetime = " << ren_lifetime.back() << endl;
      
   }
   
// Take logs of coasting time and track lifetimes (except for very
// first entries which now both equal zero):

   vector<double> log_tau,log_lifetime;
   for (int i=1; i<ren_lifetime.size(); i++)
   {
      log_tau.push_back(log(tau_coast[i]));
      log_lifetime.push_back(log(ren_lifetime[i]));
      cout << "i = " << i << " log_tau = " << log_tau.back()
           << " log_lifetime = " << log_lifetime.back() << endl;
   }

   double chisq;
   mypolynomial poly(1);
   poly.fit_coeffs(log_tau,log_lifetime,chisq);
   cout << "poly = " << poly << endl;
   cout << "chisq = " << chisq << endl;

   double alpha=exp(poly.get_coeff(0));
   double beta=poly.get_coeff(1);

   for (int i=0; i<lifetime.size()-1; i++)
   {
      double curr_log_tau=log_tau[i];
      double fitted_log_lifetime=poly.value(curr_log_tau);
      double delta=fitted_log_lifetime-log_lifetime[i];
      cout << "i = " << i << " fitted log lifetime = " << fitted_log_lifetime
           << " lot_lifetime = " << log_lifetime[i] << " delta = "
           << delta << endl;
   }
   
   for (int i=0; i<lifetime.size(); i++)
   {
      double fitted_lifetime=alpha*pow(tau_coast[i],beta)+lifetime[0];
//      cout << "i = " << i << " lifetime = " << lifetime[i]
//           << " fitted lifetime = " << fitted_lifetime << endl;
      cout << tau_coast[i] << "  " << fitted_lifetime << endl;
   }
   


   mypolynomial quad(2);
   quad.fit_coeffs(tau_coast,lifetime,chisq);
   cout << "quad = " << quad << endl;
   cout << "chisq = " << chisq << endl;


}


