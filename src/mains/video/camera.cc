// ==========================================================================
// Program CAMERA reads in filtered GPS/IMU information generated by
// program SPLINE from text file TPA_filtered.txt.  It then plots the
// aircraft's flight path in 3-space, the projection of the flight
// path onto the world grid (whose z value has unfortunately to be
// hardwired into this program as of 8/30/05), the lookpoint trace on
// the ground and a "curtain" of rays emanating from the plane to the
// ground lookpoints.
// ==========================================================================
// Last updated on 9/1/05
// ==========================================================================

#include <algorithm>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include "video/camera.h"
#include "color/colorfuncs.h"
#include "threeDgraphics/draw3Dfuncs.h"
#include "general/filefuncs.h"
#include "math/threevector.h"
#include "numrec/nr.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "threeDgraphics/xyzpfuncs.h"

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::ios;
   using std::ofstream;
   using std::ostream;
   using std::setw;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

   string TPA_filename="TPA_filtered.txt";
   vector<string> line;
   filefunc::ReadInfile(TPA_filename,line);
   stringfunc::comment_strip(line);

   const int n_fields=8;
   double X[n_fields];

   string output_filename="plane_posn.txt";
   ofstream outstream;
   filefunc::deletefile(output_filename);
   filefunc::openfile(output_filename,outstream);

   stringfunc::string_to_n_numbers(n_fields,line[0],X);

   for (unsigned int i=0; i<line.size(); i++)
   {
      stringfunc::string_to_n_numbers(n_fields,line[i],X);
      threevector curr_XYZ(X[2],X[3],X[4]);

      outstream << "0   " << i << "  0  " 
                << curr_XYZ.get(0) << "  "
                << curr_XYZ.get(1) << "  "
                << curr_XYZ.get(2) << "  "
                << endl;
   }
   filefunc::closefile(output_filename,outstream);
}
