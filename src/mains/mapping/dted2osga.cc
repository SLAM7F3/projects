// ==========================================================================
// Program DTED2OSGA generates scripts which call Ross Anderson's
// LODTREE program that converts TDP files generated by DTED2TDP into
// OSGA files.

// 				dted2osga

// ==========================================================================
// Last updated on 3/17/10; 10/11/11; 2/22/13; 4/5/13
// ==========================================================================

#include <iostream>
#include <string>
#include "general/filefuncs.h"
#include "math/mathfuncs.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ofstream;
using std::string;

// ==========================================================================
int main (int argc, char * argv[])
{
   std::set_new_handler(sysfunc::out_of_memory);

   int dirnumber_start=-179;
//   int dirnumber_start=-95;
//   int dirnumber_start=37;
   cout << "Enter starting directory number:" << endl;
   cout << "(Use negative value to indicate longitudes WEST of Greenwich)"
        << endl;
//   cin >> dirnumber_start;

   int dirnumber_stop=-103;
//   int dirnumber_stop=-80;
//   int dirnumber_stop=49;
   cout << "Enter stopping directory number:" << endl;
   cout << "(Use negative value to indicate longitudes WEST of Greenwich)"
        << endl;
//   cin >> dirnumber_stop;

   string extra_char="";
   if (mathfunc::ndigits_before_decimal_point(dirnumber_start)==2)
   {
      extra_char="0";
   }

   string tdpdir_basename;
   tdpdir_basename="/data_second_disk/DTED/Hawaii/tdp/";
//   tdpdir_basename="/data_third_disk/DIME/DTED/Florida/tdp/";
   string osgadir_basename;
   osgadir_basename="/data_second_disk/DTED/Hawaii/osga/";
//   osgadir_basename="/data_third_disk/DIME/DTED/Florida/osga/";

//   cout << "Enter basename for subdirectories containing input TDP files:" 
//        << endl;
//   cin >> tdpdir_basename;

   int tilenumber_start=17;
   int tilenumber_stop=29;
//   int tilenumber_start=16;
//   int tilenumber_stop=36;
//   int tilenumber_start=28;
//   int tilenumber_stop=39;

   cout << "Enter staring tilenumber:" << endl;
//   cin >> tilenumber_start;
   cout << "Enter stopping tilenumber:" << endl;
//   cin >> tilenumber_stop;

   string output_filename="run_tdp_to_osga";
   ofstream outstream;
   filefunc::openfile(output_filename,outstream);
   
   for (int dirnumber=dirnumber_start; dirnumber <= dirnumber_stop;
        dirnumber++)
   {
      string input_subdir,output_subdir;
      if (dirnumber < 0)
      {
         input_subdir=tdpdir_basename+"w"+extra_char+
            stringfunc::number_to_string(fabs(dirnumber))+"/";
         output_subdir=osgadir_basename+"w"+extra_char+
            stringfunc::number_to_string(fabs(dirnumber))+"/";
      }
      else
      {
         input_subdir=tdpdir_basename+"e"+extra_char+
            stringfunc::number_to_string(dirnumber)+"/";
         output_subdir=osgadir_basename+"e"+extra_char+
            stringfunc::number_to_string(dirnumber)+"/";
      }
      filefunc::dircreate(output_subdir);

      for (int tilenumber=tilenumber_start; tilenumber <= tilenumber_stop;
           tilenumber++)
      {
         string dted_filename_prefix=
            "n"+stringfunc::integer_to_string(tilenumber,2);

         string tdp_filename,osga_filename;
         if (dirnumber < 0)
         {
            tdp_filename=input_subdir+
               "w"+extra_char+stringfunc::number_to_string(fabs(dirnumber))+
               dted_filename_prefix+".tdp";
            osga_filename=
               "w"+extra_char+stringfunc::number_to_string(fabs(dirnumber))+
               dted_filename_prefix+".osga";
         }
         else
         {
            tdp_filename=output_subdir+
               "e"+extra_char+stringfunc::number_to_string(dirnumber)+
               dted_filename_prefix+".tdp";
            osga_filename=
               "e"+extra_char+stringfunc::number_to_string(fabs(dirnumber))+
               dted_filename_prefix+".osga";
         }
//         cout << "tdp_filename = " << tdp_filename << endl;

         if (!filefunc::fileexist(tdp_filename)) continue;
         string command="lodtree "+tdp_filename;
//         string command="/usr/local/bin/lodtree "+tdp_filename;

         outstream << command << endl;
         command="mv "+osga_filename+" "+output_subdir;
         outstream << command << endl;

      } // loop over tilenumber index
   } // loop over dirnumber index   

   filefunc::closefile(output_filename,outstream);
   string command="chmod a+x ./"+output_filename;
   sysfunc::unix_command(command);

   string banner="Executable script written to "+output_filename;
   outputfunc::write_banner(banner);
} 

