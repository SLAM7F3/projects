// ========================================================================
// Program MCL_HIERARCHY is a testbed for experimenting with the graph
// cluster hierarchies generated by MCLCM.

/*

mcl_hierarchy --region_filename ./bundler/MIT2317/packages/peter_inputs.pkg

*/

// ========================================================================
// Last updated on 4/26/10; 4/28/10; 4/30/10; 5/4/10
// ========================================================================

#include <iostream>
#include <string>
#include <vector>
#include "general/filefuncs.h"
#include "graphs/graphfuncs.h"
#include "graphs/graph.h"
#include "graphs/graph_hierarchy.h"
#include "passes/PassesGroup.h"
#include "general/sysfuncs.h"
#include "math/twovector.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

   string subdir="/home/cho/programs/c++/svn/projects/src/mains/graphs/clusters/mclcm/MIT2317/";
//   string subdir="/home/cho/programs/c++/svn/projects/src/mains/graphs/clusters/mclcm/MIT20K/";

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   PassesGroup passes_group(&arguments);

   string bundle_filename=passes_group.get_bundle_filename();
//   cout << " bundle_filename = " << bundle_filename << endl;
   string bundler_IO_subdir=filefunc::getdirname(bundle_filename);
   cout << "bundler_IO_subdir = " << bundler_IO_subdir << endl;
   string edgelist_filename=bundler_IO_subdir+"edgelist.dat";

   graph_hierarchy graphs_pyramid;

   int graph_ID=0;
   int level=0;
   graph* edgelist_graph_ptr=graphfunc::generate_graph_from_edgelist(
      edgelist_filename,graph_ID,level);

   string mclcm_cone_filename=subdir+"mcl.cone";
   vector<twovector> selected_mclcm_clusters=
      graphfunc::extract_hierarchy_cluster_sizes(mclcm_cone_filename);

   graphfunc::parse_mcl_cone_file(
      mclcm_cone_filename,&graphs_pyramid,edgelist_graph_ptr);

   graphs_pyramid.rename_parental_cluster_labels(
      edgelist_graph_ptr->get_max_node_ID());
   
   graphs_pyramid.compute_order_of_magnitude_clusters(
      selected_mclcm_clusters);

}
