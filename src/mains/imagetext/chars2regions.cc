// ==========================================================================
// Program CHARS2REGIONS imports synthesized text character images
// generated by CHARS2PNGS.  In July 2012, we empirically found that 
// synthetic text characters generally have a nontrivial intensity
// distribution.  So for each character image, we compute a reasonable
// threshold that can be used to convert it into a binary image.
// After binarizing, CHARS2REGIONS next counts the number of connected
// components.  It moves all binary text character images containing a
// single connected component into single_component_subdir.

//				chars2regions

// ==========================================================================
// Last updated on 7/8/12; 7/11/12
// ==========================================================================

//   c='0';	// ascii = 48
//   c='9';	// ascii = 57

//   c='A';	// ascii = 65
//   c='Z';	// ascii = 90

//   c='a';	// ascii = 97
//   c='z';	// ascii = 122

#include <iostream>
#include <string>
#include <vector>
#include "color/colorfuncs.h"
#include "math/constants.h"
#include "general/filefuncs.h"
#include "image/imagefuncs.h"
#include "numrec/nrfuncs.h"
#include "general/outputfuncs.h"
#include "image/pngfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "video/texture_rectangle.h"

#include "image/binaryimagefuncs.h"
#include "video/camerafuncs.h"
#include "image/graphicsfuncs.h"
#include "geometry/plane.h"
#include "math/prob_distribution.h"
#include "math/rotation.h"
#include "video/videofuncs.h"

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::string;
   using std::vector;

   std::set_new_handler(sysfunc::out_of_memory);

   string synthetic_subdir="./synthetic_chars/";
   
   vector<string> allowed_suffixes;
   allowed_suffixes.push_back("png");
   vector<string> char_image_filenames=filefunc::
      files_in_subdir_matching_specified_suffixes(
         allowed_suffixes,synthetic_subdir);

   texture_rectangle* texture_rectangle_ptr=new texture_rectangle();
   twoDarray* cc_labels_twoDarray_ptr=NULL;
   int region_counter=0;

   string single_component_subdir=synthetic_subdir+"single_cc/";
   filefunc::dircreate(single_component_subdir);

   for (unsigned int i=0; i<char_image_filenames.size(); i++)
   {
      texture_rectangle_ptr->import_photo_from_file(char_image_filenames[i]);
      texture_rectangle_ptr->convert_color_image_to_greyscale();  

      twoDarray* ptwoDarray_ptr=texture_rectangle_ptr->get_ptwoDarray_ptr();
      int xdim=ptwoDarray_ptr->get_xdim();
      int ydim=ptwoDarray_ptr->get_ydim();

// Accumulate non-negligible pixels intensities within STL vector
// nonzero_intensities:

      vector<double> nonzero_intensities;
      for (int py=0; py<ydim; py++)
      {
         for (int px=0; px<xdim; px++)
         {
            double curr_p=ptwoDarray_ptr->get(px,py);
            if (curr_p > 10) 
            {
//               cout << "py = " << py << " px = " << px 
//                    << " ptwoDarray = " << ptwoDarray_ptr->get(px,py) << endl;
               nonzero_intensities.push_back(curr_p);
            }
         }
      }
//      cout << "char_image = " << char_image_filenames[i] << endl;
      if (nonzero_intensities.size() < 5) continue;

// Compute reasonable threshold used to convert synthetic text char
// image into a binary image:

      prob_distribution prob(nonzero_intensities,100);
//      double intensity_05=prob.find_x_corresponding_to_pcum(0.05);
      double intensity_10=prob.find_x_corresponding_to_pcum(0.1);
//      double intensity_20=prob.find_x_corresponding_to_pcum(0.2);
//      double intensity_25=prob.find_x_corresponding_to_pcum(0.25);
//      double intensity_30=prob.find_x_corresponding_to_pcum(0.3);
//      double intensity_40=prob.find_x_corresponding_to_pcum(0.4);
//      double intensity_50=prob.find_x_corresponding_to_pcum(0.5);
//      prob.writeprobdists(false);

//      cout << "intensity_10 = " << intensity_10 
//           << " intensity_20 = " << intensity_20 << endl;
//      cout << "intensity_30 = " << intensity_30
//           << " intensity_40 = " << intensity_40
//           << " intensity_50 = " << intensity_50 << endl;
//      cout << "median = " << mathfunc::median_value(nonzero_intensities)
//           << endl;

//      double median,quartile_width;
//      mathfunc::median_value_and_quartile_width(
//         nonzero_intensities,median,quartile_width);
//      cout << "median = " << median << " quartile_width = " 
//           << quartile_width << endl;

      twoDarray* pbinary_twoDarray_ptr=new twoDarray(ptwoDarray_ptr);

      double threshold=intensity_10;
      double znull=0;
      double zfill=200;
      binaryimagefunc::binary_threshold(
         threshold,ptwoDarray_ptr,pbinary_twoDarray_ptr,znull,zfill);

// Export binary image to output PNG file:

      int n_channels=3;
      texture_rectangle_ptr->initialize_twoDarray_image(
         pbinary_twoDarray_ptr,n_channels);
      string binary_filename=
         "synthetic_region_"+stringfunc::integer_to_string(region_counter,5)
         +".png";
      texture_rectangle_ptr->write_curr_frame(binary_filename);

      delete cc_labels_twoDarray_ptr;
      cc_labels_twoDarray_ptr=new twoDarray(ptwoDarray_ptr);

// Count number of connected components within binary PNG file.  If it
// equals 1, move PNG file into subdirectory holding character images
// which could correspond to single extremal regions:

      int n_neighbors=4;
      int label_offset=0;
      int n_components=graphicsfunc::label_connected_components(
         n_neighbors,label_offset,pbinary_twoDarray_ptr,
         cc_labels_twoDarray_ptr);

      delete pbinary_twoDarray_ptr;

      cout << "i = " << i 
           << " char_image = " 
           << filefunc::getbasename(char_image_filenames[i])
           << " n_components = " << n_components << endl;

      if (n_components==1)
      {
         string unix_cmd="mv "+binary_filename+" "+single_component_subdir;
         sysfunc::unix_command(unix_cmd);
         region_counter++;
      }

   }

   delete texture_rectangle_ptr;
   delete cc_labels_twoDarray_ptr;
}

