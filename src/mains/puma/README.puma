============================================================================
PUMA notes
============================================================================
Last updated on 5/15/13; 5/20/13; 10/28/13
============================================================================

Preliminaries
-------------

*.  Create new subdir of bundler/Puma/ . Place video frames into images/
subdir.

*.  Run mains/photosynth/generate_peter_inputs . Copy
bundler_IO_subdir/packages/peter_inputs.pkg to peter_inputs_orig.pkg . 

*.  Program mains/puma/PARSE_PUMA_METADATA imports the metadata text file
generated for a PUMA UAV flight.  It computes the UAV's starting altitude
on the ground as well as its takeoff and landing epoch times.  It also
exports a simpler metadata file containing video frame filename, UAV
geolocation, UAV orientation and ground target geolocation as functions of
GPS time.

*.  Program TIMINGS converts takeoff/landing metadata extracted from the
Puma metadata file into epoch seconds.

Puma imagery and metadata programs
----------------------------------

*.  Program mains/puma/VISUALIZE_PUMA_METADATA reads in the metadata
ascii file generated by program PARSE_PUMA_METADATA.  It extracts aircraft
GPS video camera pointing information from this metadata file. This program
generates a TDP/OSGA file containing the aircraft's GPS track and
line-of-sight rays from the aircraft towards the
ground. VISUALIZE_FLIR_METADATA also outputs package files containing video
frame filenames and their hardware derived camera parameters to
bundler_IO_subdir/packages/hardware_in.  Finally, it exports an executable
script for program SEPARATED_PACKAGES.

*.  Program EARTHBUNDLER backprojects reconstructed aerial view frusta
images onto a ground Z-plane.  The geometrically stabilized backprojections
are played back as the view frusta follow the aircraft's flight path over
time.  A Cessna model follows the air vehicle's track.  A background static
satellite image serves as an absolute map against which the dynamic
foreground backprojections can be intuitively compared.


Feature matching and bundle adjustment programs
-----------------------------------------------

*.  Program SEPARATED_PACKAGES imports an entire set of video frames for
some flight.  It then queries the user to enter the maximum permissible
angular separation between subsampled frames which will be bundle adjusted.
On 5/7/13, we empirically found that setting this angular threhsold to 5
degs yielded quite good reconstruction results for GEO pass 20120105_1402!
SEPARATED_PACKAGES exports the angularly separated package filenames to an
output text file which can serve as input to progrmas RESTRICTED_ASIFT and
TRIANGULATE.  It also outputs the image filenames corresponding to those
packages to bundler_IO_subdir/list_tmp.txt.

*.  Program RESTRICTED_ASIFT is a variant of program ASIFTVID.  It performs
expensive feature matching only between pairs of aerial video frames whose
hardware estimates for camera orientations indicate that the separation
angle between image planes is less than some threshold value.

*.  Program TRIANGULATE imports SIFT/ASIFT feature tracks generated by
program RESTRICTED_ASIFTVID.  It also takes in package files for the n
video frames processed by ASIFTVID which contain hardware-based camera
parameters.  TRIANGULATE backprojects each 2D feature into a 3D ray.  It
then computes multi-line intersection points for each feature track.
Triangulated 3D points are exported to a features_3D.txt file, and
correlated 2D/3D feature information is written photograph_features.html .

TRIANGULATE exports hardware-based camera parameters and
triangulated ground points to bundle_raw.out.  BUNDLER is
subsequently called to perform (re)bundle adjustment with camera
focal parameters held fixed at their previously calibrated values.
Bundle-adjusted camera positions are written to an output text
file.

*.  For Bundler output, re-run generate_peter_inputs.  Then execute
run_photo_sizes, run_thumbnails, run_mini_convert, run_bundler_photos,
run_write_viewbundler_script and run_viewbundler as described in
mains/photosynth/README.view_bundler_output.

*. Program GPSFIT reads in reconstructed camera posns generated by program
PARSE_SSBA in UTM coords.  It also reads in a text file containing hardware
GPS measurements for the camera generated by program TRIANGULATE.  The two
input files are assumed to be in precise correspondence.  GPSFIT applies
B. Horn's closed-form least-squares fitting procedure to compute the global
rotation, translation and scaling needed to transform the bundler camera
path into the GPS path.  It reports the average residual between the
transformed and measured paths.  This program also exports the transformed
path as a TDP and OSGA file.

*. Program GPSFIT reads in reconstructed camera posns generated by
program PARSE_SSBA in UTM coords.  It also reads in a text
file containing hardware GPS measurements for the camera generated
by program TRIANGULATE.  If the two input files are NOT in precise
correspondence, GPSFIT generates a new version of the GPS
measurements file whose entries do match those in the reconstructed
camera posns file.

GPSFIT reports the average residual between the transformed and measured
paths.  This program also exports the transformed path as a TDP and OSGA
file.

*.  Re-execute run_mini_convert, run_bundler_photos and run_viewbundler
after georegistered version of peter_inputs.pkg is generated by program
GPSFIT.


*.  Program VIDEO_PROPAGATOR is a variant of mains/photosynth/PROPAGATOR.
It pops open a 3D window displaying a bundle-adjusted point cloud aerial
OBSFRUSTA. It also opens a 2D window in which the video frame for the most
currently selected OBSFRUSTUM is displayed.  When the 2D window works in
RUN_MOVIE_MODE, all video frames may easily be viewed by pressing the
left/right arrow keys.

A user may mark some imageplane point of interest within the 2D window
after entering into INSERT_FEATURE_MODE.  A 3D ray is then backprojected
from the current OBSFRUSTUM down towards ground-level.  Feature 0 appears
in all other video frames within the lower left corner of each image plane.
Video tiepoints may be manually established by dragging the zeroth feature
crosshairs from the lower left corner to an appropriate image plane
location in MANIPULATE_FEATURE_MODE.  Within the 3D window, a purple ray
moves as the 2D feature is dragged.

Once 2 or more tiepoints have been established, the user may press 'd'
within the 3D window provided it operates in MANIPULATE_FUSED_DATA_MODE.  A
set of 3D crosshairs then appears at the best-fit intersection of the
backprojected rays.

Video orthorectification programs
---------------------------------

*.  Program GROUNDPLANE imports the sparse point cloud generated by
PARSE_SSBA.  It fits a plane to the cloud and computes the distribution of
point distances to the fitted plane.  Any point that lies more than 5
quartile-widths away from the median distance is assumed to be an outlier.
GROUNDPLANE exports a cleaned TDP file consisting of just inlier points.

*. Program ORTHORECTIFY imports bundle-adjusted triangulated points and
camera parameters for some set of input aerial images.  It fits a world
z-plane to the triangulated points (which we assume provides a good
approximation to the groundplane). ORTHORECTIFY then reprojects each aerial
image onto the ground plane and outputs an orthorectified image.


Video navigation programs
-------------------------

*.  Program CAMGEOREG imports a georegistered TIF file generated from a
Google Earth screen shot plus ground control points.  It also takes in an
aerial video frame. CAMGEOREG extracts SIFT and ASIFT features via calls to
Lowe's SIFT binary and the affine SIFT library.  Consolidated SIFT & ASIFT
interest points and descriptors are exported to key files following Lowe's
conventions.  CAMGEOREG next performs tiepoint matching via homography
estimation and RANSAC on the consolidated sets of image features.  The
best-fit homography matrix and feature tracks labeled by unique IDs are
exported to output text files.

*.  Program FLIR_FOCAL imports 3D/2D tiepoints selected from HAFB ALIRT and
FLIR video frames as well as corresponding GPS camera position
measurements.  FLIR_FOCAL computes world-space angles between all tiepoint
pairs and derives a dimensionless focal parameter from each angle.  We
wrote this utility program in order to calibrate "five deg" f.
