// ========================================================================
// Program HUMMERHEIGHT reads in a polyline file generated by program
// SATCOMM in which the vehicle's height above sea-level is set equal
// to some fake constant.  It then instantiates a high-resolution data
// visitor which finds the XYZ point whose XY projection is closest to
// a given vehicle XY location.  The vehicle's Z value is set equal to
// the closest point's z plus some height offset.  HUMMERHEIGHT writes
// out a new polyline file containing the extracted z values which can
// be read in and displayed by program SATCITIES.
// ========================================================================
// Last updated on 4/23/07; 8/20/07; 9/21/07; 10/15/07
// ========================================================================

#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <osgDB/FileUtils>
#include <osgUtil/Optimizer>
#include <osgDB/ReadFile>
#include <osgDB/WriteFile>

#include "osg/osgOrganization/Decorations.h"
#include "general/filefuncs.h"
#include "osg/osgSceneGraph/HiresDataVisitor.h"
#include "osg/ModeController.h"
#include "osg/osgSceneGraph/MyDatabasePager.h"
#include "osg/osgOperations/Operations.h"
#include "passes/PassesGroup.h"
#include "osg/osg3D/PointCloudsGroup.h"
#include "osg/osg3D/PointCloudKeyHandler.h"
#include "osg/osgGeometry/PolyLinesGroup.h"
#include "general/stringfuncs.h"
#include "osg/osg3D/Terrain_Manipulator.h"
#include "osg/osgWindow/ViewerManager.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::ifstream;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);
   
// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);
   int cloudpass_ID=passes_group.get_curr_cloudpass_ID();

// Construct the viewer and instantiate a ViewerManager:

   WindowManager* window_mgr_ptr=new ViewerManager();
   window_mgr_ptr->initialize_window("3D imagery");

// Create OSG root node:

   osg::Group* root = new osg::Group;

// Instantiate Operations object to handle mode, animation and image
// number control:

   Operations operations(ndims,window_mgr_ptr);

   ModeController* ModeController_ptr=operations.get_ModeController_ptr();
   root->addChild(operations.get_OSGgroup_ptr());

// Add a custom manipulator to the event handler list:

   osgGA::Terrain_Manipulator* CM_3D_ptr=new osgGA::Terrain_Manipulator(
      ModeController_ptr,window_mgr_ptr);
   window_mgr_ptr->set_CameraManipulator(CM_3D_ptr);

// Instantiate group to hold all decorations:
   
   Decorations decorations(window_mgr_ptr,ModeController_ptr,CM_3D_ptr);

// Instantiate AlirtGrid decorations group:

   AlirtGrid* grid_ptr=decorations.add_AlirtGrid(
      ndims,passes_group.get_pass_ptr(cloudpass_ID));
   threevector* grid_origin_ptr=grid_ptr->get_world_origin_ptr();

// Instantiate group to hold pointcloud information:

   PointCloudsGroup clouds_group(
      passes_group.get_pass_ptr(cloudpass_ID),grid_origin_ptr);
   PointCloud* cloud_ptr=clouds_group.generate_new_Cloud();
   window_mgr_ptr->get_EventHandlers_ptr()->push_back(
      new PointCloudKeyHandler(&clouds_group,ModeController_ptr));
   root->addChild(clouds_group.get_OSGgroup_ptr());

// Initialize ALIRT grid based upon cloud's bounding box:

   decorations.get_AlirtGridsGroup_ptr()->initialize_grid(
      grid_ptr,clouds_group.get_xyz_bbox());

// Instantiate a MyDatabasePager to handle paging of files from disk:

   viewer::MyDatabasePager* MyDatabasePager_ptr=new viewer::MyDatabasePager(
      clouds_group.get_SetupGeomVisitor_ptr(),
      clouds_group.get_ColorGeodeVisitor_ptr());

// Read in initial polylines file for HUMMER track:

   string fake_height_track_filename="hummer_track.txt";
   cout << "Enter track filename containing fake heights:" << endl;
   cin >> fake_height_track_filename;
   filefunc::ReadInfile(fake_height_track_filename);

   vector<double> time;
   vector<int> polyline_ID,pass_number;
   vector<osg::Vec3> V;
   vector<osg::Vec4> color;
   const double alpha=1.0;
   for (unsigned int i=0; i<filefunc::text_line.size(); i++)
   {
      vector<double> input=stringfunc::string_to_numbers(
         filefunc::text_line[i]);
      time.push_back(input[0]);
      polyline_ID.push_back(basic_math::round(input[1]));
      pass_number.push_back(basic_math::round(input[2]));
      V.push_back(osg::Vec3(input[3],input[4],0));
      color.push_back(osg::Vec4(input[6],input[7],input[8],alpha));
   }
   
   HiresDataVisitor* HiresDataVisitor_ptr=new HiresDataVisitor(
      MyDatabasePager_ptr,V);
   cloud_ptr->get_DataNode_ptr()->accept(*HiresDataVisitor_ptr);

   string revised_track_filename=
      stringfunc::prefix(fake_height_track_filename)+"_lines.txt";
   ofstream outstream;
   outstream.precision(10);
   filefunc::openfile(revised_track_filename,outstream);

   const double z_shift=3; // meters
   for (unsigned int j=0; j<time.size(); j++)
   {
      osg::Vec3 curr_XYZ(HiresDataVisitor_ptr->get_XYZ(j));

      outstream << time[j] << " "
                << polyline_ID[j] << " "
                << pass_number[j] << " "
                << curr_XYZ.x() << " " 
                << curr_XYZ.y() << " " 
                << curr_XYZ.z()+z_shift << " " 
                << color[j].r() << " "
                << color[j].g() << " "
                << color[j].b() << " "
                << endl;
   }

   filefunc::closefile(revised_track_filename,outstream);
}
