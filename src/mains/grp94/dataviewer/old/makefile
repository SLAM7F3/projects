
## this makefile automatically generated by lazy_make
## on Tue Mar  4  9:37:59 2003




TARGETS = dataviewer

#TARGET_BINS = 
#TARGET_LIBS = 
#TARGET_HEADERS = 

INSTALL_BIN_DIR = $(DIST)/bin
INSTALL_LIB_DIR = $(DIST)/lib
INSTALL_INC_DIR = $(DIST)/include
#   the local libs are gotten from the environment
     LOCAL_LIBS = $(DIST)


####### Compiler, tools and options
      CC = gcc
     CXX = g++
    LINK = g++
    MAKE = make
      RM = -rm
      CP = -cp -v
     TAR = -tar -cp


####### Flags
     BASE_WARNING_FLAGS = -Wall -Wno-long-long 
#    XTRA_WARNING_FLAGS =  -Wno-long-long -pedantic -Wpointer-arith  -Wcast-align   -Wcast-qual -Winline
     WARNING_FLAGS = $(BASE_WARNING_FLAGS)  $(XTRA_WARNING_FLAGS)


     BASE_OPTIMIZATION_FLAGS = -O3 
#     XTRA_OPTIMIZATION_FLAGS = -ffast-math  -funroll-loops -fstrict-aliasing
     OPTIMIZATION_FLAGS = $(BASE_OPTIMIZATION_FLAGS)  $(XTRA_OPTIMIZATION_FLAGS)

#    BASE_PROFILE_FLAGS = -p 			#for prof
#    BASE_PROFILE_FLAGS = -pg 			#for gprof
#    XTRA_PROFILE_FLAGS = 
     PROFILE_FLAGS = $(BASE_PROFILE_FLAGS)  $(XTRA_PROFILE_FLAGS)

#    BASE_DEBUG_FLAGS = -g1 			#level 1 debug level (lowest)
#    BASE_DEBUG_FLAGS = -g  			#level 2 debug level (default)
#    BASE_DEBUG_FLAGS = -g2 			#level 3 debug level (highest)
#    BASE_DEBUG_FLAGS = -g -lefence 			#level 2 w/ electric fence
#    XTRA_DEBUG_FLAGS = 
     DEBUG_FLAGS = $(BASE_DEBUG_FLAGS)  $(XTRA_DEBUG_FLAGS)

#    XTRA_FLAGS = -march=i686

    BASE_LIBS = -lm
#   XTRA_LIBS = -lllmatrix -lpopt
     LIBS = $(BASE_LIBS) $(XTRA_LIBS)
   XTRA_LIB_PATH = -L$(LOCAL_LIBS)/lib
   XTRA_INCLUDE_PATH = -I$(LOCAL_LIBS)/include


  CFLAGS = $(OPTIMIZATION_FLAGS) $(WARNING_FLAGS) $(DEBUG_FLAGS) $(PROFILE_FLAGS) $(XTRA_FLAGS) 
CXXFLAGS = $(OPTIMIZATION_FLAGS) $(WARNING_FLAGS) $(DEBUG_FLAGS) $(PROFILE_FLAGS) $(XTRA_FLAGS) 
# INCPATH = -I/usr/X11R6/include -I/usr/lib/gcc-lib -I/usr/include/g++
 INCPATH = $(XTRA_INCLUDE_PATH)
  LFLAGS = $(DEBUG_FLAGS) $(PROFILE_FLAGS)
  SO_FLAGS=-shared


####### Compile commands
     LINK_C=$(CC) $(LFLAGS) -o $@ $^ $(LIBS) $(XTRA_LIB_PATH)
   LINK_CXX=$(CXX) $(LFLAGS) -o $@ $^ $(LIBS) $(XTRA_LIB_PATH)
LINK_CXX_SO=$(CXX) $(LFLAGS) -o $@ $^ $(LIBS) $(XTRA_LIB_PATH) $(SO_FLAGS)


####### Build rules

default: $(TARGETS)


all: $(TARGETS)


.PHONY: clean

clean:
	$(RM) -f *.[oO]
	$(RM) -f *~
	$(RM) -f core

install: $(TARGET)
	$(CP) $(TARGET_BIN) $(INSTALL_BIN_DIR) 
	$(CP) $(TARGET_LIBS) $(INSTALL_LIB_DIR) 
	$(CP) $(TARGET_HEADERS) $(INSTALL_INC_DIR) 


####### Implicit rules


.SUFFIXES: .cpp .cxx .cc .C .c

.o.so:
	$(LINK_CXX_SO)

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<


####### Dependencies

dataviewer: dvCamera.o dvCameraAuto.o dvCollection.o dvData.o \
            dvColormap.o colormaps_opengl.o dvDataConstraint.o \
            Frustum.o dvDataCollection.o dvDataTreeNode.o \
            dvDataPointsViewProperties.o dvDataPointCollection.o \
            dvDataPoints.o base_file.o dvDataSequence.o \
            dvDataTreeLeaf.o fif_file.o harris_file.o xyzp_file.o \
            swapbyte.o
	$(LINK_CXX)

include makefile.deps
