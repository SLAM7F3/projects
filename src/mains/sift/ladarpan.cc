// ========================================================================
// Program LADARPAN reads in package files for a group of panoramic
// photo stills which have previously been mosaiced via main program
// PANORAMA.  It also reads in SIFT feature tiepoints generated by
// program TIEPOINTS as well as manually established tiepoints
// selected between a ladar point cloud and some small number of photo
// stills.  LADARPAN computes a constant angular scale factor by which
// the constellation of manually extracted image space feature rays
// needs to be multiplied by in order to match the angular extent
// spanned by the corresponding world space rays derived from the
// ladar point cloud.  LADARPAN also computes the global rotation
// which maps the rescaled image space ray constellation onto the
// ladar rays in absolute world space coordinates.  After an improved
// second set of rotated and rescaled package files are written to
// disk, they can be directly imported into programs VIDPANMATCH and
// PANCITIES in order to align the panorama with the ladar point
// cloud.

// Note added on 3/6/11: We learned the hard and painful way that a
// section of code in GraphicalsGroup::initialize_Graphical()
// needs to be commented out in order for LADARPAN to work correctly.
// If the section is left in, ladar features which have no image
// tiepoint counterpart are assigned XYZ=(0,0,0).  This completely
// fouls up focal parameter and rotation angle extraction in LADARPAN.

// ========================================================================
// Last updated on 2/10/09; 2/15/09; 3/29/09; 3/6/11
// ========================================================================

#include <iostream>
#include <string>
#include <vector>
#include <osgUtil/Optimizer>
#include <osgDB/ReadFile>
#include <osgDB/WriteFile>

#include "video/camera.h"
#include "math/constant_vectors.h"
#include "osg/osgOrganization/Decorations.h"
#include "osg/osgFeatures/FeaturesGroup.h"
#include "general/filefuncs.h"
#include "osg/ModeController.h"
#include "templates/mytemplates.h"
#include "osg/osgOperations/Operations.h"
#include "optimum/optimizer.h"
#include "optimum/optimizer_funcs.h"
#include "passes/PassesGroup.h"
#include "video/photograph.h"
#include "video/photogroup.h"
#include "osg/osg3D/Terrain_Manipulator.h"
#include "osg/osgWindow/ViewerManager.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ifstream;
using std::string;
using std::vector;

// ==========================================================================
int main( int argc, char** argv )
{

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);
   int n_passes=passes_group.get_n_passes();

// Construct the viewer and instantiate a ViewerManager:

   WindowManager* window_mgr_ptr=new ViewerManager();
   window_mgr_ptr->initialize_window("3D imagery");

// Create OSG root node:

   osg::Group* root = new osg::Group;

// Instantiate Operations object to handle mode, animation and image
// number control:

   Operations operations(ndims,window_mgr_ptr,passes_group);

   ModeController* ModeController_ptr=operations.get_ModeController_ptr();
   root->addChild(operations.get_OSGgroup_ptr());

// Add a custom manipulator to the event handler list:

   osgGA::Terrain_Manipulator* CM_3D_ptr=new osgGA::Terrain_Manipulator(
      ModeController_ptr,window_mgr_ptr);
   window_mgr_ptr->set_CameraManipulator(CM_3D_ptr);

// Instantiate group to hold all decorations:
   
   Decorations decorations(window_mgr_ptr,ModeController_ptr,CM_3D_ptr);

// Read photographs from input video passes:

   photogroup* photogroup_ptr=new photogroup;
   photogroup_ptr->read_photographs(passes_group);

//   string SIFT_features_subdir="./features/";
//   string order_filename=SIFT_features_subdir+"lobby_photo_order.dat";
//   string SIFT_features_subdir="./features/Boston_skyline_Jan6_2009/";
//   string order_filename=
//      SIFT_features_subdir+"Boston_skyline_photo_order.dat";

//   photogroup_ptr->set_photo_order(order_filename);
   
   int n_photos(photogroup_ptr->get_n_photos());
   optimizer* optimizer_ptr=new optimizer(photogroup_ptr);
   optimizer_ptr->set_fit_external_params_flag(false);

/*
// Note added on 2/10: We really don't need to read in SIFT features,
// for they are no longer used to match panorama with 3D ladar point
// cloud.  But optimizer::extract_manual_feature_info() needs to be
// modified so that it doesn't depend upon photo order.  We'll fix
// this later...

// Instantiate cumulative FeaturesGroup to hold large number of SIFT
// UV coordinates:

   FeaturesGroup* SIFT_FeaturesGroup_ptr=decorations.add_Features(
      ndims,passes_group.get_pass_ptr(0));
   string subdir="./features/";
   SIFT_FeaturesGroup_ptr->read_in_photo_features(photogroup_ptr,subdir);
//   bool output_only_multicoord_features_flag=true;
//   SIFT_FeaturesGroup_ptr->write_feature_html_file(
//      photogroup_ptr,output_only_multicoord_features_flag);

   exit(-1);
*/

// Instantiate FeaturesGroup to hold small number of manually
// extracted ladar and corresponding panoramic stills features:

   threevector* grid_origin_ptr=NULL;
   FeaturesGroup* manual_FeaturesGroup_ptr=new FeaturesGroup(
      ndims,passes_group.get_pass_ptr(n_passes-1),CM_3D_ptr,grid_origin_ptr);
//   string manual_features_subdir="./features/Lobby7/manually_selected/";
//   string manual_features_filename=manual_features_subdir+
//      "features_manual_combined_14.txt";

//   string manual_features_subdir=
//      "./features/Boston_skyline_Jan6_2009/manually_selected/";
//   string manual_features_filename=
//      manual_features_subdir+"features_manual_combined.txt";

   string manual_features_subdir=
//      "/home/cho/programs/c++/svn/projects/src/mains/video/Qt/";
//      "/home/cho/programs/c++/svn/projects/src/mains/video/Qt/stadium_renov/";
      "/home/cho/programs/c++/svn/projects/src/mains/video/Qt/pressbox/";
   string manual_features_filename=
      manual_features_subdir+"features_manually_combined.txt";

   manual_FeaturesGroup_ptr->read_feature_info_from_file(
      manual_features_filename);
//   manual_FeaturesGroup_ptr->write_feature_html_file();
//   manual_FeaturesGroup_ptr->write_feature_html_file(
//      photogroup_ptr,false,false);
   manual_FeaturesGroup_ptr->write_feature_html_file(25);

   optimizer_ptr->extract_manual_feature_info(manual_FeaturesGroup_ptr);

// Img-0134 panorama:

//   threevector camera_posn(233429.0309, 3720472.64, 977.3587353);

// Stadium renovation panorama:

//   threevector camera_posn(233431.8176 , 3720599.809 , 983.4573999);

//   threevector camera_posn(233431.8176 , 3720599.809 , 983.4573999);

// Pressbox panorama:

   threevector camera_posn(233277.1824 ,  3720503.258, 1006.364875);

   photogroup_ptr->globally_reset_camera_world_posn(camera_posn);
   optimizer_ptr->compute_world_and_imagespace_feature_rays();

   double scale_factor=
      optimizer_ptr->compute_scalefactor_between_world_and_imagespace_rays();
//   cout << "Enter focal parameter scale factor:" << endl;
//   cin >> scale_factor;



//   double scale_factor= 1.183950701; // skyline panorama value
//   double scale_factor=1.426635982 +/- 0.815 // img_0134 value
   photogroup_ptr->rescale_focal_lengths(scale_factor);

   optimizer_ptr->compute_world_and_imagespace_feature_rays();

   rotation R_global=optimizer_ptr->
      compute_rotation_between_imagespace_rays_and_world_rays();

//   double az_global = -65.76956033*PI/180;	// skyline panorama values
//   double el_global = -2.248835173*PI/180;
//   double roll_global = -0.2377352426*PI/180;
//   rotation R_global;
//   R_global=R_global.rotation_from_az_el_roll(
//      az_global,el_global,roll_global);
   photogroup_ptr->globally_rotate(R_global);

// Note added on 2/8/09: When we globally rescale and rotate
// imagespace rays onto worldspace rays, photographs are not
// reordered.  So photos_ordered_flag is set equal to false below:
 
   bool photos_ordered_flag=false;
   string packages_subdir="./packages/";
   photogroup_ptr->export_photo_parameters(
      packages_subdir,photos_ordered_flag);

   delete optimizer_ptr;
   delete window_mgr_ptr;
}
