// ========================================================================
// Program PANORAMA reads in feature text files generated by program
// TIEPOINTS and fills a cumulative FeaturesGroup with feature
// coordinate measurements.  It then calls optimizer member function
// bundle_adjust_for_rotating_camera which sequentially forms 2, 3, 4,
// ... , n_photo mosaics.  Fitted camera parameters for previous n-1
// photos are held fixed when iteratively solving for internal and
// external parameters for nth photo via nonlinear Levenberg-Marquardt
// optimization.  After the loop over n_photos is completed, one final
// bundle adjustment is performed where all parameters for all cameras
// are allowed to vary.  Finally, PANORAMA visualizes the
// reconstructed camera results using 3D OBSFRUSTA.

/*

/home/cho/programs/c++/svn/projects/src/mains/sift/panorama \
--newpass DSCF5911.JPG \
--newpass DSCF5912.JPG \
--newpass DSCF5913.JPG \
--newpass DSCF5914.JPG \
--initial_mode Manipulate_Fused_Data_Mode


*/

// ========================================================================
// Last updated on 9/17/09; 1/23/11; 2/2/11; 3/25/13
// ========================================================================

#include <iostream>
#include <string>
#include <vector>
#include <osgDB/FileUtils>
#include <osgUtil/Optimizer>
#include <osgDB/ReadFile>
#include <osgDB/WriteFile>
#include <osgText/Text>

#include "osg/osgGrid/AlirtGridsGroup.h"
#include "osg/osgGraphicals/AnimationController.h"
#include "video/camera.h"
#include "video/camerafuncs.h"
#include "osg/osgGraphicals/CentersGroup.h"
#include "osg/osgGraphicals/CenterPickHandler.h"
#include "math/constant_vectors.h"
#include "osg/osgOrganization/Decorations.h"
#include "osg/osgFeatures/FeaturesGroup.h"
#include "general/filefuncs.h"
#include "math/fourvector.h"
#include "osg/ModeController.h"
#include "templates/mytemplates.h"
#include "osg/osgOperations/Operations.h"
#include "optimum/optimizer.h"
#include "optimum/optimizer_funcs.h"
#include "passes/PassesGroup.h"
#include "video/photograph.h"
#include "video/photogroup.h"
#include "osg/osg3D/Terrain_Manipulator.h"
#include "osg/osgWindow/ViewerManager.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ifstream;
using std::string;
using std::vector;

// ==========================================================================
int main( int argc, char** argv )
{

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);

// Construct the viewer and instantiate a ViewerManager:

   WindowManager* window_mgr_ptr=new ViewerManager();
   window_mgr_ptr->initialize_window("3D imagery");

// Create OSG root node:

   osg::Group* root = new osg::Group;

// Instantiate Operations object to handle mode, animation and image
// number control:

   Operations operations(ndims,window_mgr_ptr,passes_group);

   ModeController* ModeController_ptr=operations.get_ModeController_ptr();
   AnimationController* AnimationController_ptr=
      operations.get_AnimationController_ptr();
   root->addChild(operations.get_OSGgroup_ptr());

// Add a custom manipulator to the event handler list:

   osgGA::Terrain_Manipulator* CM_3D_ptr=new osgGA::Terrain_Manipulator(
      ModeController_ptr,window_mgr_ptr);
   window_mgr_ptr->set_CameraManipulator(CM_3D_ptr);

// Instantiate group to hold all decorations:
   
   Decorations decorations(
      window_mgr_ptr,ModeController_ptr,CM_3D_ptr);

// Instantiate AlirtGrid decorations group:

   double min_X=0;
   double max_X=150;
   double min_Y=0;
   double max_Y=150;
   double min_Z=0;

   cout << "min_X = " << min_X << " max_X = " << max_X << endl;
   cout << "min_Y = " << min_Y << " max_Y = " << max_Y << endl;
   AlirtGrid* grid_ptr=decorations.add_AlirtGrid(
      ndims,passes_group.get_pass_ptr(0),min_X,max_X,min_Y,max_Y,min_Z);

   threevector* grid_origin_ptr=grid_ptr->get_world_origin_ptr();
   CM_3D_ptr->set_Grid_ptr(grid_ptr);
   decorations.set_grid_origin_ptr(grid_origin_ptr);

   grid_ptr->set_axes_labels("X (Meters)","Y (Meters)");
   grid_ptr->set_delta_xy(10,10);
   grid_ptr->set_axis_char_label_size(5.0);
   grid_ptr->set_tick_char_label_size(5.0);
   grid_ptr->update_grid();

// Read photographs from input video passes:

   photogroup* photogroup_ptr=new photogroup;
   photogroup_ptr->read_photographs(passes_group);

   double FOV_u=30;	// degs
   cout << endl;
   cout << "Enter approximate horizontal field-of-view in degrees for an individual photo:" << endl;
   cin >> FOV_u;
   FOV_u *= PI/180;

   photogroup_ptr->estimate_internal_camera_params(FOV_u);

   int n_photos(photogroup_ptr->get_n_photos());
   optimizer* optimizer_ptr=new optimizer(photogroup_ptr);

   FeaturesGroup* cum_FeaturesGroup_ptr=decorations.add_Features(
      ndims,passes_group.get_pass_ptr(0));
   string subdir="./features/";

   cum_FeaturesGroup_ptr->read_in_photo_features(photogroup_ptr,subdir);
   bool output_only_multicoord_features_flag=true;

   cum_FeaturesGroup_ptr->write_feature_html_file(
      photogroup_ptr,output_only_multicoord_features_flag);

// Compute/extract initial estimates for cameras' internal and
// external parameters:

   optimizer_ptr->extract_photo_feature_info(cum_FeaturesGroup_ptr);
   optimizer_ptr->bundle_adjust_for_rotating_camera(n_photos);

// Be sure to save all photos' reconstructed 3D parameters BEFORE
// attempting to instantiate OBSFRUSTA!

   string packages_subdir="./packages/";
   photogroup_ptr->export_photo_parameters(packages_subdir);

// Instantiate OBSFRUSTAGROUP decoration group.  Then instantiate an
// individual OBSFRUSTUM for every input video.  Each contains a
// separate movie object:

   OBSFRUSTAGROUP* OBSFRUSTAGROUP_ptr=
      decorations.add_OBSFRUSTA(passes_group.get_pass_ptr(0),
                                AnimationController_ptr);

   threevector tripod_posn=*grid_origin_ptr+threevector(80,85,50);

// Form OBSFRUSTA for all photos based upon bundle adjustment results:
   
   int OSGsubPAT_parent;
   for (int n=0; n<n_photos; n++)
   {

// Recover camera's internal and external parameters:

      photograph* photo_ptr=photogroup_ptr->get_photograph_ptr(n);
      camera* photo_camera_ptr=photo_ptr->get_camera_ptr();

      double fu=photo_camera_ptr->get_fu();
      double fv=fu;
      double U0=photo_camera_ptr->get_u0();
      double V0=photo_camera_ptr->get_v0();
      double az=photo_camera_ptr->get_rel_az();
      double el=photo_camera_ptr->get_rel_el();
      double roll=photo_camera_ptr->get_rel_roll();

      double aspect_ratio=photo_ptr->get_xdim()/photo_ptr->get_ydim();
      double FOV_u,FOV_v;
      camerafunc::horiz_vert_FOVs_from_f_and_aspect_ratio(
         fu,aspect_ratio,FOV_u,FOV_v);

      cout << "Camera n = " << n << endl;
      cout << "image filename = "
           << photogroup_ptr->get_ordered_photograph_ptr(n)->get_filename()
           << endl;
      cout << "Horizontal FOV = " << FOV_u*180/PI << endl;
      cout << "fu = " << fu 
           << " fv = " << fv
           << " U0 = " << U0
           << " V0 = " << V0 << endl;
      cout << "az = " << az*180/PI
           << " el = " << el*180/PI
           << " roll = " << roll*180/PI << endl;

// Instantiate initially unrotated camera corresponding to
// OBSFRUSTUM's movie:

      int OSGsubPAT_ID=0;
      OBSFRUSTUM* OBSFRUSTUM_ptr=OBSFRUSTAGROUP_ptr->
         generate_movie_OBSFRUSTUM(
            photogroup_ptr->get_ordered_photograph_ptr(n)->get_filename(),
            OSGsubPAT_ID);
      OSGsubPAT_parent = OBSFRUSTAGROUP_ptr->
         OSGsubPAT_parent_of_Graphical(OBSFRUSTUM_ptr);
      cout << "OSGsubPAT_parent = " << OSGsubPAT_parent << endl;

      camera* camera_ptr=OBSFRUSTUM_ptr->get_Movie_ptr()->get_camera_ptr();
      camera_ptr->set_world_posn(Zero_vector);
      camera_ptr->set_internal_params(fu,fv,U0,V0);
      camera_ptr->construct_projection_matrix();

      double curr_t=0;
      int pass_number=0;
      double z_offset=0;
      double frustum_sidelength=-1;
      double movie_downrange_distance=50;
      OBSFRUSTUM_ptr->initialize_frustum_with_movie(
         frustum_sidelength,movie_downrange_distance);

      OBSFRUSTUM_ptr->absolute_position_and_orientation(
         curr_t,pass_number,tripod_posn,az,el,roll);

      OBSFRUSTUM_ptr->instantiate_OSG_Pyramids();

// Compute instantaneous above_Zplane pyramid.  Then build
// instantaneous ViewingPyramidAboveZplane graphical from this pyramid
// object:

      double z_ground=0;
      OBSFRUSTUM_ptr->compute_viewing_pyramid_above_Zplane(
         z_ground,OBSFRUSTUM_ptr->get_viewing_pyramid_ptr());

      OBSFRUSTUM_ptr->generate_Pyramid_geodes();
      OBSFRUSTUM_ptr->get_ViewingPyramid_ptr()->build_current_pyramid(
         curr_t,pass_number,OBSFRUSTUM_ptr->get_viewing_pyramid_ptr());
      OBSFRUSTUM_ptr->get_ViewingPyramidAboveZplane_ptr()->
         build_current_pyramid(
            curr_t,pass_number,OBSFRUSTUM_ptr->
            get_viewing_pyramid_above_zplane_ptr());

      OBSFRUSTUM_ptr->set_typical_pyramid_edge_widths();

//      const double volume_alpha=0.1;
      const double volume_alpha=0.0;
      OBSFRUSTUM_ptr->set_color(
         colorfunc::get_OSG_color(colorfunc::get_color(n)),volume_alpha);

// Before we can backproject feature points to recover 3D rays, we
// must rotate the camera corresponding to OBSFRUSTUM's movie:

      camera_ptr->set_Rcamera(az,el,roll);
      camera_ptr->construct_projection_matrix();
   
   } // loop over index n labeling photos

// Compute average azimuth, elevation and roll for entire photogroup:

   double avg_az=0;
   double avg_el=0;
   double avg_roll=0;
   for (int n=0; n<n_photos; n++)
   {
      camera* camera_ptr=photogroup_ptr->get_photograph_ptr(n)->
         get_camera_ptr();
      double az=camera_ptr->get_rel_az();
      double el=camera_ptr->get_rel_el();
      double roll=camera_ptr->get_rel_roll();
      avg_az += az;
      avg_el += el;
      avg_roll += roll;      
   }
   avg_az /= n_photos;
   avg_el /= n_photos;
   avg_roll /= n_photos;

   cout << "***********************************" << endl;
   cout << "Average az = " << avg_az*180/PI << endl;
   cout << "Average el = " << avg_el*180/PI << endl;
   cout << "Average roll = " << avg_roll*180/PI << endl;
   cout << "***********************************" << endl;

// Reorient entire 3D mosaic so that it's oriented along the positive
// X axis and is relatively level to the Z-plane:

   rotation Rz(0,0,-avg_az);
   rotation Rx(-avg_roll,0,0);
   rotation R=Rx*Rz;
   threevector new_xhat=R*x_hat;
   threevector new_yhat=R*y_hat;
   OBSFRUSTAGROUP_ptr->rotate_OSGsubPAT_about_specified_origin(
      OSGsubPAT_parent,tripod_posn,new_xhat,new_yhat);

/*
// Compute 3D rays for all features accumulated within
// *cum_FeaturesGroup_ptr:
 
   for (int f=0; f<cum_FeaturesGroup_ptr->get_n_Graphicals(); f++)
   {
      cum_FeaturesGroup_ptr->backproject_rays(
         cum_FeaturesGroup_ptr->get_curr_t(),f,OBSFRUSTAGROUP_ptr,n_photos);
   }

// Output consolidated Feature information to HTML page which can be
// viewed with any web browser. Label columns within output html table
// displaying multi-photo UV coordinates and world-space ray XYZ
// coordinates:

   vector<string> column_labels;
   column_labels.push_back("Feature ID");
   for (int p=0; p<n_photos; p++)
   {
      column_labels.push_back("Photo "+stringfunc::number_to_string(p));
   }
   column_labels.push_back("World space ray");
   cum_FeaturesGroup_ptr->write_feature_html_file(
      cum_FeaturesGroup_ptr->get_curr_t(),column_labels);
*/

// Instantiate CentersGroup and center pick handler to handle mid
// point selection:

   CentersGroup centers_group(ndims,passes_group.get_pass_ptr(0));
   CenterPickHandler* CenterPickHandler_ptr=new CenterPickHandler(
      ndims,passes_group.get_pass_ptr(0),
      CM_3D_ptr,&centers_group,ModeController_ptr,window_mgr_ptr,
      grid_origin_ptr);
   window_mgr_ptr->get_EventHandlers_ptr()->push_back(
      CenterPickHandler_ptr);

// Optimize the scene graph, remove redundent nodes and states, and
// then attach it to the viewer:

   osgUtil::Optimizer optimizer;
   optimizer.optimize(root);
   root->addChild(decorations.get_OSGgroup_ptr());

   window_mgr_ptr->setSceneData(root);

// Create the windows and run the threads.  Viewer's realize method
// calls the CustomManipulator's home() method:

   window_mgr_ptr->realize();

   while( !window_mgr_ptr->done() )
   {
      window_mgr_ptr->process();
   }

   delete optimizer_ptr;
   delete window_mgr_ptr;
}

