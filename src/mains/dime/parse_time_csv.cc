// =======================================================================
// Program PARSE_TIME_CSV queries the user to enter some scene ID.  It
// then imports a CSV file (previously generated by Allyn Dullighan)
// accompanying some raw WISP image file from the FSF field test in
// May 2013. It computes an averaged UTC for each panorama and exports
// this time to output text file pano_times.txt as a function of
// panorama ID.  PARSE_TIME_CSV also generates an executable script to
// run program AERIAL_TRACKS.

//				./parse_time_csv

// ========================================================================
// Last updated on 6/25/13; 7/15/13; 7/16/13; 8/8/13; 8/12/13
// ========================================================================

#include <iostream>
#include <string>
#include <vector>
#include "astro_geo/Clock.h"
#include "general/filefuncs.h"
#include "filter/filterfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main( int argc, char** argv )
{
   string date_string="05202013";
   cout << "Enter date string (e.g. 05202013 or 05222013):" << endl;
   cin >> date_string;
   filefunc::add_trailing_dir_slash(date_string);

   string bundler_subdir="./bundler/DIME/";
   string MayFieldtest_subdir=bundler_subdir+"May2013_Fieldtest/";
//   string FSFdate_subdir=MayFieldtest_subdir+"05202013/";
   string FSFdate_subdir=MayFieldtest_subdir+date_string;
   cout << "FSFdate_subdir = " << FSFdate_subdir << endl;

   int scene_ID;
   cout << "Enter scene ID:" << endl;
   cin >> scene_ID;
   string scene_ID_str="Scene"+stringfunc::integer_to_string(scene_ID,2);
   string bundler_IO_subdir=FSFdate_subdir+scene_ID_str+"/";
   cout << "bundler_IO_subdir = " << bundler_IO_subdir << endl;
   string stable_frames_subdir=bundler_IO_subdir+"stable_frames/";

   timefunc::initialize_timeofday_clock();

// Dunmeyer's Ubuntu 12.4 machine:

//   string csv_subdir=
//      "/data/DIME/GPSINS/May2013_Fieldtest/20130520/"; 
   string csv_subdir=
      "/data/DIME/GPSINS/May2013_Fieldtest/"+date_string; 

// Cho's BEAST machine:

//   string csv_subdir="/data_third_disk/DIME/raw_Wisp_data/csv/"; 

   string csv_filename=csv_subdir+
      "PanamaCity-TD1-05202013-WISP360_"+scene_ID_str+
      "_Blue_WISP360_time.csv";
   cout << "csv_filename = " << csv_filename << endl;

   string output_filename=stable_frames_subdir+"pano_times.txt";
   ofstream outstream;
   outstream.precision(12);
   filefunc::openfile(output_filename,outstream);
   outstream << "# Pano_ID  Secs since 1970-1-1    UTC" << endl << endl;

   double starting_epoch=-1;
   double stopping_epoch=-1;
   double numer=0;
   double denom=0;
   int prev_pano_ID=0;
   Clock clock;

   cout.precision(12);
   filefunc::ReadInfile(csv_filename);   
   for (unsigned int i=1; i<filefunc::text_line.size(); i++)
   {
      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         filefunc::text_line[i],",");
      int curr_pano_ID=stringfunc::string_to_number(substrings[0]);
      bool print_flag=false;
      if (curr_pano_ID != prev_pano_ID)
      {
         print_flag=true;
      }
      else if (i==filefunc::text_line.size()-1)
      {
         print_flag=true;
      }
      else
      {
         double epoch_time=stringfunc::string_to_number(substrings[2]);
         numer += epoch_time;
         denom++;

//         cout << "epoch = " << epoch_time
//              << " numer = " << numer
//              << " denom = " << denom << endl;
      }

      if (print_flag)
      {
         double avg_epoch_time=numer/denom;
         clock.convert_elapsed_secs_to_date(avg_epoch_time);
         if (starting_epoch < 0) starting_epoch=avg_epoch_time;
         stopping_epoch=avg_epoch_time;

         string day_hour_separator_char="_";
         string date_time_str=clock.YYYY_MM_DD_H_M_S(day_hour_separator_char);
         cout << "i = " << i
              << " pano_ID = " << prev_pano_ID
              << " avg epoch = " << avg_epoch_time 
              << " time = " << date_time_str << endl;
         cout << endl;

         outstream << prev_pano_ID << "  "
                   << avg_epoch_time << "  "
                   << date_time_str << endl;
         numer=denom=0;
//         outputfunc::enter_continue_char();
      }

      prev_pano_ID=curr_pano_ID;

   } // loop over index i labeling entries within text_line STL vector

   filefunc::closefile(output_filename,outstream);

   string banner="Exported panorama times to "+output_filename;
   outputfunc::write_big_banner(banner);

   clock.convert_elapsed_secs_to_date(starting_epoch);
   int starting_year=clock.get_year();
   int starting_month=clock.get_month();
   int starting_day=clock.get_day();
   int starting_UTC_hour=clock.get_UTC_hour();
   int starting_minute=clock.get_minute();
   double starting_secs=clock.get_seconds();
   string world_start_UTC="--world_start_UTC "+
      stringfunc::number_to_string(starting_year)+","+
      stringfunc::number_to_string(starting_month)+","+
      stringfunc::number_to_string(starting_day)+","+
      stringfunc::number_to_string(starting_UTC_hour)+","+
      stringfunc::number_to_string(starting_minute)+","+
      stringfunc::number_to_string(starting_secs,2);

   clock.convert_elapsed_secs_to_date(stopping_epoch);
   int stopping_year=clock.get_year();
   int stopping_month=clock.get_month();
   int stopping_day=clock.get_day();
   int stopping_UTC_hour=clock.get_UTC_hour();
   int stopping_minute=clock.get_minute();
   double stopping_secs=clock.get_seconds();
   string world_stop_UTC="--world_stop_UTC "+
      stringfunc::number_to_string(stopping_year)+","+
      stringfunc::number_to_string(stopping_month)+","+
      stringfunc::number_to_string(stopping_day)+","+
      stringfunc::number_to_string(stopping_UTC_hour)+","+
      stringfunc::number_to_string(stopping_minute)+","+
      stringfunc::number_to_string(stopping_secs,2);
   
//   cout << "world_start_UTC = " << world_start_UTC << endl;
//   cout << "world_stop_UTC = " << world_stop_UTC << endl;

   string aerial_tracks_script_filename="run_aerial_tracks";
   filefunc::openfile(aerial_tracks_script_filename,outstream);
   outstream << "./aerial_tracks \\" << endl;
   outstream << world_start_UTC << " \\" << endl;
   outstream << world_stop_UTC << " \\" << endl;
   outstream << "--world_time_step 2" << endl;
   filefunc::closefile(aerial_tracks_script_filename,outstream);
   string unix_command="chmod a+x "+aerial_tracks_script_filename;
   sysfunc::unix_command(unix_command);

   banner="Exported aerial_tracks script to "+aerial_tracks_script_filename;
   outputfunc::write_big_banner(banner);

   banner="Finished running program PARSE_TIME_CSV";
   outputfunc::write_banner(banner);
   outputfunc::print_elapsed_time();
}

