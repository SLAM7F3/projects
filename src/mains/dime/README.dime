==========================================================================
DIME program notes
==========================================================================
Last updated on 8/1/13; 8/13/13; 8/23/13
==========================================================================

As of 8/1/13, we estimate that total processing time approximately equals
3.6 minutes per panorama


RAW WISP PANORAMA GENERATION PROGRAMS

*.  In /data/DIME/Condor_March2013/WispRDC_test/bin/, use a text editor to
manually create appropriate calibration file such as 

	calib.w360_PanamaCity-TD1-05202013-WISP360_Scene29

Then create soft links by chanting

ln -s ./calib.w360_PanamaCity-TD1-05202013-WISP360_Scene29 ./calib.w360_29

ln -s ./calib.w360_29 ./calib.w360

*.  Run the following G99 program in order to find out how many swaths and
panoramas are contained within a raw WISP data set:

/data/DIME/Condor_March2013/WispRDC_test/bin/Wisp360CalAssistant\
 /data/DIME/Condor_March2013/WispRDC_test/bin/calib.w360 -Info info.txt

[Note: Before running this command, make sure that there is no pre-existing
"info.txt" file already in /data/DIME/Condor_March2013/WispRDC_test/bin/ ]

Move output info.txt file to an appropriately renamed file such as

/data/DIME/raw_Wisp_data/May2013_FieldTest/20130520/img/
PanamaCity-TD1-05202013-WISP360_Scene29_Blue_WISP360.info

*.  All of Peter's C++ programs needed to process May 2013 FSF fieldtest
data are sitting in

	  $DIMEROOT=~/programs/c++/svn/projects/src/mains/dime/

It's best to change directory to $DIMEROOT via

		cd ~/programs/c++/svn/projects/src/mains/dime/

If you work in $DIMEROOT, you won't need to explicitly chant
"~/programs/c++/svn/projects/src/mains/dime/" in all of the following
steps.

*.  Chant 

  ~/programs/c++/svn/projects/src/mains/dime/Wisp360CalAssistant_script

Program WISP360CALASSISTANT_SCRIPT is a little utility program which we
wrote to generate a script to run the G99 Wisp360CalAssistant binary.  The
executable transforms raw WISP imagery into output 360 panorama JPG files.

   - Program will query user to enter the starting and stopping
panorama frame numbers.  So refer to the corresponding .info file in order
to determine maximum number of panos within a .img file.

   - Program will query user to enter full path for directory where
panoramas will be placed.  Here is a representative response:

	/data/DIME/panoramas/May2013_Fieldtest/05202013/Scene29/

   - Program will output an executable script called
run_Wisp360CalAssistant.  Generally useful to rename this script such as 
run_Wisp360CalAssistant_29.  Then chant

		run_Wisp360CalAssistant_29

in order to have G99 codes start generating jpg panorama files from input
.img WISP file.

  - Wisp360CalAssistant generates approximately 43 raw panos per hour on
dimeserver

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/subsample_panos

Program SUBSAMPLE_PANOS loops over all images within some subdirectory
containing either raw or stabilized panoramas.  Using ImageMagick's convert
command, it resizes each WISP panorama from 40Kx2.2K pixels down to
3960x218.  An AVI movie is generated which contains all subsampled raw WISP
panoramas.


On 7/6/13, subsample_panos ran on Scene 25 for 1.512 hours (434 images)
On 7/6/13, subsample_panos ran on Scene 27 for 0.781 hours (451 images)
On 7/14/13, subsample_panos ran on Scene 29 for 0.402 hours (451 images)

Avg rate = 7.3 secs / image

.........................................................
WISP VIDEO STABILIZATION PROGRAMS

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/extract_horizon_segments

Program EXTRACT_HORIZON_SEGMENTS loops over input DIME WISP panoramas.
For each image, it runs the line segment detector algorithm/code of von
Gioi (version 1.6 Nov 2011) on input DIME WISP panoramas.  This variant of
program LSD bins detected line segments into (segment azimuthal orientation
angle,impact parameter) cells.  Within each cell, LSD tries to concatenate
line segments into longer "super" segments.  The long segments are exported
to an output text file.

On 7/6/13, extract_horizon_segments ran on Scene 25 for 6.195 hours (434
images)
On 7/6/13, extract_horizon_segments ran on Scene 27 for 6.613 hours (451
images)

Avg rate = 52 secs/image

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/fit_horizons

Program FIT_HORIZONS loops over input DIME WISP panoramas.  For each image,
it imports horizon line segments generated by program
EXTRACT_HORIZON_SEGMENTS from an input text file.  Line segments lying too
far above or below the panorama's horizontal midline are ignored.  Segments
with large slope magnitudes are similarly ignored.  Surviving segments are
then ordered according to their midpoint U coordinates.  Initial estimates
for the A, phi and v_avg parameters entering into the sinusoidal function
for the projected horizon are computed based upon 3 neighboring line
segments.  A brute-force search is subsequently conducted for refined
sinusoid parameter estimates.  The score function favors long line segments
that lie close to the sinusoid fit.  Best fit parameters are exported to
text file output.  And fitted sinusoids are drawn on top of WISP-360
panoramas.

On 7/10/13, fit_horizons ran on Scene 27 for 5.224 hours (451 images)

Avg rate = 41.7 secs/image

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/filter_horizon_params

Program FILTER_HORIZON_PARAMS imports sinuosoidal-fit parameters to
panorama image plane horizons generated by program FIT_HORIZONS.  It first
generates probability distributions for the amplitude A, sinusoidal phase
phi, and averaged DC value v parameters over all frames from an FSF scene.
After computing these parameters' medians and quartile-widths,
FILTER_HORIZON_PARAMETERS identifies outliers among the input values as
those which lie more than 3 quartile widths away from the median.  Outlier
values are ignored in subsequent gaussian filtering of the inlier parameter
inputs.  Raw and filtered parameter values are plotted as functions of
panorama frame number.  The filtered sinuosoidal parameter values are
exported to a new text file within horizons_subdir.

*.  Chant 

    cd ~/programs/c++/svn/projects/src/mains/dime

   ./uvcorrect_panos

Note: This program must be run from within
~/programs/c++/svn/projects/src/mains/dime/ !

Program UVCORRECT_PANOS imports fitted sinusoid horizon parameters
generated by program FIT_HORIZONS.  Looping over a set of raw WISP
panoramas, it applies U-dependent sine function V-offsets to each input
image.  The physical horizon within a "V-corrected" panorama appears as a
horizontal line in the output image.  Obvious "U-shearing" of vertical
edges within "V-corrected" panoramas can be removed via a V-dependent
cosine function.  Corrected versions of the input panoramas which are
unwarped in both the U and V image plane directions are exported.
Subsampled versions of the corrected panoramas are also exported so that
SIFT/ASIFT can later be run on them for video stabilization purposes.

On 7/2/13, 8 hours for Scene 18 on Dunmeyer box #1 (901 images)
On 7/2/13, 5.7 hours for Scene 19 on Dunmeyer box #1 (651 images)

On 7/3/13, 6.3 hours for Scene 12 on Dunmeyer box #1 (630 images)
On 7/3/13, 8.1 hours for Scene 18 on Dunmeyer box #1 (901 images)
On 7/3/13, 5.9 hours for Scene 19 on Dunmeyer box #1 (651 images)

On 7/10/13, 3.97 hours for Scene 25 on Dunmeyer box #1 (434 images)
On 7/10/13, 3.99 hours for Scene 27 on Dunmeyer box #1 (451 images)

Avg rate = 32.9 secs/image


*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/list_subsampled_images

Program LIST_SUBSAMPLED_IMAGES is a little utility program which we wrote
to generate a list of subsampled panoramas that serves as input to program
STABILIZE_PANOS.  It also creates a new subdirectory of /data/DIME/bundler
which we refer to from here on as bundler_IO_subdir.  Output from this and
most subsequent programs in Peter's DIME processing algorithm chain is
exported to bundler_IO_subdir.

*.  Execute the auto-generated run_stabilize_panos script:

    ~/programs/c++/svn/projects/src/mains/dime/run_stabilize_panos

Program STABILIZE_PANOS first imports a set of subsampled,
"UV-corrected" WISP panoramas separated in time generated by program
UVCORRECT_PANOS.  It extracts SIFT and ASIFT features via calls to Lowe's
SIFT binary and the affine SIFT library.  Consolidated SIFT & ASIFT
interest points and descriptors are exported to key files following Lowe's
conventions. STABILIZE_PANOS performs tiepoint matching via homography
estimation and RANSAC.

Each tiepoint pair between a 0th and later WISP frame establishes a
correspondence between some "X,Y" and counterpart "U,V" coordinates.
STABILIZE_PANOS simply computes the average of Delta=UV-XY over all input
panoramas. The Delta twovectors are exported to an output text file as
functions of panorama frame numbers.

STABILIZE_PANOS exports a set of full-resolution WISP panoramas which
should (theoretically) be stabilized relative to the 0th frame's
UV-corrected panorama.  It then chains the subsampled panos together into
an AVI movie at 20 fps.


On 7/3/13, stabilize_panos ran on Scene 18 for 8.387 hours  (901 images)
On 7/3/13, stabilize_panos ran on Scene 19 for 9.462 hours  (651 images)

On 7/6/13, stabilize_panos ran on Scene 12 for 4.084 hours (features
	precalculated; 629 images)
On 7/6/13, stabilize_panos ran on Scene 18 for 4.787 hours (features
	precalculated; 901 images)
On 7/6/13, stabilize_panos ran on Scene 19 for 3.605 hours (features
	precalculated; 651 images)
On 7/15/13, stabilize_panos ran on Scene 12 for 5.148 hours (450 images)

Avg rate = 42.3 secs/image

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/relocate_horizon

Program RELOCATE_HORIZON imports a set of subsampled, stabilized WISP
panoramas for some user-specified May 2013 scene.  For each input panorama,
it computes horizontal line integrals near the vertical middle.
RELOCATE_HORIZON then computes the first derivative of the horizontal line
integrals as a function of vertical pixel py.  The py value for which the
first derivative is maximal is taken to be the vertical coordinate for the
horizontal horizon.

RELOCATE_HORIZON exports text file Horizon_V.dat which reports V_horizon as
a function of panorama ID and filename.  It also generates AVI movie
Horizon_15fps_SceneNN.avi that illustrates extracted horizons as red lines
within subsampled WISP panos.

.........................................................
STABILIZED VIDEO MANIPULATION PROGRAMS

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/generate_image_sizes

Program GENERATE_IMAGE_SIZES first links bundler_IO_subdir/stable_frames to
bundler_IO_subdir/images.  It then calls
mains/photosynth/generate_peter_inputs .  GENERATE_IMAGE_SIZES next exports
an image_sizes.dat file to bundler_IO_subdir for a set of WISP panoramas.
Each panorama is assumed to have a fixed, specified size in pixels.

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/edge_panos

Program EDGE_PANOS reads in "bundler-style" image_list and image_sizes
files for set of 360 deg panorama mosaics.  It calls ImageMagick's edge
command in order to extract high-frequency spatial content from each WISP
panorama.  The edge panoramas are exported to edge_pics_subdir.

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/generate_panels

Program GENERATE_PANELS reads in "bundler-style" image_list and image_sizes
files for set of 360 deg panorama mosaics.  (The input panoramas may have
been previously high-pass filtered via program EDGE_PANOS.)  It chops up
each input panorama into 10 individual panels which should be oriented 36
degrees apart in azimuth.  The individual panel images are written to a
panels subdirectory of the images directory holding all of the input
mosaics.  Each panel is labeled by the name of its parent panorama and a
"pn" descriptor where n ranges from 0 to 9.

On 7/9/13, generate_panels ran on Scene 12 high-pass panos for 3.24 hours
	(450 images)
On 7/9/13, generate_panels ran on Scene 18 high-pass panos for 4.62 hours
	(901 images)
On 7/9/13, generate_panels ran on Scene 19 high-pass panos for 3.31 hours
	(651 images)

Avg rate = 20.89 secs/image

*.  Rerun generate_panels on high-pass filtered "edge" panoramas:

	~/programs/c++/svn/projects/src/mains/dime/generate_panels

On 7/16/13, generate_panels ran on Scene 25 high-pass panos for 2.2 hours
	(434 images)
On 7/16/13, generate_panels ran on Scene 27 high-pass panos for 2.3 hours
	(451 images)

Avg rate = 18.30 secs/image

.........................................................
FSF FIELDTEST SPECIFIC PROGRAMS

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/parse_ship_tracks

Program PARSE_SHIP_TRACKS imports a CSV file generated by Rob Sweeney
containing either FSF or Athena ship GPS information.  It exports a new
text file containing GPS track info where time is measured since midnight
Jan 1, 1970.  And the temporal spacing between GPS track points is
approximately 1 second.  Program PARSE_SHIP_TRACKS only needs to be run
once per May 2013 Fieldtest day.


For Day 1 scenes 25, 27 and 29, alternatively chant

    ~/programs/c++/svn/projects/src/mains/dime/parse_mike_tracks

Program PARSE_MIKE_TRACKS imports a CSV file generated by Mike Watson in
late July 2013 containing both FSF and Athena ship track information.  It
exports a new text file containing GPS track info where time is measured
since midnight Jan 1, 1970.  And the temporal spacing between GPS track
points is approximately 1 second.


*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/parse_time_csv

Program PARSE_TIME_CSV queries the user to enter some scene ID.  It then
imports a CSV file (previously generated by Allyn Dullighan) accompanying
some raw WISP image file from the FSF field test in May 2013. It computes
an averaged UTC for each panorama and exports this time to output text file
pano_times.txt as a function of panorama ID.  PARSE_TIME_CSV also generates
an executable script to run program AERIAL_TRACKS.

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/athena

Program ATHENA attempts to semi-automatically track the ATHENA ship seen in
WISP-360 imagery from the FSF.  It queries the user to enter an initial set
of pixel coordinates (px,py) for the ATHENA manually determined via GIMPing
the first subsampled stabilized panorama.

Working with subsampled stabilized WISP panoramas, ATHENA then searches for
hot pixels in the vicinity of the initial UV coordinates.  It applies
alpha-beta filtering to the new U coordinate and alpha filtering to the new
V coordinate.  ATHENA superposes a red dot in an output image indicating
its best estimate for the second ship's image plane location.  It generates
an AVI movie of the annotated subsampled stabilized panoramas.  ATHENA also
exports a text file containing the UV coordinates as functions of input
panorama filename.

On 7/12/13, ATHENA ran on Scene 12 for 2.14 minutes

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/georeg_FSF_panos

Program GEOREG_FSF_PANOS first imports epoch times for a set of stabilized
FSF WISP panoramas.  It next imports GPS tracks for the FSF and Athena
ships.  Scene-specific ship tracks are exported to output text files in UTM
coordinates.  The azimuthal angle of the Athena relative to the FSF is
calculated for each stabilized panorama.

GEOREG_FSF_PANOS next imports the Athena's UV image-plane track for a set
of stabilized panoramas previously computed via program ATHENA.  It then
computes the U coordinate corresponding to due east for each panorama, the
azimuth corresponding to U=0 and the elevation corresponding to V=0.
(U=V=0 corresponds to the lower left corner of the WISP panorama.)
GEOREG_FSF_PANOS exports these results to output text file Panos_Az_El.txt.

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/FSF_cardinal_dirs

Program FSF_CARDINAL_DIRS annotates stabilized & georegistered FSF panos
with east, north, west and south directions.

Note added on 7/16/13:  FONTS are missing on Dunmeyer machines!


*.  Execute the auto-generated run_aerial_tracks script

    ~/programs/c++/svn/projects/src/mains/dime/run_aerial_tracks

Program AERIAL_TRACKS imports aerial track information extracted by Mike
Watson from various May 2013 Panama City fieldtest sources.  It
instantiates and fills track objects with aircraft timing and UTM position
information.  AERIAL_TRACKS exports the aerial tracks to an output text
file.

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/aerial_features

Program AERIAL_FEATURES imports projected May 2013 Panama City field test
aerial tracks generated by AERIAL_TRACKS.  In particular, it reads in track
label, panel_ID, panel_U and panel_V information as a function of pano ID.
Looping over all 10 wagonwheel panels, AERIAL_FEATURES exports 2D feature
files which contain U,V feature track coordinates as functions of video
framenumber.  The resulting UV feature files can be imported into program
VPLAYER in order to directly compare WISP video with aerial tracks
projected into georegistered image planes.

.........................................................
WISP PANEL GEOREGISTRATION PROGRAMS

*.  Program DRAPE_EO imports a TDP file along with an overhead Google Earth
image which has been registered with the point cloud via program FUSION.
We assume a package file containing a --projection_matrix entry based upon
FUSION output has been created for the aerial EO image DRAPE_EO iterates
over every point in the cloud and colors it to indicate height or RGB
information.  Fused data is written to TDP/OSGA file output.

*.  Program GEOREGPANO reads in package files for 10 WISP panoramic video
panels containing reasonable initial estimates for the cameras' calibration
parameters.  For example, here are the contents of an initial package file
for Deer Island WISP panel 0:

It also reads in manually established tiepoints selected between a ladar
point cloud and the WISP panels whose sky-sea horizons have been reset to
their vertical midpoints via program RESET_HORIZON.  After iterating over
possible WISP camera position threevectors, GEOREGPANO computes the global
azimuthal rotation which optimally aligns maps the projected 3D and their
2D tiepoint counterparts.  After a georegistered set of translated and
rotated package files are written to disk, they can be directly imported
into program VIEWBUNDLER.

*.  mains/dime/VIEWBUNDLER displays a "wagon wheel" of OBSFRUSTA
corresponding to WISP panels within a 3D point cloud.  It also has an
intentionally large AlirtGrid which yields a 3D "horizon" separating sky
from sea when projected into the 2D WISP panels.

*.  Program WISP_CARDINAL_DIRS annotates a de-warped & georegistered Deer
Island pano with east, north, west and south directions.

.........................................................
ERSA TRACKING PROGRAMS


*.  Program ERSA_TRACKS imports ERSA track information extracted from
MATLAB files via Allyn Dullighan's CSV parser matlab code.  It instantiates
and fills track objects with aircraft timing and UTM position information.
ERSA_TRACKS exports the aerial tracks to an output text file.

*.  Program ERSA_FEATURES imports projected ERSA track information
generated by ERSA_TRACKS.  In particular, it reads in track label,
panel_ID, panel_U and panel_V information as a function of ERSA frame
number.  Looping over all 10 wagonwheel panels, ERSA_FEATURES exports 2D
feature files which contain U,V feature track coordinates as functions of
video framenumber.  The time offset between ERSA and video frames is a free
variable which the user is queried to enter.  The resulting UV feature
files can be imported into program VPLAYER in order to directly compare
WISP video with ERSA tracks projected into georegistered image planes.

*.  Program VPLAYER is an OSG based viewer for photographs and video
imagery.  It is a variant of VIDEO intended specifically to play temporal
sequences of video frame stills.


.........................................................
MISCELLANEOUS PROGRAMS

*.  Program CROP_AIR_OVER_OCEAN reads in "bundler-style" image_list and
image_sizes files for set of stabilized, UV-corrected WISP panos.  It crops
out the upper right-half region of each pano which corresponds to air over
ocean.

*.  Program DIME_SA is a variant of program LOS.  It will become a 3D
situational awareness tool for the DIME project.






============================================================================

DEPRECATED PROPGRAMS

*.  Program TEMPORAL_MATCHER performs feature matching for WISP panel
images separated in time.  It first imports a set of images corresponding
to fixed panels at different times.  TEMPORAL_MATCHER next extracts SIFT
and ASIFT features via calls to Lowe's SIFT binary and the affine SIFT
library.  Consolidated SIFT & ASIFT interest points and descriptors are
exported to key files following Lowe's conventions. TEMPORAL_MATCHER
performs tiepoint matching via homography estimation and RANSAC.  2D
tiepoints are converted to 3D rays via backprojection.  The best fit 3D
rotation which maps t > 0 rays onto t=0 counterparts is computed and
exported to an output text file.

*.  Program STABILIZE_PANELS imports affine transformation parameters from
the text file generated by program TEMPORAL_MATCHER.  Looping over each
pixel within a new stabilized version of each WISP panel frame,
STABILIZE_PANELS retrieves its counterpart pixel intensity from the
pre-warped WISP panel.  After this transformation, each new WISP panel
should be stabilized relative to the zeroth (georegistered) panel.


*.  Program HORIZON imports a set of 2D feature pixel coordinates (px,py)
that were manually selected via GIMP from a Wisp-360 panorama.  The pixels
all lie along the horizon separating sky from sea.  HORIZON performs a
brute-force sinusoidal fit of the form

		py = py_avg + A sin[ (2*PI/lambda)*px + phi_0 ]

for parameters A, phi_0 and py_avg.

*.  Program RESET_HORIZON takes in sinusoidal fit parameter py_avg found in
program HORIZON.  It shifts WISP panel jpgs so that py_avg --> 0.5*pixel
height.  After this shift, the horizon separating sky from sea lies (on
average) at the vertical mid-line of each WISP panel image.


*.  Program GENERATE_WISP_MOVIE reads in a set of WISP panorama jpg files
from a specified subdirectory.  It converts each single-channel greyscale
input image into a 3-channel RGB output image.  The horizontal pixel size
of each output jpg file is restricted to be <= 4000.  The resulting
downsized, colored WISP panoramas may subsequently be converted into a
movie via mkmpeg4.






--------------- 
As of 7/11/13, we don't believe the next 3 programs are absolutely
necessary:

*.  Program PANELPKGS generates package files for WISP panorama panels. The
panoramas can subsequently be viewed via VIEW_WISP.

*.  Program PANEL_MOVIES generates executable scripts which string together
individual, subsampled wisp panel frames (output by program
SUBSAMPLE_PANELS) into AVI movies.

*.  Chant 

    ~/programs/c++/svn/projects/src/mains/dime/subsample_panels

Program SUBSAMPLE_PANELS loops over all 36-degree WISP "panel" PNG files.
Using ImageMagick's convert command, it resizes each panel image from
4Kx2.2K down to 1Kx0.5K.

-----------------
