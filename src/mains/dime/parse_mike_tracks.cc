// =======================================================================
// Program PARSE_MIKE_TRACKS imports a CSV file generated by Mike Watson
// in late July 2013 containing both FSF and Athena ship track information.
// It exports a new text file containing GPS track info
// where time is measured since midnight Jan 1, 1970.  And the
// temporal spacing between GPS track points is approximately 1
// second. 

//			   ./parse_mike_tracks

// ========================================================================
// Last updated on 7/21/13; 8/8/13; 8/12/13
// ========================================================================

#include <iostream>
#include <string>
#include <vector>
#include "astro_geo/Clock.h"
#include "general/filefuncs.h"
#include "filter/filterfuncs.h"
#include "astro_geo/geopoint.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main( int argc, char** argv )
{
   string date_string="05202013";
   cout << "Enter date string (e.g. 05202013 or 05222013):" << endl;
   cin >> date_string;
   filefunc::add_trailing_dir_slash(date_string);

   int UTM_zone=16;	 // Panama City, FL
   bool northern_hemisphere_flag=true;

   string bundler_subdir="./bundler/DIME/";
   string MayFieldtest_subdir=bundler_subdir+"May2013_Fieldtest/";
//   string FSFdate_subdir=MayFieldtest_subdir+"05202013/";
   string FSFdate_subdir=MayFieldtest_subdir+date_string;
   FSFdate_subdir="./";
   cout << "FSFdate_subdir = " << FSFdate_subdir << endl;

// Dunmeyer ubuntu 12.4 machine:

//   string csv_subdir=
//      "/data/DIME/GPSINS/May2013_Fieldtest/20130520/"; 
   string csv_subdir=
      "/data/DIME/GPSINS/May2013_Fieldtest/"+date_string; 

   int scene_ID;
   cout << "Enter scene ID:" << endl;
   cin >> scene_ID;
   string scene_ID_str=stringfunc::integer_to_string(scene_ID,2);
   string csv_filename=csv_subdir+"Scene"+scene_ID_str+
      "_ShipData_processed.csv";
   cout << "csv_filename = " << csv_filename << endl;


   int track_ID=0;	// FSF
   cout << "Enter track ID: 0 = FSF, 1 = Athena" << endl;
   cin >> track_ID;

   string latlon_filename=FSFdate_subdir+"FSF_latlon_track_"+scene_ID_str
      +".dat";
   string UTM_filename=FSFdate_subdir+"FSF_UTM_track_"+scene_ID_str+".dat";

   if (track_ID==1)
   {
      latlon_filename=FSFdate_subdir+"Athena_latlon_track_"+scene_ID_str
         +".dat";
      UTM_filename=FSFdate_subdir+"Athena_UTM_track_"+scene_ID_str+".dat";
   }
   
   ofstream outstream;
   outstream.precision(12);
   filefunc::openfile(latlon_filename,outstream);
   outstream << "# Secs since 1970-1-1      UTC		      Longitude       Latitude" 
             << endl << endl;

   ofstream UTMstream;
   UTMstream.precision(12);
   filefunc::openfile(UTM_filename,UTMstream);
   UTMstream << "# Track_ID  Secs since 1970-1-1  Easting  Northing  Altitude"
             << endl << endl;

   Clock clock;
   double prev_epoch_time=-1;

   cout.precision(12);
   filefunc::ReadInfile(csv_filename);   
   for (int i=0; i<filefunc::text_line.size(); i++)
   {
      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         filefunc::text_line[i],",");

//      cout << "i = " << i << " substrings[1] = " << substrings[1] << endl;
      
      string ship_type=substrings[1].substr(0,3);
//      cout << "ship_type = " << ship_type << endl;
      if (ship_type=="FSF" && track_ID==1) continue;
      if (ship_type=="Ath" && track_ID==0) continue;

      double elapsed_secs=stringfunc::string_to_number(substrings[0]);
      double latitude=stringfunc::string_to_number(substrings[2]);
      double longitude=stringfunc::string_to_number(substrings[3]);
      double altitude=0;	// sea-level

//      cout << "elapsed secs = " << elapsed_secs
//           << " lat = " << latitude << " lon = " << longitude << endl;

      geopoint curr_geopoint(longitude,latitude,altitude);
      threevector UTM_posn=curr_geopoint.get_UTM_posn();

//      clock.set_reference_date(1980,1,6);
      clock.convert_elapsed_secs_to_date(elapsed_secs);
//      clock.set_reference_date(1970,1,1);
      double epoch_time=clock.secs_elapsed_since_reference_date();

      string day_hour_separator_char="_";
      string date_time_str=clock.YYYY_MM_DD_H_M_S(day_hour_separator_char);
//      cout << "date_time = " << date_time_str << endl;

// Make sure date for FSF track equals May 20 !

      int May_day=clock.get_day();
      if (May_day != 20) continue;

      double d_time=epoch_time-prev_epoch_time;
      if (d_time < 0.99)
      {
         continue;
      }
      else
      {
         prev_epoch_time=epoch_time;
      }

//      string day_hour_separator_char="_";
//      string date_time_str=clock.YYYY_MM_DD_H_M_S(day_hour_separator_char);

      outstream << stringfunc::number_to_string(epoch_time,2) 
                << "  "
                << date_time_str << "  "
                << longitude << "  "
                << latitude << "  " 
                << endl;

      UTMstream << track_ID << "  "
                << epoch_time << "  "
                << UTM_posn.get(0) << "  "
                << UTM_posn.get(1) << "  "
                << altitude << endl;

   } // loop over index i labeling entries within text_line STL vector

   filefunc::closefile(latlon_filename,outstream);
   filefunc::closefile(UTM_filename,UTMstream);

   string banner="Exported latitude-longitude ship track to "+latlon_filename;
   outputfunc::write_big_banner(banner);

   banner="Exported UTM ship track to "+UTM_filename;
   outputfunc::write_big_banner(banner);
}

