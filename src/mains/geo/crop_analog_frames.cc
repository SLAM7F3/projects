// ========================================================================
// Program CROP_ANALOG_FRAMES reads in a set of package files
// generated by program VISUALIZE_FLIR_FRAMES. It extracts their
// low-definition JPG frames and crops each one so that it contains
// (mostly) FLIR pixel content without screen metadata.  The cropped
// low-defn frames are exported to
// bundler_IO_subdir/cropped_lowdefn_frames/.  A new soft link is
// generated from bundler_IO_subdir/cropped_lowdefn_frames/ to
// bundler_IO_subdir/images.

// CROP_ANALOG_FRAMES also generates list_tmp.txt and trivial bundle.out
// files corresponding to the cropped low-defn video frames.  

//		             crop_analog_frames

// ========================================================================
// Last updated on 7/1/13; 7/3/13; 7/30/13
// ========================================================================

#include <iostream>
#include <string>
#include <vector>

#include "general/filefuncs.h"
#include "image/imagefuncs.h"
#include "messenger/Messenger.h"
#include "general/outputfuncs.h"
#include "passes/PassesGroup.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

   timefunc::initialize_timeofday_clock();      

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);
   int videopass_ID=passes_group.get_videopass_ID();
//   cout << "videopass_ID = " << videopass_ID << endl;
   string bundle_filename=passes_group.get_bundle_filename();
//   cout << " bundle_filename = " << bundle_filename << endl;
   string bundler_IO_subdir=filefunc::getdirname(bundle_filename);
//   cout << "bundler_IO_subdir = " << bundler_IO_subdir << endl;
   string list_filename=bundler_IO_subdir+"list_tmp.txt";
   string cropped_bundler_IO_subdir=
      bundler_IO_subdir.substr(2,bundler_IO_subdir.size()-2);
   string full_bundler_IO_path=filefunc::get_pwd()+cropped_bundler_IO_subdir;
//   cout << "full_bundler_IO_path = " 
//        << full_bundler_IO_path << endl;

// Import names of images to be cropped:

   filefunc::ReadInfile(list_filename);
   vector<string> image_filenames;
   for (int i=0; i<filefunc::text_line.size(); i++)
   {
      image_filenames.push_back(filefunc::text_line[i]);
   }

   string packages_subdir=bundler_IO_subdir+"packages/";
   string hardware_packages_subdir=packages_subdir+"hardware_in/";

   string substring="photo_";
   vector<string> package_filenames=
      filefunc::files_in_subdir_matching_substring(
         hardware_packages_subdir,substring);
//   cout << "package_filenames.size() = " << package_filenames.size() << endl;

   string cropped_dirname=full_bundler_IO_path+"cropped_lowdefn_frames/";
   filefunc::dircreate(cropped_dirname);
   
   vector<string> basenames;
//   int n_images=package_filenames.size();
   int n_images=image_filenames.size();
   for (int i=0; i<n_images; i++)
   {
//      string package_filename=package_filenames[i];
//      filefunc::ReadInfile(package_filename);
//      string jpg_filename=filefunc::text_line[0];
      string jpg_filename=bundler_IO_subdir+image_filenames[i];

//      cout << "i = " << i << " jpg_filename = " << jpg_filename << endl;
//      cout << "image_filename = " << image_filenames[i] << endl;
      
      string dirname=filefunc::getdirname(jpg_filename);
      string basename=filefunc::getbasename(jpg_filename);
      basenames.push_back(basename);
      
//      string prefix=stringfunc::prefix(basename);
//      string suffix=stringfunc::suffix(basename);
      string cropped_jpg_filename=cropped_dirname+basename;

      if (i%100==0)
      {
         cout << "i = " << i 
              << " n_images = " << n_images
              << " cropping " << jpg_filename << endl;
         cout << "Cropped filename = " << cropped_jpg_filename << endl 
              << endl;
      }

      int width=704;
//      int height=359;
      int height=359-15; // = 344
      int xoffset=0;
//      int yoffset=57;
      int yoffset=57+15; // = 72	// Jan 2012 GEO analog imagery
      
      imagefunc::crop_image(
         jpg_filename,cropped_jpg_filename,
         width,height,xoffset,yoffset);

/*
      if (demo_flag && i==0)
      {
         cout << "jpg_filename = " << jpg_filename
              << " cropped_jpg_filename = " << cropped_jpg_filename 
              << endl;
         string unix_cmd=
            "display -geometry +965+0 "+jpg_filename+" &";
         sysfunc::unix_command(unix_cmd);
         unix_cmd=
            "display -geometry +965+500 "+cropped_jpg_filename+" &";
         sysfunc::unix_command(unix_cmd);
         exit(-1);
      }
*/

   } // loop over index i labeling input analog jpg files

   string banner="Wrote cropped low-definition frames to "+cropped_dirname;
   outputfunc::write_big_banner(banner);

// Generate list_tmp.txt file following Noah's conventions which
// contains low-definition frame filenames:

   list_filename=cropped_dirname+"list_tmp.txt";
   ofstream liststream;
   filefunc::openfile(list_filename,liststream);
   
   for (int i=0; i<basenames.size(); i++)
   {
      liststream << "images/"+basenames[i] << endl;
   }
   filefunc::closefile(list_filename,liststream);


// Generate trivial bundle.out file following Noah's conventions for
// low-defn analog frames:

   ofstream bundlestream;
   filefunc::openfile(bundle_filename,bundlestream);

   bundlestream << "# Bundle file v0.3" << endl;
   bundlestream << basenames.size() << " 0" << endl;
   filefunc::closefile(bundle_filename,bundlestream);

   banner="Wrote trivial bundle.out and list_tmp.txt files within "
      +cropped_dirname;
   outputfunc::write_big_banner(banner);

// Delete existing bundler_IO_subdir/images soft link which points to
// bundler_IO_subdir/raw_images.  Replace it with new link to 
// ./cropped_lowdefn_frames/ subdirectory:

   string images_link=bundler_IO_subdir+"images";
   if (filefunc::symboliclink_exist(images_link))
   {
//      cout << "images link found" << endl;
//      cout << "images_link = " << images_link << endl;
      string unix_cmd="/bin/rm "+images_link;
      sysfunc::unix_command(unix_cmd);
      unix_cmd="ln -s ./cropped_lowdefn_frames "+images_link;
//      cout << "unix_cmd = " << unix_cmd << endl;
      sysfunc::unix_command(unix_cmd);
   }

   banner="Replaced link from bundler_IO_subdir/images to bundler_IO_subdir/cropped_lowdefn_frames/ ";
   outputfunc::write_big_banner(banner);

   cout << "At end of crop_analog_frames.cc" << endl;
   outputfunc::print_elapsed_time();

}
