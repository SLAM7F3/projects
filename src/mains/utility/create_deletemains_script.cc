// ==========================================================================
// Program CREATE_DELETEMAINS_SCRIPT reads in the contents of the
// "build_all" script.  It generates a corresponding "delete_all_mains"
// script which cds into each of our mains subdirectories, generates
// an "anti-build" script within those subdirectories and adds a call to 
// the anti-build script to delete_all_mains.  

// We wrote this utility in Dec 2010 in order to easily eliminate all
// executables generated by build_all for the bots and sigma users on
// our LOST laptop.  This should help free up disk space which is
// becoming scarce within /home.

// ==========================================================================
// Last updated on 12/29/10
// ==========================================================================

#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <sys/stat.h>   // Needed for stat() Unix system call
#include <vector>
#include <curl/curl.h>

#include "general/filefuncs.h"
#include "osg/osgModels/OBSFRUSTUMfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "math/threevector.h"


using std::cin;
using std::cout;
using std::endl;
using std::ios;
using std::map;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   string build_script="build_all";
   filefunc::ReadInfile(build_script);
   vector<string> cd_cmds,build_filenames;

   for (int i=0; i<filefunc::text_line.size(); i += 2)
   {
      string cd_line=filefunc::text_line[i];
      cd_cmds.push_back(cd_line);
      string build_filename=filefunc::text_line[i+1];
      build_filenames.push_back(build_filename);
   }
   
   string script_filename="create_delete_scripts";
   ofstream scriptstream;
   filefunc::openfile(script_filename,scriptstream);

   string delete_all_filename="delete_all_mains";
   ofstream outstream;
   filefunc::openfile(delete_all_filename,outstream);

   for (int j=0; j<cd_cmds.size(); j++)
   {
      scriptstream << cd_cmds[j] << endl;
      string delete_cmd=
         "/home/cho/programs/c++/svn/projects/src/mains/utility/delete_mains ";
      delete_cmd += build_filenames[j];
      scriptstream << delete_cmd << endl;

      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         build_filenames[j],"_");
      string delete_filename="build_anti_"+substrings.back();
//      cout << "Delete_filename = " << delete_filename << endl;
      outstream << cd_cmds[j] << endl;
      outstream << delete_filename << endl;
      
   } // loop over index j

   filefunc::closefile(script_filename,scriptstream);
   string unix_cmd="chmod a+x "+script_filename;
   sysfunc::unix_command(unix_cmd);

   filefunc::closefile(delete_all_filename,outstream);
   unix_cmd="chmod a+x "+delete_all_filename;
   sysfunc::unix_command(unix_cmd);
}
