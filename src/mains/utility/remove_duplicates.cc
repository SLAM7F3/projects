// ==========================================================================
// Utility program REMOVE_DUPLICATES takes in the name of some
// subdirectory which is assumed to containing a sequence of JPEG
// files generated by screen capture program XVIDCAP.  When the
// dataviewer is run at the same time as XVIDCAP, the processor can be
// overwhelmed, and often multiple copies of the same JPEG file are
// generated.  This program compares JPEG file N with file N+1.  If
// they are identical, file N+1 is deleted from the subdirectory.
// This tool ensures that a string of non-identical JPEG images are
// sent to Adobe Premiere for AVI movie generation purposes.
// ==========================================================================
// Last updated on 2/2/05
// ==========================================================================

#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include "color/colorfuncs.h"
#include "math/constants.h"
#include "threeDgraphics/draw3Dfuncs.h"
#include "general/filefuncs.h"
#include "geometry/parallelepiped.h"
#include "geometry/polygon.h"
#include "space/spasefuncs.h"
#include "general/sysfuncs.h"
#include "threeDgraphics/xyzpfuncs.h"

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::ios;
   using std::ofstream;
   using std::ostream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

// ==========================================================================

   string jpegdirname;
   cout << "Enter name of subdirectory containing image files:" << endl;
   cin >> jpegdirname;
//   jpegdirname="./"+jpegdirname+"/";

   cout << "jpegdirname = " << jpegdirname << endl;

   string ls_filename="./ls.txt";
   string unixcommandstr="ls "+jpegdirname+" > "+ls_filename;
   sysfunc::unix_command(unixcommandstr);

   vector<string> line;
   vector<string> jpeg_filename;
   if (filefunc::ReadInfile(ls_filename,line))
   {
      for (unsigned int i=0; i<line.size(); i++)
      {
         jpeg_filename.push_back(line[i]);
      }
   }
   filefunc::deletefile(ls_filename);


   vector<string> no_duplicates_jpeg_filename;
   vector<string> duplicates_jpeg_filename;
   no_duplicates_jpeg_filename.push_back(jpeg_filename[0]);
   unsigned int file_counter=1;   
   while (file_counter < jpeg_filename.size())
   {
      unixcommandstr="cmp -s "+jpegdirname+
//      unixcommandstr="diff "+jpegdirname+
         no_duplicates_jpeg_filename.back()+" "+jpegdirname+
         jpeg_filename[file_counter];
      int result=sysfunc::unix_command(unixcommandstr);
      if (result==0)
      {
         cout << "Image file " << file_counter << " is a duplicate" << endl;
         duplicates_jpeg_filename.push_back(
            jpeg_filename[file_counter]);
      }
      else
      {
         no_duplicates_jpeg_filename.push_back(
            jpeg_filename[file_counter]);
      }
      file_counter++;
   } // while file_counter < jpeg_filename.size() loop
 
   cout << "Number of duplicates found = " << duplicates_jpeg_filename.size()
        << endl;

/*
// Delete duplicate image files:

   for (int i=0; i<duplicates_jpeg_filename.size(); i++)
   {
      unixcommandstr="/bin/rm "+jpegdirname+duplicates_jpeg_filename[i];
      sysfunc::unix_command(unixcommandstr);
   }
*/
 

}
