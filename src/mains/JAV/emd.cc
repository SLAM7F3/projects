// ==========================================================================
// Program EMD
// ==========================================================================
// Last updated on 9/5/13
// ==========================================================================

#include <cstdlib>
#include <iostream>
#include <map>
#include <string>
#include <vector>

#include "optimum/emdL1.h"
#include "general/filefuncs.h"
#include "templates/mytemplates.h"
#include "general/outputfuncs.h"
#include "math/prob_distribution.h"
#include "general/sysfuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::ios;
using std::map;
using std::ofstream;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   string image_subdir="/data/ImageEngine/tidmarsh/";
   string segments_histogram_subdir=image_subdir+"segment_histograms/";
   vector<string> allowed_suffixes;
   allowed_suffixes.push_back("segments_hist");
   vector<string> histogram_filenames=
      filefunc::files_in_subdir_matching_specified_suffixes(
         allowed_suffixes,segments_histogram_subdir);

   int n_frac_mag_bins=8;
   int n_theta_bins=10;
   int n_bins=n_frac_mag_bins*n_theta_bins;

   int n_histograms=histogram_filenames.size();
   cout << "Enter n_histograms to compare:" << endl;
   cin >> n_histograms;

// Import line segment histograms generated by program
// DETECT_SEGMENTS:

   vector<double*> histogram_ptrs;
   for (int i=0; i<n_histograms; i++)
   {
//      cout << "i = " << i << " histogram_filename = " 
//           << histogram_filenames[i] << endl;
      vector<double> curr_bin_values=filefunc::ReadInNumbers(
         histogram_filenames[i]);
      
      double* curr_histogram_ptr=new double[n_bins];
      histogram_ptrs.push_back(curr_histogram_ptr);

      for (unsigned int j=0; j<curr_bin_values.size(); j++)
      {
         (curr_histogram_ptr)[j]=curr_bin_values[j];
      }
   } // loop over index i labeling input histogram files

   EmdL1 em;			// EMD_L1 class

   // run experiments with EMDL1 for 2D histograms

   vector<string> image_pair_names;
   vector<double> emd_distances;
   for (int i=0; i<n_histograms-1; i++)
   {
      double* curr_histogram_ptr=histogram_ptrs[i];
      for (int j=i+1; j<n_histograms; j++)
      {
         double* next_histogram_ptr=histogram_ptrs[j];
         emd_distances.push_back(  em.EmdDist(
            curr_histogram_ptr,next_histogram_ptr,
            n_frac_mag_bins,n_theta_bins) );
         
         image_pair_names.push_back(
            filefunc::getbasename(histogram_filenames[i])+"  "+
            filefunc::getbasename(histogram_filenames[j]) );

      } // loop over index j 
   } // loop over index i 
   
   templatefunc::Quicksort(emd_distances,image_pair_names);

   string output_filename="image_segments.comparison";
   ofstream outstream;
   filefunc::openfile(output_filename,outstream);
   for (unsigned int i=0; i<emd_distances.size(); i++)
   {
      outstream << "EMD = " << emd_distances[i] << " "
                << image_pair_names[i] << endl;
   }
   filefunc::closefile(output_filename,outstream);

   prob_distribution segments_prob(emd_distances,100,0);
   segments_prob.writeprobdists();

   string banner="Exported image segment histogram comparison to "+
      output_filename;
   outputfunc::write_big_banner(banner);
}
