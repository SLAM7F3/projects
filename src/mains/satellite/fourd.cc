// ========================================================================
// Program FOURD takes as command line arguments an XYZP file along
// with a Group 99 .vid file.  It also reads in time-dependent RGBA
// color information from "draped_color_arrays.rgba" generated by
// program RGBA2ARRAY.  This program plays back a temporal sequence of
// colored XYZP point clouds as a 4D movie.

// To see an example of this 4D movie player, chant

// 	   fourd AK_isar_probs.xyzp AK_sunny_cropped_jet.vid

// We last verified that this program ran OK on 12/6/06.

// ========================================================================
// Last updated on 12/3/06; 12/4/06; 12/6/06; 12/19/06; 12/26/06;
// 12/28/06; 12/29/06; 1/3/07; 2/4/07; 4/23/07; 6/1/07; 6/17/07;
// 8/20/07; 9/21/07; 10/15/07; 11/2/08
// ========================================================================

#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <osgDB/FileUtils>
#include <osgUtil/Optimizer>
#include <osgDB/ReadFile>
#include <osgDB/WriteFile>

#include "osg/osgGraphicals/AnimationController.h"
#include "osg/osgGraphicals/CentersGroup.h"
#include "osg/osgGraphicals/CenterPickHandler.h"
#include "osg/Custom3DManipulator.h"
#include "osg/osgOrganization/Decorations.h"
#include "osg/osgSceneGraph/DepthPartitionNode.h"
#include "osg/osgSceneGraph/DistanceAccumulator.h"
#include "general/filefuncs.h"
#include "osg/osgFusion/FusionGroup.h"
#include "osg/osgAnnotators/ImageFramesGroup.h"
#include "osg/ModeController.h"
#include "osg/osg2D/MoviesGroup.h"
#include "osg/osgSceneGraph/MyDatabasePager.h"
#include "osg/osgOperations/Operations.h"
#include "passes/PassesGroup.h"
#include "osg/osg3D/PointCloudsGroup.h"
#include "osg/osg3D/PointCloudKeyHandler.h"
#include "osg/osgGraphicals/PointFinder.h"
#include "math/rotation.h"
#include "space/spasefuncs.h"
#include "osg/osgWindow/ViewerManager.h"

using std::cin;
using std::cout;
using std::endl;
using std::ifstream;
using std::pair;
using std::string;
using std::vector;

// ==========================================================================
int main( int argc, char** argv )
{

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);
   int videopass_ID=passes_group.get_videopass_ID();
   int cloudpass_ID=passes_group.get_curr_cloudpass_ID();

// Construct the viewer and instantiate a ViewerManager:

   WindowManager* window_mgr_ptr=new ViewerManager();
   window_mgr_ptr->initialize_window("3D imagery");
//   window_mgr_ptr->getUsage(*arguments.getApplicationUsage());

// Create a DepthPartitionNode to manage partitioning of the scene

   DepthPartitionNode* root = new DepthPartitionNode;
   root->setActive(true);     // Control whether the node analyzes the scene
//   cout << "max_depth = " << root->getMaxTraversalDepth() << endl;

// Instantiate Operations object to handle mode, animation and image
// number control:

   bool display_movie_state=true;
   bool display_movie_number=true;
   Operations operations(ndims,window_mgr_ptr,display_movie_state,
                         display_movie_number);

   ModeController* ModeController_ptr=operations.get_ModeController_ptr();
   AnimationController* AnimationController_ptr=
      operations.get_AnimationController_ptr();
   root->addChild(operations.get_OSGgroup_ptr());

// Add a custom manipulator to the event handler list:

   osgGA::Custom3DManipulator* CM_3D_ptr=new osgGA::Custom3DManipulator(
      ModeController_ptr,window_mgr_ptr);
   window_mgr_ptr->set_CameraManipulator(CM_3D_ptr);

// Instantiate group to hold all decorations:
   
   Decorations decorations(window_mgr_ptr,ModeController_ptr,CM_3D_ptr);

// Instantiate AlirtGrid decorations group:

   AlirtGrid* grid_ptr=decorations.add_AlirtGrid(
      ndims,passes_group.get_pass_ptr(cloudpass_ID));
   threevector* grid_origin_ptr=grid_ptr->get_world_origin_ptr();

// Instantiate group to hold pointcloud information:

   PointCloudsGroup clouds_group(
      passes_group.get_pass_ptr(cloudpass_ID),grid_origin_ptr);

   bool index_tree_flag=true;
   PointCloud* cloud_ptr=clouds_group.generate_new_Cloud(index_tree_flag);
   window_mgr_ptr->get_EventHandlers_ptr()->push_back(
      new PointCloudKeyHandler(&clouds_group,ModeController_ptr));
   root->addChild(clouds_group.get_OSGgroup_ptr());

// Instantiate a PointFinder;

   PointFinder pointfinder(&clouds_group);
   CM_3D_ptr->set_PointFinder(&pointfinder);

// Initialize ALIRT grid based upon cloud's bounding box:

//   const double x_magnification_factor=2.5;
//   const double y_magnification_factor=1.5;
   const double x_magnification_factor=2;	// OK for AK model
   const double y_magnification_factor=1.3;	// OK for AK model
   double min_X=x_magnification_factor*cloud_ptr->get_min_value(0);
   double max_X=x_magnification_factor*cloud_ptr->get_max_value(0);
   double min_Y=y_magnification_factor*cloud_ptr->get_min_value(1);
   double max_Y=y_magnification_factor*cloud_ptr->get_max_value(1);
   double min_Z=cloud_ptr->get_min_value(2);

   decorations.get_AlirtGridsGroup_ptr()->initialize_grid(
      grid_ptr,min_X,max_X,min_Y,max_Y,min_Z);
   grid_ptr->set_axes_labels("Relative Model X (meters)",
                             "Relative Model Y (meters)");
//   grid_ptr->set_delta_xy(1,1);
   grid_ptr->set_delta_xy(2,2);
   grid_ptr->set_axis_char_label_size(0.6);	// OK for AK model
   grid_ptr->set_tick_char_label_size(0.6);	// OK for AK model
//   grid_ptr->set_axis_char_label_size(1.0);
//   grid_ptr->set_tick_char_label_size(1.0);
   grid_ptr->set_ticks_in_xy_plane_flag(true);
   grid_ptr->update_grid();

// Instantiate a MyDatabasePager to handle paging of files from disk:

   viewer::MyDatabasePager* MyDatabasePager_ptr=new viewer::MyDatabasePager(
      clouds_group.get_SetupGeomVisitor_ptr(),
      clouds_group.get_ColorGeodeVisitor_ptr());
   clouds_group.get_HiresDataVisitor_ptr()->setDatabasePager(
      MyDatabasePager_ptr);

// Instantiate group to hold movie:

   MoviesGroup movies_group(
      ndims,passes_group.get_pass_ptr(videopass_ID),AnimationController_ptr);
   const double alpha=0.75;
   Movie* movie_ptr=movies_group.generate_new_Movie(passes_group,alpha);
   AnimationController_ptr->set_nframes(movie_ptr->get_Nimages());
   root->addChild( movies_group.get_OSGgroup_ptr() );

// Instantiate ImageFrame objects to border time-varying image planes:

   ImageFramesGroup imageframes_group(
      passes_group.get_pass_ptr(videopass_ID),AnimationController_ptr);
   ImageFrame* curr_imageframe_ptr=
      imageframes_group.generate_new_ImageFrame();
   curr_imageframe_ptr->set_axes_labels("Cross Range","Range");
   root->addChild(imageframes_group.get_OSGgroup_ptr());

// Instantiate fusion group to hold math relationships between 3D and
// 2D imagery for draping purposes:

   bool view_draped_video_flag=true;
   FusionGroup* FusionGroup_ptr=new FusionGroup(
      passes_group.get_pass_ptr(videopass_ID),cloud_ptr,movie_ptr,
      AnimationController_ptr,view_draped_video_flag);
   root->addChild(FusionGroup_ptr->get_OSGgroup_ptr());

// Instantiate center pick handler to handle mid point selection:

   CentersGroup centers_group(
      3,passes_group.get_pass_ptr(videopass_ID));
   CenterPickHandler* CenterPickHandler_ptr=new CenterPickHandler(
      3,passes_group.get_pass_ptr(videopass_ID),
      CM_3D_ptr,&centers_group,ModeController_ptr,window_mgr_ptr,
      grid_origin_ptr);
   window_mgr_ptr->get_EventHandlers_ptr()->push_back(
      CenterPickHandler_ptr);

// Parse imagecdf text dump created by Hyrum Anderson's CDFDUMP
// program which was designed to circumvent XELIAS yet still transmit
// header information to G99 video files:

   string imagecdf_text_filename="sunny_side.txt";
//   cout << "Enter name of input imagecdf text file:" << endl;
//   cin >> imagecdf_text_filename;

   filefunc::ReadInfile(imagecdf_text_filename);
   vector<pair<int,int> > image_size;
   vector<twovector> meters_per_pixel,center_shift,trans;
   vector<rotation*> Rmodel_ptr;
   spasefunc::parse_imagecdf_textdump(
      imagecdf_text_filename,image_size,meters_per_pixel,center_shift,trans,
      Rmodel_ptr);

   vector<twovector> scale;

   for (int i=0; i<movie_ptr->get_Nimages(); i++)
   {
      double curr_time=double(i);
      rotation Rimageplane;
      Rimageplane=Rmodel_ptr[i]->transpose();

// Scale, rotation and translation info needed to transform movie
// window:

      threevector Uhat,Vhat;
      Rimageplane.get_column(0,Uhat);
      Rimageplane.get_column(1,Vhat);
      movie_ptr->set_UVW_dirs(curr_time,videopass_ID,Uhat,Vhat);

      int n_Upixels=movie_ptr->getWidth();
      int n_Vpixels=movie_ptr->getHeight();
      double Uscalefactor=n_Upixels*meters_per_pixel[i].get(0)/
         movie_ptr->get_maxU();
      double Vscalefactor=n_Vpixels*meters_per_pixel[i].get(1)/
         movie_ptr->get_maxV();
      scale.push_back(twovector(Uscalefactor,Vscalefactor));
      
      movie_ptr->set_UVW_scales(
         curr_time,videopass_ID,movie_ptr->get_maxU()*scale[i].get(0),
         movie_ptr->get_maxV()*scale[i].get(1));
      threevector What(Uhat.cross(Vhat));
//      const double radius=0;	 // meters
      const double radius=30.0;	 // meters

// Recall that the image center for imagecdf data does not generally
// coincide with the middle pixel.  Instead, the center location is
// stored as a field within the imagecdf header:

// On 4/3/06, we empircally observed that the center pixel's U
// location very closely matches the naive middle position.  However,
// the center pixel's V locastoin is shifted a bit away from the naive
// middle position:

      double mid_udist=0.5*movie_ptr->getWidth()*meters_per_pixel[i].get(0);
//     double mid_udist=center_shift[i].get(0);
//     double mid_vdist=0.5*movie_ptr->getHeight()*meters_per_pixel[i].get(1);
      double mid_vdist=center_shift[i].get(1);
      
      double delta_udist=trans[i].get(0);
      double delta_vdist=trans[i].get(1);

// On 4/3/06, we empirically checked that delta_udist [delta_vdist]
// should be SUBTRACTED from (rather than added to) mid_udist
// [mid_vdist]:
      
      double udist=mid_udist-delta_udist;
      double vdist=mid_vdist-delta_vdist;
      
// Recall that we effectively take the AK model's Z=0 plane to lie at
// the bottom of the IGES model.  In constrast, the IGES model was
// built with its Z=0 plane located approximately 4.5 meters within
// its interior.  In order to take this discrepancy into account, we
// need to shift the imageplane in the +Zhat direction by 4.5
// meters...

      const threevector Zhat(0,0,1);
      threevector Ztrans=cloud_ptr->get_min_value(2)*Zhat;
      threevector curr_trans=udist*Uhat+vdist*Vhat;
      threevector origin=*grid_origin_ptr+radius*What-Ztrans-curr_trans;

// If the IGES model lies within the center of the display grid, we
// need to translate the image plane in XY worldspace by the
// threevector rho defined below:

      threevector rho=(grid_ptr->get_world_middle()- (*grid_origin_ptr) );
      origin += rho;

      plane imageplane(What,origin);
      movie_ptr->set_frame_origin(origin);

      movie_ptr->transform_UV_to_XYZ_coords(curr_time,videopass_ID);
      imageframes_group.get_ImageFrame_ptr(0)->
         transform_linesegments(curr_time,videopass_ID,movie_ptr);

//      cout << "t = " << curr_time << endl;
//      cout << "Uhat = " << movie_ptr->get_Uhat() << endl;
//      cout << "Vhat = " << movie_ptr->get_Vhat() << endl;
//      cout << "Uhat.Vhat = " << movie_ptr->get_Uhat().dot(
//         movie_ptr->get_Vhat()) << endl;
   } // loop over index i labeling video image number


// Attach scene graph to the viewer:

   root->addChild(decorations.get_OSGgroup_ptr());
   window_mgr_ptr->setSceneData(root);

// Create the windows and run the threads.  Viewer's realize method
// calls the CUstomManipulator's home() method:

   window_mgr_ptr->realize();

// Set initial camera view to grid's midpoint:

   CM_3D_ptr->set_worldspace_center(grid_ptr->get_world_middle());
   CM_3D_ptr->set_eye_to_center_distance(
      2*basic_math::max(grid_ptr->get_xsize(),grid_ptr->get_ysize()));
   CM_3D_ptr->update_M_and_Minv();

   while( !window_mgr_ptr->done() )
   {
      window_mgr_ptr->process();
   }

}

