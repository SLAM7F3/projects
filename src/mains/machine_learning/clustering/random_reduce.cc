// ========================================================================
// Program RANDOM_REDUCE imports global "gist-like" global image
// descriptors for a set of images generated by caffe from a text file
// exported by EXTRACT_FEATURES.  It assembles all the feature
// descriptors into an n_feature_vectors x n_feature_dims matrix X.
// RANDOM_REDUCE then generates a random matrix R which reduces the
// number of feature dimension down to a user-specified value K.  The
// product X_reduced = R * X contains the reduced representation for
// the global image descriptors.  The reduced global descriptors are
// exported in dense text and binary formats to an output file within
// the same subdirectory as the input original global descriptors.

//			./random_reduce

// ========================================================================
// Last updated on 2/14/16; 2/15/16; 2/19/16; 3/9/16
// ========================================================================

#include <iostream>
#include <string>
#include <vector>
#include <dlib/matrix.h>

#include "math/basic_math.h"
#include "math/compressfuncs.h"
#include "general/filefuncs.h"
#include "math/genmatrix.h"
#include "math/genvector.h"
#include "numrec/nrfuncs.h"
#include "general/outputfuncs.h"
#include "math/prob_distribution.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::ifstream;
using std::ofstream;
using std::pair;
using std::string;
using std::vector;

// ------------------------------------------------------------------

int main() 
{
   string software_subdir = "/home/pcho/software/";
   string caffe_subdir = software_subdir+"caffe_custom/";
   string _temp_subdir = caffe_subdir+"examples/_temp/";
   string features_subdir = "features_roadsigns2/";
   features_subdir += "31K/";
//   features_subdir += "140K/";
  
   filefunc::add_trailing_dir_slash(features_subdir);
   features_subdir = _temp_subdir+features_subdir;
   cout << "Full features_subdir = " << features_subdir << endl;

   timefunc::initialize_timeofday_clock();

// Import features from text file:

   string banner="Importing features:";
   outputfunc::write_banner(banner);
   string features_filename = features_subdir + "global_features.dat";

// Data matrix X has descriptors stored in columns.
// Xtrans has descriptors stored in rows.  

   genmatrix *Xtrans_ptr = mathfunc::import_from_dense_text_format(
      features_filename);
//   cout << "Data matrix Xtrans = " << Xtrans_ptr->transpose() << endl;

// Count number of zero entries within *Xtrans_ptr.  Fraction of zeros
// in this matrix *perhaps* provides a reasonable guess for reduced
// dimension for randomly projected subspace....

   int n_zeros = 0;
   unsigned int n_rows = Xtrans_ptr->get_mdim();
   unsigned int n_cols = Xtrans_ptr->get_ndim();
   double TINY = 1E-6;
   genvector curr_row(Xtrans_ptr->get_ndim());
   for(unsigned int r = 0; r < n_rows; r++)
   {
      Xtrans_ptr->get_row(r, curr_row);
      for(unsigned int c = 0; c < n_cols; c++)
      {
         if(fabs(Xtrans_ptr->get(r,c)) < TINY)
         {
            n_zeros++;
         }
      }
   }
   double zeros_frac = double(n_zeros)/(n_rows * n_cols);
   cout << endl;
   cout << "zeros_frac = " << zeros_frac << endl;
   cout << "(1-zeros_frac) * n_cols = " << (1-zeros_frac) * n_cols 
        << endl;

   outputfunc::print_elapsed_time();

   int n_feature_vectors = Xtrans_ptr->get_mdim();
   int n_feature_dims = Xtrans_ptr->get_ndim();
   int k = 128;
   cout << "Enter k = reduced dimension for randomly projected subspace:"
        << endl;
   cin >> k;

   cout << "n_feature_vectors = " << n_feature_vectors
        << " n_feature_dims = " << n_feature_dims << endl;
   cout << "k = " << k << endl;

   genmatrix Rtrans(n_feature_dims, k);
   compressfunc::generate_random_projection_matrix(Rtrans);
   outputfunc::print_elapsed_time();
   cout << "After generating random projection matrix, timestamp  = " 
        << timefunc::getcurrdate() << endl;

//   genmatrix RRtrans(R * R.transpose());
//   cout << "R*Rtrans = " << RRtrans << endl;

   cout << "Xtrans: mdim = " << Xtrans_ptr->get_mdim()
        << " ndim = " << Xtrans_ptr->get_ndim() << endl;
   cout << "Rtrans: mdim = " << Rtrans.get_mdim()
        << " ndim = " << Rtrans.get_ndim() << endl;

   genmatrix *Xreduced_trans_ptr= new genmatrix(*Xtrans_ptr * Rtrans);
   outputfunc::print_elapsed_time();
   cout << "After randomly projecting data matrix values, timestamp = " 
        << timefunc::getcurrdate() << endl;

// Force reduced dimension descriptor in each row of
// *Xreduced_trans_ptr to have unit norm:

   for(unsigned int r = 0; r < Xreduced_trans_ptr->get_mdim(); r++)
   {
      Xreduced_trans_ptr->renormalize_row(r);
   }

// Export reduced global descriptors to output text and binary files:

   string reduced_descriptors_filename = features_subdir + 
      "global_features_"+stringfunc::number_to_string(k)+"_dims.txt";
   Xreduced_trans_ptr->export_to_dense_text_format(
      reduced_descriptors_filename);
   banner="Exported reduced descriptors to "+reduced_descriptors_filename;
   outputfunc::write_banner(banner);

   reduced_descriptors_filename = features_subdir + 
      "global_features_"+stringfunc::number_to_string(k)+"_dims.bin";
   Xreduced_trans_ptr->export_to_dense_binary_format(
      reduced_descriptors_filename);
   banner="Exported reduced descriptors to "+reduced_descriptors_filename;
   outputfunc::write_banner(banner);

// Compute dotproducts for a statistically significant subset of
// global descriptor pairs within the original 4096 dimensional space.
// Then compute dotproducts for these same descriptor pairs but within
// the dimensionally-reduced space.  Compute probability distribution
// for ratio of original versus reduced dotproducts:

   int n_dotproducts = 1000 * 1000;
   vector<double> orig_over_reduced_ratios;
   for(int iter = 0; iter < n_dotproducts; iter++)
   {
      outputfunc::update_progress_fraction(
         iter, 0.01 * n_dotproducts, n_dotproducts);
      int n = n_feature_vectors * nrfunc::ran1();
      int p = n_feature_vectors * nrfunc::ran1();
      double orig_dotproduct=Xtrans_ptr->rows_dotproduct(n, p);
      double reduced_dotproduct=Xreduced_trans_ptr->rows_dotproduct(n, p);
      orig_over_reduced_ratios.push_back(
         orig_dotproduct / reduced_dotproduct);
   } // loop over iter index

   outputfunc::print_elapsed_time();
   cout << "Curr time = " << timefunc::getcurrdate() << endl;

   double xlo = 0;
   double xhi = 10;
   prob_distribution prob_ratios(1000, xlo, xhi, orig_over_reduced_ratios);
   prob_ratios.set_title(
      "Distribution of original space to reduced subspace dot product ratios");

   string subtitle=
      "n_dotproducts="+stringfunc::number_to_string(n_dotproducts)+
      "; n_feature_vecs="+stringfunc::number_to_string(n_feature_vectors)+
      "; n_feature_dims="+stringfunc::number_to_string(n_feature_dims)+
      "; K="+stringfunc::number_to_string(k);
   prob_ratios.set_subtitle(subtitle);
   prob_ratios.set_xlabel("Original space/reduced subspace dotproduct ratio");

   string Ksubstr = "K="+stringfunc::number_to_string(k);
   prob_ratios.set_densityfilenamestr("ratios_"+Ksubstr+"_dens.meta");
   prob_ratios.set_cumulativefilenamestr("ratios_"+Ksubstr+"_cum.meta");
   prob_ratios.set_xmin(prob_ratios.mean() - 10 * prob_ratios.std_dev() );
   prob_ratios.set_xmax(prob_ratios.mean() + 10 * prob_ratios.std_dev() );
   prob_ratios.write_density_dist(false, true);

   delete Xtrans_ptr;
   delete Xreduced_trans_ptr;

   outputfunc::print_elapsed_time();
}
