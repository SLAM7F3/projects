// ========================================================================
// Program PARSE_LEVELDB imports LevelDB database files generated by
// caffe's file extraction binary.  It retrieves the dimension of each
// "gist-like" feature vector for processed images.  LEVELDB_TO_TEXT
// prints the feature vector for each image retrieved from the LevelDB
// files.
// ========================================================================
// Last updated on 11/23/15
// ========================================================================

#include <iostream>
#include <string>
#include <glog/logging.h>
#include <google/protobuf/text_format.h>
#include <leveldb/db.h>
#include <leveldb/write_batch.h>
#include "caffe/proto/caffe.pb.h"

using std::cout;
using std::endl;
using std::string;

int main(int argc, char** argv)
{
   //google::InitGoogleLogging(argv[0]);
   if (argc < 2)
   {
      printf("ERROR! Not enough arguments!\nusage: %s <feature_folder>", 
             argv[0]);
      exit(1);
   }

   LOG(INFO) << "Creating leveldb object\n";
   leveldb::DB* db;
   leveldb::Options options;
   options.create_if_missing = true;
   leveldb::Status status = leveldb::DB::Open(options, argv[1], &db);
   assert(status.ok());

   leveldb::Iterator* it = db->NewIterator(leveldb::ReadOptions());
   int i = 0;
   double count = 0.0f;
   for (it->SeekToFirst(); it->Valid(); it->Next()) 
   {
      caffe::Datum d;
      d.clear_float_data();
      d.clear_data();
      string curr_string = it->value().ToString();
//      cout << "i = " << i << " curr_string = " << curr_string << endl;

      d.ParseFromString(it->value().ToString()); 
      cout << "=======================================" << endl;

      cout << "d.ByteSize() = " << d.ByteSize() << endl;
      cout << "d.GetCachedSize() = " << d.GetCachedSize() << endl;
      cout << "d.has_channels() = " << d.has_channels() << endl;
      cout << "d.has_height() = " << d.has_height() << endl;
      cout << "d.has_width() = " << d.has_width() << endl;
      cout << "d.has_label() = " << d.has_label() << endl;
      cout << "d.float_data_size() = " << d.float_data_size() << endl;
      cout << "d.channels() = " << d.channels() << endl;
      cout << "d.height() = " << d.height() << endl;
      cout << "d.width() = " << d.width() << endl;

      for (int j = 0; j < d.channels(); ++j)
      {
         cout << "i = " << i << " j = " << j << " float = " 
              << d.float_data(j) << endl;
         count += d.float_data(j);
      }

      i++;
   }
   assert(it->status().ok());

   LOG(INFO) << "Number of datums (or feature vectors): " << i << "\n";;
   LOG(INFO) << "Reduction of All Vectors to A Scalar Value: " << count << "\n";
   delete it;
}

