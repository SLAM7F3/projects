// ========================================================================
// Program DOCS_IN_TOPIC parses the document-topics text file
// generated by MALLET.  Given a specified topic ID, it returns names
// of document files for which that topic is dominant.
// ========================================================================
// Last updated on 2/28/13; 3/1/13; 5/27/13; 5/29/13
// ========================================================================

#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <vector>

#include "general/filefuncs.h"
#include "math/mathfuncs.h"
#include "templates/mytemplates.h"
#include "general/outputfuncs.h"
#include "passes/PassesGroup.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::map;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);

   string bundle_filename=passes_group.get_bundle_filename();
//   cout << " bundle_filename = " << bundle_filename << endl;
   string bundler_IO_subdir=filefunc::getdirname(bundle_filename);
//   cout << "bundler_IO_subdir = " << bundler_IO_subdir << endl;
   string image_list_filename=bundler_IO_subdir+"image_list.dat";
   
// Instantiate and populate STL map with relationships between
// text filenames and bundler image/document IDs:

   typedef map<std::string, int > FILENAME_DOCID_MAP;
// independent var = text filename prefix
// dependent var = bundler image/document ID

   FILENAME_DOCID_MAP filename_docid_map;
   FILENAME_DOCID_MAP::iterator filename_docid_iter;

   filefunc::ReadInfile(image_list_filename);
   for (int i=0; i<filefunc::text_line.size(); i++)
   {
      string curr_image_filename=filefunc::text_line[i];
      string basename=filefunc::getbasename(curr_image_filename);
      string prefix=stringfunc::prefix(basename);
      filename_docid_map[prefix]=i;
//      cout << "bundler ID = " << i << " prefix = " << prefix << endl;
   }

// Reuters 50K:

   string doc_corpus_prefix="reuters_50K_";
   int n_coarse_topics=40;
   int n_fine_topics=300;

// Reuters 43K:

//   string doc_corpus_prefix="reuters_43K_";
//   int n_coarse_topics=35;
//   int n_fine_topics=250;

   int n_topics=n_fine_topics;
   string doc_topics_filename=bundler_IO_subdir+doc_corpus_prefix+"doc_"
      +stringfunc::number_to_string(n_topics)+"topics.txt";

   filefunc::ReadInfile(doc_topics_filename);

   typedef map<int,vector<double>* > TOPIC_ID_DOC_FRAC_MAP;
   TOPIC_ID_DOC_FRAC_MAP topic_id_doc_frac_map;
   TOPIC_ID_DOC_FRAC_MAP::iterator iter;
// independent int = topic ID
// dependent STL vector holds document dominant topic fractions

   int topic_ID;
   cout << "Enter particular topic ID:" << endl;
   cin >> topic_ID;

   for (int i=0; i<filefunc::text_line.size(); i++)
   {
      string curr_line=filefunc::text_line[i];
//      cout << curr_line << endl;
      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         curr_line);
      int mallet_doc_ID=stringfunc::string_to_number(substrings[0]);
      string doc_filename=filefunc::getbasename(substrings[1]);
      string prefix=stringfunc::prefix(doc_filename);
      
      filename_docid_iter=filename_docid_map.find(prefix);
      if (filename_docid_iter==filename_docid_map.end())
      {
         cout << "Error!  Couldn't find prefix in filename_docid_map!"
              << endl;
         outputfunc::enter_continue_char();
         continue;
      }
      int doc_ID=filename_docid_iter->second;

      int dominant_topic_ID=stringfunc::string_to_number(substrings[2]);
      double dominant_topic_frac=stringfunc::string_to_number(substrings[3]);

      iter=topic_id_doc_frac_map.find(dominant_topic_ID);
      if (iter==topic_id_doc_frac_map.end())
      {
         vector<double>* doc_frac_ptr=new vector<double>;
         doc_frac_ptr->push_back(dominant_topic_frac);
         topic_id_doc_frac_map[dominant_topic_ID]=doc_frac_ptr;
      }
      else
      {
         vector<double>* doc_frac_ptr=iter->second;
         doc_frac_ptr->push_back(dominant_topic_frac);
      }

      if (dominant_topic_ID != topic_ID) continue;
      
      cout << doc_ID << " "
           << doc_filename << " "
           << dominant_topic_ID << " "
           << dominant_topic_frac << endl;
   } // loop over index labeling line in output MALLET doc-topics text file


   
}

