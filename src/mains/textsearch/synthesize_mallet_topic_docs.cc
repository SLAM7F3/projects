// ========================================================================
// Program SYNTHESIZE_MALLET_TOPIC_DOCS is a variant of
// SYNTHESIZE_TOPIC_DOCS. It imports topic words generated by the
// Machine learning for language toolkit (MALLET).  For each topic, it
// generates a text document containing topic keywords whose
// repetition frequencies correlate with individual topic words'
// importance. The synthesized text documents are exported to
// topic_subdir/topic_doc_NNN.txt.

/*

./synthesize_mallet_topic_docs                                         \
--region_filename ./bundler/textdocs/reuters/packages/peter_inputs.pkg \
--GIS_layer ./packages/imagery_metadata.pkg 

*/

// ========================================================================
// Last updated on 2/25/13
// ========================================================================

#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "gmm/gmm.h"
#include "gmm/gmm_matrix.h"

#include "general/filefuncs.h"
#include "math/genvector.h"
#include "graphs/graphdbfuncs.h"
#include "image/graphicsfuncs.h"
#include "templates/mytemplates.h"
#include "general/outputfuncs.h"
#include "passes/PassesGroup.h"
#include "math/prob_distribution.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"
#include "datastructures/union_find.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::map;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

/*
//   bool modify_IMAGERY_database_flag=true;
   bool modify_IMAGERY_database_flag=false;
   if (modify_IMAGERY_database_flag)
   {
      cout << "modify_IMAGERY_database_flag = true" << endl;
   }
   else
   {
      cout << "modify_IMAGERY_database_flag = false" << endl;
   }
   outputfunc::enter_continue_char();
*/

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   PassesGroup passes_group(&arguments);

   string bundle_filename=passes_group.get_bundle_filename();
//   cout << " bundle_filename = " << bundle_filename << endl;
   string bundler_IO_subdir=filefunc::getdirname(bundle_filename);
   cout << "bundler_IO_subdir = " << bundler_IO_subdir << endl;

   vector<int> GISlayer_IDs=passes_group.get_GISlayer_IDs();
//   cout << "GISlayer_IDs.size() = " << GISlayer_IDs.size() << endl;

//   bool astro_flag=false;
//   bool reuters_flag=true;
   string arXiv_subdir="/media/66368D22368CF3F9/visualization/arXiv/";
   string astro_subdir=arXiv_subdir+"astro/";
   string reuters_subdir=arXiv_subdir+"reuters/export/";
//   string text_subdir=astro_subdir+"txt/";
   string text_subdir=reuters_subdir+"text/";
   string mallet_subdir=text_subdir+"mallet_43K/";
//   filefunc::dircreate(mallet_subdir);
   string topic_docs_subdir=mallet_subdir+"topic_docs/";
   filefunc::dircreate(topic_docs_subdir);

// Import "fine" topic words:

   string topic_words_filename=bundler_IO_subdir+"reuters_43K_topic_words.txt";
   filefunc::ReadInfile(topic_words_filename);
   int n_fine_topics=filefunc::text_line.size();
   cout << "n_fine_topics = " << n_fine_topics << endl;

   for (int t=0; t<n_fine_topics; t++)
   {
      string curr_line=filefunc::text_line[t];
//      cout << t << " " << curr_line << endl;
      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         curr_line);
      vector<string> fine_topic_words;
      cout << "Topic t = " << t << endl;

      string topic_label="_"+stringfunc::integer_to_string(t,3);
      string topic_doc_filename=topic_docs_subdir+"topic_doc"+topic_label
         +".txt";
      ofstream topic_doc_stream;
      filefunc::openfile(topic_doc_filename,topic_doc_stream);

      int max_s=30;
//      for (int s=0; s<substrings.size()-2; s++)
      for (int s=0; s<max_s; s++)
      {
//         int word_rep=2*(10-s/5);
//         int word_rep=2*(5-s/3);
         int word_rep=4-s/2;
//         int word_rep=1;
         word_rep=basic_math::max(1,word_rep);
//         cout << "s = " << s << " word rep = " << word_rep << endl;
         string curr_fine_topic_word=substrings[s+2];
         for (int w=0; w<word_rep; w++)
         {
            topic_doc_stream << curr_fine_topic_word << " ";
         }
      }
      cout << endl << endl;

      filefunc::closefile(topic_doc_filename,topic_doc_stream);
      string banner="Exported "+topic_doc_filename;
      outputfunc::write_banner(banner);
   } // loop over index t labeling "fine" topic
}

