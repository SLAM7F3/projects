// ========================================================================
// Program LOAD_PLATFORM_METADATA import aircraft metadata from text
// files generated by program mains/thunderstorm/store_FLIR_metadata.
// It inserts these metadata into the platform_metadata table
// of the images database table.

// 	./load_platform_metadata --GIS_layer ./packages/imagery_metadata.pkg

// ========================================================================
// Last updated on 5/4/12
// ========================================================================

#include <iostream>
#include <string>
#include <vector>

#include "astro_geo/Clock.h"
#include "general/filefuncs.h"
#include "astro_geo/geopoint.h"
#include "video/imagesdatabasefuncs.h"
#include "passes/PassesGroup.h"
#include "osg/osgGIS/postgis_databases_group.h"
#include "general/sysfuncs.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::map;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

// Use an ArgumentParser object to manage the program arguments:

   osg::ArgumentParser arguments(&argc,argv);
   const int ndims=3;
   PassesGroup passes_group(&arguments);

   int cloudpass_ID=passes_group.get_curr_cloudpass_ID();
   vector<int> GISlayer_IDs=passes_group.get_GISlayer_IDs();
//   cout << "GISlayer_IDs.size() = " << GISlayer_IDs.size() << endl;

// Instantiate postgis database objects to send data to and retrieve
// data from external Postgres database:

   postgis_databases_group* postgis_databases_group_ptr=
      new postgis_databases_group;
   postgis_database* postgis_db_ptr=postgis_databases_group_ptr->
      generate_postgis_database_from_GISlayer_IDs(
         passes_group,GISlayer_IDs);
//   cout << "postgis_db_ptr = " << postgis_db_ptr << endl;


   int campaign_ID,mission_ID,image_ID,datum_ID;

// Note added on 5/4/12:

// Platform_ID should be pulled from IMAGERY database tables rather than
// hardwired below...

//   int platform_ID=0;	// human
   int platform_ID=1;	// Twin Otter

   string subdir="../thunderstorm/";
   string aircraft_metadata_filename=subdir+
      "aircraft_metadata_May11_flight1_second.txt";
//      "aircraft_metadata_May11_flight1_first.txt";
   filefunc::ReadInfile(aircraft_metadata_filename);
   
   Clock clock;

   bool northern_hemisphere_flag=true;
   int UTM_zone=12;	// AZ
   string image_subdir="/data/ImageEngine/Thunderstorm/20110511_flight1/";

   int starting_metadata_ID=0;
//   int starting_metadata_ID=7539;	// May 11, 2011 flight #1 2nd part
   
   cout.precision(14);
   for (int i=0; i<filefunc::text_line.size(); i++)
   {
      vector<string> substrings=stringfunc::decompose_string_into_substrings(
         filefunc::text_line[i]);
      string image_prefix=substrings[0];
      double epoch=stringfunc::string_to_number(substrings[1]);
      double easting=stringfunc::string_to_number(substrings[2]);
      double northing=stringfunc::string_to_number(substrings[3]);
      double altitude=stringfunc::string_to_number(substrings[4]);
      double yaw=stringfunc::string_to_number(substrings[5]);
      double pitch=stringfunc::string_to_number(substrings[6]);
      double roll=stringfunc::string_to_number(substrings[7]);
      clock.convert_elapsed_secs_to_date(epoch);
      string UTC=clock.YYYY_MM_DD_H_M_S();

      geopoint curr_posn(
         northern_hemisphere_flag,UTM_zone,easting,northing,altitude);
      double longitude=curr_posn.get_longitude();
      double latitude=curr_posn.get_latitude();

      string URL=image_subdir+image_prefix+".jpg";
      imagesdatabasefunc::get_image_metadata_given_URL(
         postgis_db_ptr,URL,campaign_ID,mission_ID,image_ID,datum_ID);

      int metadata_ID=starting_metadata_ID+i;

//      cout << "image_prefix = " << image_prefix 
//           << " URL = " << URL << endl;
//      cout << "campaign_ID = " << campaign_ID 
//           << " mission_ID = " << mission_ID
//           << " image_ID = " << image_ID
//           << " datum_ID = " << datum_ID << endl;
//      cout << " epoch = " << epoch 
//           << " UTC = " << UTC << endl;
//      cout << "easting = " << easting 
//           << " northing = " << northing 
//           << " alt = " << altitude << endl;
//      cout << "lon = " << longitude
//           << " lat = " << latitude << endl;
//      cout << "yaw = " << yaw << " pitch = " << pitch
//           << " roll = " << roll << endl;

      imagesdatabasefunc::insert_platform_metadata(
         postgis_db_ptr,campaign_ID,mission_ID,platform_ID,
         metadata_ID,image_ID,image_prefix,UTC,epoch,
         longitude,latitude,altitude,yaw,pitch,roll);

//      outputfunc::enter_continue_char();

   } // loop over index i labeling text lines
   
   

}

