// ==========================================================================
// WHITEN_DESCRIPTORS imports raw 64x1 descriptors for 8x8 pixel
// patches selected from character jpeg images generated by program
// DESCRIPTORS.  It also imports the descriptors' mean and inverse
// square root covariance matrix which were previously output by
// DESCRIPTORS.  The mean is subtracted from each raw descriptor, and
// the residual is multiplied by the inverse square root covariance
// matrix in order to whiten it. covariance matrix in order to
// "whiten" it.  Whitened patch descriptors are exported to a single
// HDF5 binary file.

//			    whiten_descriptors

// Note: This version of WHITEN_DESCRIPTORS is deprecated as of Jun
// 2014.  Use mains/programs/imagetext/WHITEN_DESCRIPTORS instead!

// ==========================================================================
// Last updated on 6/2/12; 6/25/12; 8/23/12; 11/24/12
// ==========================================================================

#include <iostream>
#include <string>
#include <vector>
#include <flann/flann.hpp>
#include <flann/io/hdf5.h>

#include "general/filefuncs.h"
#include "math/genmatrix.h"
#include "math/genvector.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "classification/text_detector.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   const int D=64;

   bool rgb_pixels_flag=false;
   string dictionary_subdir="./training_data/dictionary/";
   text_detector* text_detector_ptr=new text_detector(
      dictionary_subdir,rgb_pixels_flag);
   text_detector_ptr->import_inverse_sqrt_covar_matrix();

// Import patch descriptors for all character jpeg images:

   flann::Matrix<float> patch_descriptors;
   string patches_hdf5_filename=dictionary_subdir+"raw_patch_features.hdf5";
   flann::load_from_file(
      patch_descriptors,patches_hdf5_filename.c_str(),"patch_descriptors");

// Whiten all patch descriptors by multiplying with
// *inverse_covar_sqrt_matrix_ptr:

   int N=patch_descriptors.rows;
   cout << "N = " << N << endl;
   
//   genvector* recur_mean_ptr=new genvector(D);
//   recur_mean_ptr->clear_values();
//   genmatrix* recur_second_moment_ptr=new genmatrix(D,D);
//   recur_second_moment_ptr->clear_values();
//   genmatrix* outerproduct_ptr=new genmatrix(D,D);

   for (int n=0; n<N; n++)
   {
      float* pd_ptr=patch_descriptors.ptr()+n*D;
      float* whitened_row=text_detector_ptr->whiten_patch(pd_ptr);

//      genvector* curr_X_ptr=new genvector(D);         
      for (int d=0; d<D; d++)
      {
         patch_descriptors[n][d]=whitened_row[d];

//         curr_X_ptr->put(d,whitened_row[d]);
      } // loop over index d

//      mathfunc::recursive_mean(D,n,curr_X_ptr,recur_mean_ptr);
//      mathfunc::recursive_second_moment(
//         D,n,curr_X_ptr,outerproduct_ptr,recur_second_moment_ptr);

   } // loop over index n labeling rows in patch_descriptors array
   delete text_detector_ptr;


/*
// Compute covariance matrix from recursively calculated first and
// second moments for all descriptors:

   genmatrix recur_mean_outerprod(D,D);
   recur_mean_outerprod=recur_mean_ptr->outerproduct(*recur_mean_ptr);
//   cout << "recur_mean_outerprod = " << recur_mean_outerprod << endl;

   genmatrix* recur_covar_ptr=new genmatrix(D,D);
   *recur_covar_ptr = *recur_second_moment_ptr - recur_mean_outerprod;
   cout << "*recur_covar_ptr = " << *recur_covar_ptr << endl;
*/

   cout << "Saving patch descriptors" << endl;
   string whitened_hdf5_filename=dictionary_subdir+
      "whitened_patch_features.hdf5";
   filefunc::deletefile(whitened_hdf5_filename);
   flann::save_to_file(
      patch_descriptors,whitened_hdf5_filename,"patch_descriptors");

   string banner="Wrote N = "+stringfunc::number_to_string(N)
      +" whitened patch descriptors to "+whitened_hdf5_filename;
   outputfunc::write_big_banner(banner);
}

   
