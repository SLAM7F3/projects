// ==========================================================================
// SVM_STATS reads in 6-dimensional descriptors for text and non-text
// which were previously generated by REGION_STATS.  It
// uses Davis King's DLIB library to train an SVM classifier with a
// gaussian a radial-basis kernel.  Binary and probabilistic
// decision functions which indicate whether a candidate extremal
// region may contain a text character or not are exported in
// serialized DLIB formats.  Subsequent programs can then use DLIB to
// import these trained decision functions.

// 				svm_stats

// ==========================================================================
// Last updated on 6/24/12
// ==========================================================================


#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <flann/flann.hpp>
#include <flann/io/hdf5.h>
#include "dlib/svm.h"

#include "astro_geo/Clock.h"
#include "general/filefuncs.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "time/timefuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::ifstream;
using std::ios;
using std::ofstream;
using std::string;
using std::vector;

using namespace dlib;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   Clock clock;
   clock.set_time_based_on_local_computer_clock();
   cout << endl;
   cout << "Starting time: " << clock.YYYY_MM_DD_H_M_S() << endl << endl;

   string features_subdir="./training_data/features/";

// Import text and non-text extremal region shape descriptors:

   const int K=1;	// all_entropy
//   const int K=6;

   string text_features_filename=features_subdir+"text_randomness.dat";
   filefunc::ReadInfile(text_features_filename);
   int Ntext=filefunc::text_line.size();

   flann::Matrix<float> text_descriptors(new float[Ntext*K],Ntext,K);
   for (int i=0; i<Ntext; i++)
   {
      std::vector<string> substrings=
         stringfunc::decompose_string_into_substrings(filefunc::text_line[i]);
      text_descriptors[i][0]=stringfunc::string_to_number(substrings[4]);


//      text_descriptors[i][0]=stringfunc::string_to_number(substrings[1]);
//      text_descriptors[i][1]=stringfunc::string_to_number(substrings[2]);
//      text_descriptors[i][2]=stringfunc::string_to_number(substrings[3]);
//      text_descriptors[i][3]=stringfunc::string_to_number(substrings[4]);
//      text_descriptors[i][4]=stringfunc::string_to_number(substrings[5]);
//      text_descriptors[i][5]=stringfunc::string_to_number(substrings[6]);
   }
   cout << "Number of text features = " << Ntext << endl;


   string nontext_features_filename=features_subdir+"nontext_randomness.dat";
   filefunc::ReadInfile(nontext_features_filename);
   int Nnontext=filefunc::text_line.size();

   flann::Matrix<float> nontext_descriptors(
      new float[Nnontext*K],Nnontext,K);
   for (int i=0; i<Nnontext; i++)
   {
      std::vector<string> substrings=
         stringfunc::decompose_string_into_substrings(filefunc::text_line[i]);
      nontext_descriptors[i][0]=stringfunc::string_to_number(substrings[4]);

//      nontext_descriptors[i][0]=stringfunc::string_to_number(substrings[1]);
//      nontext_descriptors[i][1]=stringfunc::string_to_number(substrings[2]);
//      nontext_descriptors[i][2]=stringfunc::string_to_number(substrings[3]);
//      nontext_descriptors[i][3]=stringfunc::string_to_number(substrings[4]);
//      nontext_descriptors[i][4]=stringfunc::string_to_number(substrings[5]);
//      nontext_descriptors[i][5]=stringfunc::string_to_number(substrings[6]);
   }
   cout << "Number of non-text features = " << Nnontext << endl;

// The svm functions use column vectors to contain a lot of the
// data on which they operate. So the first thing we do here is
// declare a convenient typedef.

// This typedef declares a matrix with K rows and 1 column.  It will
// be the object that contains each of our K dimensional samples. 

   typedef matrix<double, K, 1> sample_type;

// This is a typedef for the type of kernel we are going to use in
// this example.  In this case I have selected the linear kernel that
// can operate on our K-dim sample_type objects

    typedef radial_basis_kernel<sample_type> kernel_type;

// Now we make objects to contain our samples and their respective
// labels.

   std::vector<sample_type> samples;
   std::vector<double> labels;
   
   sample_type samp;

// Load data from text extremal regions into samples and labels
// objects:

   for (int n=0; n<Ntext; n++)
   {
      for (int k=0; k<K; k++)
      {
         samp(k) = text_descriptors[n][k];
      }
      samples.push_back(samp);
      labels.push_back(1);
   } // loop over index n

// Load data from non-text extremal regions into samples and labels
// objects:

   for (int n=0; n<Nnontext; n++)
   {
      for (int k=0; k<K; k++)
      {
         samp(k) = nontext_descriptors[n][k];
      }
      samples.push_back(samp);
      labels.push_back(-1);
   } // loop over index n

// Here we normalize all the samples by subtracting their mean and
// dividing by their standard deviation. This is generally a good idea
// since it often heads off numerical stability problems and also
// prevents one large feature from smothering others.  Doing this
// doesn't matter much in this example so I'm just doing this here so
// you can see an easy way to accomplish this with the library.

   vector_normalizer<sample_type> normalizer;
   // let the normalizer learn the mean and standard deviation of the samples
   normalizer.train(samples);
   // now normalize each sample
   for (unsigned long i = 0; i < samples.size(); i++)
      samples[i] = normalizer(samples[i]); 

// Now that we have some data we want to train on it.  However, there
// are two parameters to the training.  These are the nu and gamma
// parameters.  Our choice for these parameters will influence how
// good the resulting decision function is.  To test how good a
// particular choice of these parameters is we can use the
// cross_validate_trainer() function to perform n-fold cross
// validation on our training data.  However, there is a problem with
// the way we have sampled our distribution above.  The problem is
// that there is a definite ordering to the samples.  That is, the
// first half of the samples look like they are from a different
// distribution than the second half.  This would screw up the cross
// validation process but we can fix it by randomizing the order of
// the samples with the following function call.

   randomize_samples(samples, labels);

// Here we make an instance of the svm_c_trainer object that uses our
// kernel type:

   svm_c_trainer<kernel_type> trainer;
//   krr_trainer<kernel_type> trainer;

/*
// Now we loop over some different C values to see how good
// they are.  Note that this is a very simple way to try out a few
// possible parameter choices.  You should look at the
// model_selection_ex.cpp program for examples of more sophisticated
// strategies for determining good parameter choices.

   double min_gamma=0.1;
   double max_gamma=10;
   double min_C=0.25;
   double max_C=25;


   double max_pos_correct=-1;
   double max_product_correct=-1;
   double max_sum_correct=-1;

   double best_pos_correct_pos_correct,best_pos_correct_neg_correct;
   double best_product_pos_correct,best_product_neg_correct;
   double best_sum_pos_correct,best_sum_neg_correct;

   double best_pos_correct_gamma,best_pos_correct_C;
   double best_product_gamma,best_sum_gamma;
   double best_product_C,best_sum_C;

   cout << "Performing cross validation:" << endl;
   for (double gamma=min_gamma; gamma < max_gamma; gamma *= 2)
   {
      trainer.set_kernel(kernel_type(gamma));
      for (double C = min_C; C < max_C; C *= 2)
      {
         trainer.set_c(C);

// Print out the cross validation accuracy for 3-fold cross validation
// using the current C coeffient. cross_validate_trainer() returns a
// row vector.  The first element of the vector is the fraction of +1
// training examples correctly classified and the second number is the
// fraction of -1 training examples correctly classified.

         matrix<double,1,2> pos_neg_results=
            cross_validate_trainer(trainer,samples,labels,3);
         double pos_correct=pos_neg_results(0,0);
         double neg_correct=pos_neg_results(0,1);

         if (pos_correct > max_pos_correct)
         {
            max_pos_correct=pos_correct;
            best_pos_correct_pos_correct=pos_correct;
            best_pos_correct_neg_correct=neg_correct;
            best_pos_correct_gamma=gamma;
            best_pos_correct_C=C;
         }
         
         double product_correct=pos_correct*neg_correct;
         if (product_correct > max_product_correct)
         {
            max_product_correct=product_correct;
            best_product_pos_correct=pos_correct;
            best_product_neg_correct=neg_correct;
            best_product_gamma=gamma;
            best_product_C=C;
         }
         
         double sum_correct=pos_correct+neg_correct;
         if (sum_correct > max_sum_correct)
         {
            max_sum_correct=sum_correct;
            best_sum_pos_correct=pos_correct;
            best_sum_neg_correct=neg_correct;
            best_sum_gamma=gamma;
            best_sum_C = C;
         }

         cout << "gamma = " << gamma << " C = " << C << endl;
         cout << "  Cross validation accuracy: " 
              << cross_validate_trainer(trainer, samples, labels, 3);
         cout << "    Product_correct = " << product_correct
              << " sum_correct = " << sum_correct << endl << endl;
      }

   } // loop over gamma

   cout << "max_pos_correct = " << max_pos_correct << endl;
   cout << "best_pos_correct_pos_correct = " 
        << best_pos_correct_pos_correct << endl;
   cout << "best_pos_correct_neg_correct = " 
        << best_pos_correct_neg_correct << endl;
   cout << "best_pos_correct_gamma = " << best_pos_correct_gamma << endl;
   cout << "best_pos_correct_C = " << best_pos_correct_C << endl;
   cout << endl;

   cout << "max_product_correct = " << max_product_correct << endl;
   cout << "best_product_pos_correct = " << best_product_pos_correct << endl;
   cout << "best_product_neg_correct = " << best_product_neg_correct << endl;
   cout << "best_product_gamma = " << best_product_gamma << endl;
   cout << "best_product_C = " << best_product_C << endl;
   cout << endl;

   cout << "max_sum_correct = " << max_sum_correct << endl;
   cout << "best_sum_pos_correct = " << best_sum_pos_correct << endl;
   cout << "best_sum_neg_correct = " << best_sum_neg_correct << endl;
   cout << "best_sum_gamma = " << best_sum_gamma<< endl;
   cout << "best_sum_C = " << best_sum_C << endl;

   exit(-1);
*/

// After performing cross-validation on 2.5K text & 1K non-text
// samples on 6/24/12, we found the following parameter estimates:

//	max_product_correct = 0.624907
//	best_product_pos_correct = 0.92826
//	best_product_neg_correct = 0.673203
//	best_product_gamma = 0.4
//	best_product_C = 16

// After performing cross-validation on 2.5K text and 1.5K non-text
// samples on 6/24/12, we found the following parameter estimates for just
// all_entropy features:

//	max_pos_correct = 0.948474
//	best_pos_correct_pos_correct = 0.948474
//	best_pos_correct_neg_correct = 0.364469
//	best_pos_correct_gamma = 0.1
//	best_pos_correct_C = 16

   double gamma=0.1;
   double C=16;

   trainer.set_kernel(kernel_type(gamma));   
   trainer.set_c(C);
//   trainer.be_verbose();

// Now we train on the full set of data and obtain the resulting
// decision function.  The decision function will return values >= 0
// for samples it predicts are in the +1 class and numbers < 0 for
// samples it predicts to be in the -1 class.

   typedef decision_function<kernel_type> dec_funct_type;
   typedef normalized_function<dec_funct_type> funct_type;

// Here we are making an instance of the normalized_function object.
// This object provides a convenient way to store the vector
// normalization information along with the decision function we are
// going to learn.

   funct_type learned_function;
   learned_function.normalizer = normalizer;  // save normalization 
					      //   information

// Perform the actual SVM training and save the results.  Print out
// the number of support vectors in the resulting decision function:

   timefunc::initialize_timeofday_clock();
   cout << endl;
   cout << "-----------------------------------------------------" << endl;
   cout << "Starting to train binary decision function:" << endl;

//   trainer.use_classification_loss_for_loo_cv();
   learned_function.function = trainer.train(samples, labels); 

   cout << "Elapsed time = " 
        << timefunc::elapsed_timeofday_time()/60 << " mins = " 
        << timefunc::elapsed_timeofday_time()/3600 << " hours" << endl;
   cout << "Number of support vectors in our learned_function =  " 
        << learned_function.function.basis_vectors.nr() << endl;
   cout << "Number of text+non-text training samples = " 
        << Ntext+Nnontext << endl;

// Another thing that is worth knowing is that just about everything
// in dlib is serializable. So for example, you can save the
// learned_pfunct object to disk and recall it later like so:

   string bfunction_filename="randomness_bifunc_"+
      stringfunc::number_to_string(Ntext)+"_"+
      stringfunc::number_to_string(Nnontext)+".dat";
   ofstream fout(bfunction_filename.c_str(),ios::binary);
   serialize(learned_function,fout);
   fout.close();

   string banner="Exported learned binary function to "+bfunction_filename;
   outputfunc::write_banner(banner);

   cout << "Current time: " << clock.YYYY_MM_DD_H_M_S() << endl;

/*
// Now let's try this decision_function on some samples we haven't seen
// before

   sample_type sample;

   sample(0) = 3.123;
   sample(1) = 2;
   cout << "This sample should be >= 0 and it is classified as a " 
        << learned_function(sample) << endl;

   sample(0) = 3.123;
   sample(1) = 9.3545;
   cout << "This sample should be >= 0 and it is classified as a " 
        << learned_function(sample) << endl;

   sample(0) = 13.123;
   sample(1) = 9.3545;
   cout << "This sample should be < 0 and it is classified as a " 
        << learned_function(sample) << endl;

   sample(0) = 13.123;
   sample(1) = 0;
   cout << "This sample should be < 0 and it is classified as a " 
        << learned_function(sample) << endl;
*/


// We can also train a decision function that reports a well
// conditioned probability instead of just a number > 0 for the +1
// class and < 0 for the -1 class.  An example of doing that follows:

   typedef probabilistic_decision_function<kernel_type> 
      probabilistic_funct_type;  
   typedef normalized_function<probabilistic_funct_type> pfunct_type;

   pfunct_type learned_pfunct; 
   learned_pfunct.normalizer = normalizer;

   timefunc::initialize_timeofday_clock();
   cout << endl;
   cout << "-----------------------------------------------------" << endl;
   cout << "Starting to train probabilistic decision function:" << endl;

   learned_pfunct.function = train_probabilistic_decision_function(
      trainer, samples, labels, 3);

   cout << "Elapsed time = " 
        << timefunc::elapsed_timeofday_time()/60 << " mins = " 
        << timefunc::elapsed_timeofday_time()/3600 << " hours" << endl;

// Now we have a function that returns the probability that a given
// sample is of the +1 class.

// print out the number of support vectors in the resulting decision
// function. (it should be the same as in the one above)

   cout << "Number of support vectors in our learned_pfunct =  " 
        << learned_pfunct.function.decision_funct.basis_vectors.nr() << endl;
   cout << "Number of text+non-text training samples = " 
        << Ntext+Nnontext << endl;

   cout << "Text binary decision function = "
        << test_binary_decision_function(
           learned_function.function,samples,labels)
        << endl;

/*
   sample(0) = 3.123;
   sample(1) = 2;
   cout << "This +1 example should have high probability.  Its probability is: " << learned_pfunct(sample) << endl;

   sample(0) = 3.123;
   sample(1) = 9.3545;
   cout << "This +1 example should have high probability.  Its probability is: " << learned_pfunct(sample) << endl;

   sample(0) = 13.123;
   sample(1) = 9.3545;
   cout << "This -1 example should have low probability.  Its probability is: " << learned_pfunct(sample) << endl;

   sample(0) = 13.123;
   sample(1) = 0;
   cout << "This -1 example should have low probability.  Its probability is: " << learned_pfunct(sample) << endl;
*/


// Another thing that is worth knowing is that just about everything
// in dlib is serializable. So for example, you can save the
// learned_pfunct object to disk and recall it later like so:

   string pfunction_filename="randomness_pfunct_"+
      stringfunc::number_to_string(Ntext)+"_"+
      stringfunc::number_to_string(Nnontext)+".dat";

   ofstream fout2(pfunction_filename.c_str(),ios::binary);
   serialize(learned_pfunct,fout2);
   fout2.close();

   banner="Exported learned probabilistic function to "+pfunction_filename;
   outputfunc::write_banner(banner);

   cout << "Current time: " << clock.YYYY_MM_DD_H_M_S() << endl;

// Now lets open the 2 serialized files back up and load the function
// objects they contain:

   ifstream fin(bfunction_filename.c_str(),ios::binary);
   funct_type imported_learned_funct;
   deserialize(imported_learned_funct, fin);

   ifstream fin2(pfunction_filename.c_str(),ios::binary);
   pfunct_type imported_learned_pfunct; 
   deserialize(imported_learned_pfunct, fin2);

/*
   for (int i=0; i<samples.size(); i++)
   {
      cout << "i = " << i << " label = " << labels[i]
//           << " class = " << learned_function.function(samples[i]) 
           << " class = " << imported_learned_funct.function(samples[i]) 
//           << " prob = " << learned_pfunct.function(samples[i]) 
           << " prob = " << imported_learned_pfunct.function(samples[i]) 
           << endl;
   }
*/

// Note that there is also an example program that comes with dlib
// called the file_to_code_ex.cpp example.  It is a simple program
// that takes a file and outputs a piece of C++ code that is able to
// fully reproduce the file's contents in the form of a std::string
// object.  So you can use that along with the std::istringstream to
// save learned decision functions inside your actual C++ code files
// if you want.

// Lastly, note that the decision functions we trained above involved
// well over 200 basis vectors.  Support vector machines in general
// tend to find decision functions that involve a lot of basis
// vectors.  This is significant because the more basis vectors in a
// decision function, the longer it takes to classify new examples.
// So dlib provides the ability to find an approximation to the normal
// output of a trainer using fewer basis vectors.

// Here we determine the cross validation accuracy when we approximate
// the output using only 10 basis vectors.  To do this we use the
// reduced2() function.  It takes a trainer object and the number of
// basis vectors to use and returns a new trainer object that applies
// the necessary post processing during the creation of decision
// function objects.

//   cout << "Cross validation accuracy with only 10 support vectors: " 
//        << cross_validate_trainer(reduced2(trainer,10), samples, labels, 3)
//        << endl;

// Lets print out the original cross validation score too for
// comparison:

//   cout << "cross validation accuracy with all the original support vectors: " 
//        << cross_validate_trainer(trainer, samples, labels, 3);

// When you run this program you should see that, for this problem,
// you can reduce the number of basis vectors down to 10 without
// hurting the cross validation accuracy.

// To get the reduced decision function out we would just do this:
//   learned_function.function = reduced2(trainer,10).train(samples, labels);

// And similarly for the probabilistic_decision_function: 

//   learned_pfunct.function = train_probabilistic_decision_function(
//      reduced2(trainer,10), samples, labels, 3);


   cout << "Text binary decision function = "
        << test_binary_decision_function(
           reduced2(null_trainer(learned_function.function), 50).train(
              samples,labels),samples,labels)
        << endl;

}

