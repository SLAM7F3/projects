// ========================================================================
// Program DROID_PIX parses the text files generated by Paul
// Breimyer's codes running on droid cell phones which accompany
// output JPEG images.  SQL commands are generated which insert photo
// timestamp and geolocation into the photos table of the TOC
// database.

//				droid_pix

// ========================================================================
// Last updated on 9/2/10; 9/3/10; 11/27/10; 1/18/11
// ========================================================================

#include <iostream>
#include "astro_geo/Clock.h"
#include "math/constant_vectors.h"
#include "general/filefuncs.h"
#include "filter/filterfuncs.h"
#include "math/mathfuncs.h"
#include "video/photodbfuncs.h"
#include "video/photograph.h"
#include "math/statevector.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "video/videofuncs.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

   cout.precision(12);
   
   Clock clock;
   clock.current_local_time_and_UTC();
   cout << "Curr timestamp = " 
        << clock.YYYY_MM_DD_H_M_S() << endl;
   cout << "Elapsed secs = " << clock.secs_elapsed_since_reference_date()  
        << endl;

   int UTM_zone=19;	// Boston, MA
   clock.compute_UTM_zone_time_offset(UTM_zone);

// TOC database conventions:

   int fieldtest_ID=27;	// Lily Droid around Fort Devens on 8/22
   int mission_ID=38;	// Local time = 11:23 am
   int platform_ID=1;	// Car
   int sensor_ID=12;	// Droid

   string subdir="/data/tech_challenge_local/field_tests/Lilydroid_Aug22/";
   subdir += "20100822_112352-851--0400/";

   vector<string> image_suffixes,text_suffixes;
   image_suffixes.push_back("jpg");
   text_suffixes.push_back("txt");
   
   vector<string> image_filenames=
      filefunc::files_in_subdir_matching_specified_suffixes(
         image_suffixes,subdir);

   for (int i=0; i<image_filenames.size(); i++)
   {
      double image_time=
         photodbfunc::extract_droid_image_time_from_metadata_file(
         image_filenames[i],clock);
      cout << image_time << endl;

// Add image counter to end of droid image filenames:

      string curr_image_filename=image_filenames[i];
      string prefix=stringfunc::prefix(curr_image_filename);
      string suffix=stringfunc::suffix(curr_image_filename);
      prefix += "_"+stringfunc::number_to_string(i);
      curr_image_filename=prefix+"."+suffix;
      cout << "new image filename = " << curr_image_filename << endl;
      
   } // loop over index i labeling candidate image & text filenames
 
}



