// ========================================================================
// Program PARSE_MIDG is a specialized utility for parsing text
// output generated by the windows application INSPARSE.EXE.  When we
// run this latter program via the WINE emulator, it converts
// binary MIDGE output to human-readable text.  PARSE_MIDG then converts the 
// the text file into SQL statements which insert MIDG metadata into
// the track_points table of the TOC database.

//				parse_midg

// ========================================================================
// Last updated on 7/31/10; 8/3/10; 8/8/10; 8/11/10
// ========================================================================

#include <iostream>
#include <vector>
#include "astro_geo/Clock.h"
#include "general/filefuncs.h"
#include "track/mover_funcs.h"
#include "general/sysfuncs.h"
#include "track/tracks_group.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

   string subdir="./midg/";
   string insparse_output_filename=subdir+"insparse_output.txt";

   int fieldtest_ID=21;	// Lucas & Erin bike ride around Wood St
   int mission_ID=28;	// Approx 3:45 pm on Tues Aug 10
   int platform_ID=2;	// Peter's bike
   int sensor_ID=5;	// MIDG

//   int fieldtest_ID=21;	// Lucas & Erin bike ride on Minuteman trail 
//   int mission_ID=27;	// Approx 2:40 pm on Mon 8/9
//   int platform_ID=2;	// Peter's bike
//   int sensor_ID=5;	// MIDG

/*
   int fieldtest_ID=2;	// Bike ride around LL hill on Tues 7/27 around 4 pm
   int mission_ID=3;	// 
   int platform_ID=3;	// "Grounded" yellow helicopter
   int sensor_ID=3;	// D7
*/

   Clock clock;
   int UTM_zone=19;	// Boston, MA
   clock.compute_UTM_zone_time_offset(UTM_zone);
   cout << "UTM_zone time offset = " << clock.get_UTM_zone_time_offset()
        << endl;

   tracks_group MIDG_tracks_group;
   track* MIDG_track_ptr=MIDG_tracks_group.generate_new_track();

   mover_func::parse_insparse_output(
      insparse_output_filename,clock,MIDG_track_ptr);

// Write out SQL insertion commands so that MIDG track metadata can be
// stored within the track_points table of the TOC database:

   string SQL_track_points_filename="insert_MIDG_track_points.sql";
   MIDG_track_ptr->write_SQL_insert_track_commands(
      fieldtest_ID,mission_ID,platform_ID,sensor_ID,SQL_track_points_filename);
}


