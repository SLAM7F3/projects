// ========================================================================
// Program INSERT_GPS parses the GPS track file generated by a program
// GPS_DEVICE.  It extracts instantaneous time stamp, longitude, 
// latitude and altitude values.  After alpha-filtering the raw
// geocoordinates, this program generates a SQL script which can be used
// to insert the GPS metadata into the track_points table of the 
// expt_metadata postgis database.

//				insert_gps

// ========================================================================
// Last updated on 7/26/10; 7/27/10; 7/29/10; 8/4/10
// ========================================================================

#include <iostream>
#include "astro_geo/Clock.h"
#include "math/constant_vectors.h"
#include "general/filefuncs.h"
#include "filter/filterfuncs.h"
#include "math/mathfuncs.h"
#include "track/mover_funcs.h"
#include "math/statevector.h"
#include "general/sysfuncs.h"
#include "general/stringfuncs.h"
#include "track/tracks_group.h"

// ==========================================================================
int main( int argc, char** argv )
{
   using std::cin;
   using std::cout;
   using std::endl;
   using std::flush;
   using std::ofstream;
   using std::string;
   using std::vector;
   std::set_new_handler(sysfunc::out_of_memory);

// New TOC database conventions:

//   int fieldtest_ID=1;	// Drive from Westford to LL on 7/19 around 8:30 am
//   int mission_ID=1;	
//   int platform_ID=1;	// Camry
//   int sensor_ID=1;	// Microsoft webcam

   int fieldtest_ID=2;	// Bike ride around LL hill on Tues 7/27 around 4 pm
   int mission_ID=2;	// 
   int platform_ID=2;	// Peter's bike
   int sensor_ID=2;	// Brian's webcam

   string subdir="/data/tech_challenge/GPS_tracks/";
//   string subdir=
//      "/data/tech_challenge/field_tests/LL_Bike_July15/GPS_tracks/";
//   string logfilename="gps_track_2010-07-18_15:51:58.00.dat";
//   string logfilename="gps_track_2010-07-16_2:41:0.00.dat";
//   string logfilename="gps_track_2010-07-19_8:31:9.00.dat";
//   string logfilename="gps_track_2010-07-26_16_25_37.00.dat";
//   string logfilename="gps_track_2010-07-27_8:07:57.00.dat";
   string logfilename=subdir+"gps_track_2010-07-27_15:54:10.00.dat";

// ========================================================================

   Clock clock;

   int UTM_zone=19;	// Boston, MA
   clock.compute_UTM_zone_time_offset(UTM_zone);
   cout << "UTM_zone time offset = " << clock.get_UTM_zone_time_offset()
        << endl;

   tracks_group gps_tracks_group;
   track* gps_track_ptr=gps_tracks_group.generate_new_track();

// Open log file generated by GPSDEVICE program:

   mover_func::parse_GPS_logfile(logfilename,clock,gps_track_ptr);

// Write out SQL insertion commands so that GPS track can be stored
// within track_points table of expt_metadata database:

   string SQL_track_points_filename="insert_gps_track_points.sql";
   gps_track_ptr->write_SQL_insert_track_commands(
      fieldtest_ID,mission_ID,platform_ID,sensor_ID,SQL_track_points_filename);
}



