// ====================================================================
// Program XML2TXT imports some XML file containing face and hand
// annotations generated by Davis King's IMGLAB tool.  It extracts
// bounding box metadata from Davis' objects.  It also assigns default
// unknown attribute values to gender and age_group attribute keys for
// all face bounding boxes.  XML2TXT exports a text file containing
// all these metadata which can later be imported by our own image
// labeling and classification tools.
// ====================================================================
// Last updated on 7/5/16; 7/6/16
// ====================================================================

#include <fstream>
#include <iostream>
#include <map>
#include <string>
#include <vector>

#include <dlib/image_processing.h>
#include <dlib/data_io.h>

#include "general/filefuncs.h"
#include "math/mathfuncs.h"
#include "general/outputfuncs.h"
#include "math/prob_distribution.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "video/texture_rectangle.h"
#include "video/videofuncs.h"
#include "time/timefuncs.h"

using std::cin;
using std::cout;
using std::endl;
using std::exception;
using std::flush;
using std::ifstream;
using std::ios;
using std::map;
using std::ofstream;
using std::pair;
using std::string;
using std::vector;

int main(int argc, char** argv)
{  
   timefunc::initialize_timeofday_clock(); 

   bool ignore_hands_flag = true;

   string faces_rootdir = "/data/TrainingImagery/faces/";
   string labeled_faces_subdir = faces_rootdir + "images/";
   string imglab_xml_filename=labeled_faces_subdir+
      "all_labeled_face_hand_images.xml";
   
   dlib::image_dataset_metadata::dataset input_data;
   dlib::image_dataset_metadata::load_image_dataset_metadata(
      input_data, imglab_xml_filename);

   int n_images = input_data.images.size();
   cout << "Number of input images = " << n_images << endl;

// Export face and hand bounding boxes to output text file:

   string output_filename=labeled_faces_subdir+"labeled_bboxes.txt";
   ofstream outstream;
   cout << "output_filename = " << output_filename << endl;
   filefunc::openfile(output_filename, outstream);
   outstream << "# " << timefunc::getcurrdate() << endl;
   outstream << "# Image: index  ID_str " << endl;
   outstream << "# Bbox_ID  label  xmin  xmax  ymin ymax (attr_key attr_val)"
             << endl << endl;

   int bbox_ID = 0;
   int n_face_bboxes = 0;
   int n_hand_bboxes = 0;

   int istart = 0;
   int istop = n_images;
   for(int i = istart; i < istop; i++)
   {
      string image_filename=input_data.images[i].filename;
      string image_basename=filefunc::getbasename(image_filename);
      string image_ID_str = image_basename.substr(6,5);

      vector<dlib::image_dataset_metadata::box> boxes = 
         input_data.images[i].boxes;

      outstream << "Image: index = " << i 
                << " ID_str = " << image_ID_str << endl;

      for(unsigned int b = 0; b < boxes.size(); b++)
      {
         dlib::image_dataset_metadata::box curr_box = boxes[b];

         if(curr_box.label == "face")
         {
            n_face_bboxes++;
         }
         else if(curr_box.label == "hand")
         {
            n_hand_bboxes++;
            if (ignore_hands_flag) continue;
         }
         
         dlib::rectangle curr_rect = curr_box.rect;
         int px_min = curr_rect.left();
         int px_max = curr_rect.right();
         int py_min = curr_rect.top();
         int py_max = curr_rect.bottom();
         bounding_box curr_bbox(px_min, px_max, py_min, py_max);

         outstream << bbox_ID++ << "  "
                   << curr_box.label << "   "
                   << curr_bbox.get_xmin() << "  "
                   << curr_bbox.get_xmax() << "  "
                   << curr_bbox.get_ymin() << "  "
                   << curr_bbox.get_ymax() << "  ";

// Assign unknown gender attribute to all face bounding boxes as
// default:

         if(curr_box.label == "face")
         {
            string attr_key, attr_value;
            curr_bbox.get_attributes_map()["gender"] = "unknown";
            curr_bbox.get_attributes_map()["age_grp"] = "unknown";
            for(curr_bbox.get_attributes_map_iter() = 
                   curr_bbox.get_attributes_map().begin(); 
                curr_bbox.get_attributes_map_iter() != 
                   curr_bbox.get_attributes_map().end();
                curr_bbox.get_attributes_map_iter()++)
            {
               attr_key = curr_bbox.get_attributes_map_iter()->first;
               attr_value = curr_bbox.get_attributes_map_iter()->second;

               outstream << attr_key << "  "  << attr_value << "  ";
            }
         } // curr_box.label == face conditional

         outstream << endl;
      }

   } // loop over index i labeling all input images
   
   cout << "n_face_bboxes = " << n_face_bboxes << endl;
   cout << "n_hand_bboxes = " << n_hand_bboxes << endl;
   cout << "Exported bbox metadata to = " << output_filename << endl;
}

