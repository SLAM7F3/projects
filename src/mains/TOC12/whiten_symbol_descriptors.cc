// ==========================================================================
// WHITEN_SYMBOL_DESCRIPTORS imports color RGB 64x3 [greyscale 64x1]
// descriptors for 8x8 pixel patches selected from character jpeg
// images generated by program SYMBOL_DESCRIPTORS.  It also imports
// the descriptors' mean and inverse square root covariance matrix
// which were previously output by SYMBOL_DESCRIPTORS.  The mean is
// subtracted from each raw descriptor, and the residual is multiplied
// by the inverse square root covariance matrix in order to whiten
// it. Whitened patch descriptors are exported to a single HDF5 binary
// file.

//			    whiten_symbol_descriptors

// ==========================================================================
// Last updated on 9/29/12; 10/5/12; 10/20/12; 6/7/14
// ==========================================================================

#include <iostream>
#include <string>
#include <vector>
#include <flann/flann.hpp>
#include <flann/io/hdf5.h>

#include "general/filefuncs.h"
#include "math/genmatrix.h"
#include "math/genvector.h"
#include "general/outputfuncs.h"
#include "general/stringfuncs.h"
#include "general/sysfuncs.h"
#include "classification/text_detector.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;
using std::string;
using std::vector;

// ==========================================================================
int main(int argc, char *argv[])
// ==========================================================================
{
   std::set_new_handler(sysfunc::out_of_memory);

   vector<string> symbol_names;
   symbol_names.push_back("yellow_radiation");
   symbol_names.push_back("orange_biohazard");
   symbol_names.push_back("blue_radiation");
   symbol_names.push_back("blue_water");
   symbol_names.push_back("blue_gas");
   symbol_names.push_back("red_stop");
   symbol_names.push_back("green_start");
   symbol_names.push_back("bw_skull");
   symbol_names.push_back("bw_eat");

   string final_signs_subdir="./images/final_signs/";
//   string ppt_signs_subdir="./images/ppt_signs/";
   string symbols_input_subdir=final_signs_subdir;

   string symbol_name;
   cout << "Enter symbol name:" << endl;
   cout << "  yellow_radiation,orange_biohazard,blue_radiation" << endl;
   cout << "  blue_water,blue_gas,red_stop" << endl;
   cout << "  green_start,bw_skull,bw_eat:" << endl;
   cin >> symbol_name;

   bool RGB_pixels_flag=false;
//   bool RGB_pixels_flag=true;
   cout << "RGB_pixels_flag = " << RGB_pixels_flag << endl;

   int D=64*3;	// RGB color
   if (!RGB_pixels_flag)
   {
      D=64;	// greyscale
   }

   string symbol_filename=symbols_input_subdir+symbol_name+".png";
   string synthetic_subdir=symbols_input_subdir+"synthetic_symbols/";
   string synthetic_symbols_subdir=synthetic_subdir+symbol_name+"/";
   string dictionary_subdir=synthetic_symbols_subdir;

   text_detector* text_detector_ptr=new text_detector(dictionary_subdir, RGB_pixels_flag);
   text_detector_ptr->import_inverse_sqrt_covar_matrix();

// Import patch descriptors for all character jpeg images:

   flann::Matrix<float> patch_descriptors;
   string patches_hdf5_filename=dictionary_subdir+"raw_patch_features.hdf5";
   flann::load_from_file(
      patch_descriptors,patches_hdf5_filename.c_str(),"patch_descriptors");

// Whiten all patch descriptors by multiplying with
// *inverse_covar_sqrt_matrix_ptr:

   int N=patch_descriptors.rows;
   cout << "N = " << N << endl;

   for (int n=0; n<N; n++)
   {
      if (n%1000==0) cout << n << " " << flush;
      float* pd_ptr=patch_descriptors.ptr()+n*D;
      float* whitened_row=text_detector_ptr->whiten_patch(pd_ptr);

      for (int d=0; d<D; d++)
      {
         patch_descriptors[n][d]=whitened_row[d];
      } // loop over index d
   } // loop over index n labeling rows in patch_descriptors array
   cout << endl;

   cout << "Saving patch descriptors" << endl;
   string whitened_hdf5_filename=dictionary_subdir+
      "whitened_patch_features.hdf5";
   filefunc::deletefile(whitened_hdf5_filename);
   flann::save_to_file(
      patch_descriptors,whitened_hdf5_filename,"patch_descriptors");

   string banner="Wrote N = "+stringfunc::number_to_string(N)
      +" whitened patch descriptors to "+whitened_hdf5_filename;
   outputfunc::write_big_banner(banner);

   delete text_detector_ptr;
}

   
