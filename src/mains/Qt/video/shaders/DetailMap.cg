float clampedLinearDistance( float dist,
							float sigma )
{
	float slope = -0.5 / sigma;
	return saturate( slope * dist + 1 );
}

float clampedLogLinearDistance( float dist,
							   float sigma )
{
	if( dist < 2.719 )
	{
		return 1;
	}
	else
	{
		float logDistance = log( dist );
		float slope = -0.5 / sigma;
		return saturate( slope * logDistance + 1 );
	}
}

float gaussianDistance( float dist,
					   float sigma )
{	
	float distanceSquared = dist * dist;
	return exp( -distanceSquared / twoSigmaSquared );
}	

float cosineDistance( float dist, float sigma, float cutoff )
{
	if( dist < sigma )
	{
		return 1;
	}
	else if( dist < cutoff )
	{
		float w = ( 3.141592653589793 / 2 ) / ( cutoff - sigma );
		return cos( w * ( dist - sigma ) );
	}
	else
	{
		return 0;
	}
}

// TODO: clean this up sometime!
void makeDetailMap( uniform float2 mouseXY,
				   uniform float2 sigmaRadius,
				   
				   float2 xyIn : WPOS,
				   
				   out float colorOut : COLOR )
{
	float dist = distance( floor( xyIn ), mouseXY );
	
	if( dist < sigmaRadius.x )
	{
		colorOut = 0;
	}
	else if( dist < sigmaRadius.y )
	{
		colorOut = ( dist - sigmaRadius.x ) / ( sigmaRadius.y - sigmaRadius.x );
	}
	else
	{
		colorOut = 1;
	}
}
