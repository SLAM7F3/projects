============================================================================
BEAST code changes made on Weds, Jan 8, 2014:

*.  Updated README.imagesearch and README.VSFM.

................

*.  

============================================================================
BEAST code changes made on Tues, Jan 6, 2014:

*.  Image search pipeline is starting to work on 64-core KERMIE machine.

============================================================================
BEAST code changes made on Mon, Dec 30, 2013:

*.  Tried to streamline and simplify puma processing pipeline.

============================================================================
BEAST code changes made on Mon, Dec 23, 2013:

*.  Fixed some main program bugs s.t. more compile when we perform a
build_all.

============================================================================
BEAST code changes made on Thurs, Dec 19, 2013:

*.  Member function camera::construct_projection_matrix() now returns bool
value indicating goodness of projection matrix.

============================================================================
BEAST code changes made on Weds, Dec 18, 2013:

*.  In EarthRegionsGroup::generate_SurfaceTexture_EarthRegion(), restored
EarthRegion_ptr->set_TextureSector_ptr(TextureSector_ptr) after call to
generate_new_EarthRegion().  Bluegrass demo then runs OK on ROBOT laptop.

============================================================================
BEAST code changes made on Fri, Dec 6, 2013:

*.  Trying to fix time syncing between puma video frames and puma GPS
metadata.  

============================================================================
BEAST code changes made on Thurs, Dec 5, 2013:

*.  Eliminated unused i,j args to homography::export_matrix().

*.  mains/puma/ORTHORECTIFY imports camera parameters for reconstructed and
georegistered aerial video frames.  It also works with a world z-plane
whose altitude is input by the user.  ORTHORECTIFY reprojects each aerial
image onto the ground plane and outputs an orthorectified image.

*.  mains/puma/MOSAIC imports a set of orthorectified aerial images.  It
sorts them based upon their ground footprint size.  MOSAIC then simply
overlays each footprint onto a composite.  The last overlayed image is the
one with the largest footprint.

============================================================================
BEAST code changes made on Weds, Dec 4, 2013:

*.  Added mains/puma/puma_pass_scripts.cc, video_propagator.cc and
write_viewbundler_script.cc

*.  mains/puma/earthbundler is starting to yield decent backprojection and
stabilization results for Puma video!


============================================================================
BEAST code changes made on Tues, Dec 3, 2013:

*.  filefunc::getbasename(string filename,string slash_char) can now handle
windows and linux paths.

*.  mains/puma/VSFM_VS_ORIG_IMAGES imports VSFM text file "cameras_v2.txt".
It exports relationships between original and renamed VSFM image filenames
to a text file in bundler_IO_subdir.

*.  In bundlerfunc::RANSAC_fit_rotation_translation_scale(), fixed bug
where we previously did NOT compute best value for trans_Horn.  

*.  Nontrivially refactored and cleaned up messy
mains/photosynth/MINI_CONVERT program.  Also perform an initial
determination of reconstructed X,Y,Z median and quartile width values.
Then skip any reconstructed point which lies ridiculously far away from
these median values.

*.  Starting to visualize and georegister VSFM reconstructions for Puma
flights over Camp Edwards.

.................

*.  mains/puma/GPS_WAYPOINTS imports Puma geoposition information as well
as relationships between originally named and VSFM renamed image
filenames.  It exports a GPS waypoints to bundler_IO_subdir in a
format which can be ingested by program GPSFIT.

============================================================================
BEAST code changes made on Mon, Dec 2, 2013:

*.  Updated config/common_all.pro

.................

*.  Updated README.mapserver with notes on how to get mapserver to work
under ubuntu12.4/postgis2/mapserver 6.

============================================================================
BEAST code changes made on Weds, Nov 27, 2013:

*.  mains/JAV/HOG_object_detector is now starting to export bbox info to
output text files.

.............

*. mains/JAV/HOG_OBJECT_DETECTOR is a minor variant of Davis King's HOG
template-based object detector.  When run in "training" mode, it imports an
XML file generated by Davis' IMGLAB program that contains bounding boxes
around objects (e.g. human faces) for some number of trained images.  This
program exports a fitted HOG template.  When run in "testing" mode, it
imports the fitted HOG template and searches for matching objects in some
corpus of unlabeled images.

*.  mains/JAV/RESIZE_FACE_IMAGES imports a set of raw images from some
specified subdirectory.  It first downsizes all images so that they do not
exceed some reasonable pixel width and height.  RESIZE_FACE_IMAGES then
upsamples the homogenized images so that relatively small faces have some
possibility for being detected via Davis King's HOG detector.

......................

*.  videofunc::display_bboxes() takes in an STL vector of (Ulo,Uhi,Vlo,Vhi)
params.  It also takes in a texture rectangle which is assumed to have a
clean copy of the image from which the bboxes were derived.  This method
colors bbox edges.

*.  mains/JAV/DRAW_OBJ_BBOXES imports a bounding box parameters for a set
of images.  It draws purple rectangles on copies of the input images and
exports the annotated results to a new subdirectory.


============================================================================
BEAST code changes made on Tues, Nov 26, 2013:

*.  Added mains/JAV/HOG_templates to repository containing Davis' face
detector.

*.  Added mains/JAV/HOG_object_detector.cc to repository.

============================================================================
BEAST code changes made on Mon, Nov 25, 2013:

*.  Added few more notes about ubuntu setup to README.ubuntu

*.  camera::get_R_noah_to_peter_ptr(bool VSFM_flag) now takes input
VSFM_flag with default false value.

*.  PhotoServer::display_video_keyframes() assigns qualitatively-different
hues to successive keyframes.  It also chooses saturations and values which
don't yield keyframe node colorings that are too washed out or dark.

*.  PhotoServer::display_video_keyframes() assigns varying RGB colors to
distinct video keyframe IDs.  It then generates and exports a
keyframe_colorings JSON file which follows the SET_DISCRETE_COLOR_MAPPER
syntax specified by Michael Yee in November 2013.  An ActiveMQ message
containing the tomcat URL for the JSON file is broadcast.  The graph viewer
subsequently imports the JSON information and recolors all nodes in the
image graph to illustrate keyframe "temporal segments" in the sinusoidal
video clip display.

============================================================================
BEAST code changes made on Fri, Nov 22, 2013:

*.  Added new directory src/davis which contains slightly modified version
of dlib's source.cpp .  With this modification, we can now work with
dlib18.5.

============================================================================
BEAST code changes made on Thurs, Nov 21, 2013:

*.  Commented out deprecated mathfunc::fit_2D_affine_transformation() in
favor of geometry/affine_transform class.

*.  Added README.davis_HOG to READMEs subdir.

============================================================================
BEAST code changes made on Tues, Nov 19, 2013:

*.  imagefunc::valid_image_file() now resolves symbolic links to image
filenames.

*.  mains/JAV/TIEPOINT_FLOW now draws line segments which illustrate SURF
tiepoint flows between consecutive video frames.

============================================================================
BEAST code changes made on Tues, Nov 5, 2013:

*.  Resurrected sift_detector::extract_SURF_features() which now calls SURF
extraction methods from DLIB rather than OpenCV.

*.  Added magnitude() method to descriptor class.

*.  SURF feature matching may perform significantly better than SIFT
matching for video frames which are nearby in time!

============================================================================
BEAST code changes made on Mon, Nov 4, 2013:

*.  Fixed some problems with SET_DISCRETE_COLOR_MAPPER call.  But arbitrary
node coloring is still not working with Michael Yee's graph viewer.

*.  mains/JAV/TIEPOINT_FLOW is a playground for identifying sharp temporal
discontinuities, camera movements and stable segments within video clips.
It imports SIFT tiepoints calculated between pairs of adjacent video
frames.  If very few tiepoint exist, a temporal discontinuity is declared.
If nontrivial flow among all tiepoints between two frames is detected,
camera movement is declared.  Otherwise, a video frame is declared stable.

============================================================================
BEAST code changes made on Fri, Nov 1, 2013:

*.  Starting to experiment with refining face detection over temporally
correlated video segments.

============================================================================
BEAST code changes made on Thurs, Oct 31, 2013:

*.  imagesdatabasefunc::add_node_attributes_to_json_string() takes in
multiple attributes_metadata_maps along with a current node ID and json
string.  Attribute information for the current node existing within the
metadata maps is extracted and added to the json string.

*.  videosdatabasefunc::retrieve_all_video_keyframes() instantiates and
fills an ATTRIBUTES_METADATA_MAP with node IDs corresponding to video
keyframe image IDs.

...............


*.  Starting to light up keyframes within multi-clip timeline display.

============================================================================
BEAST code changes made on Weds, Oct 30, 2013:

*.  Created new videosdatabasefuncs namespace.

*.  Moved mains/imagesearch/README.videosearch into mains/JAV/

*.  In mains/JAV/LINK_VIDEO_FILENAMES, if text transcripts for the videos'
sound tracks exist within the same subdirectories as the raw media files,
LINK_VIDEO_FILENAMES generates an executable script which links the text
files to homogenized output filenames.

*.  mains/JAV/LOAD_VIDEO_METADATA queries the user to enter campaign and
mission IDs for a set of video clips to be loaded into the videos table of
the IMAGERY database.  For each video frame, it retrieves the image ID and
URL from the images table.  It also extracts the clip and frame ID from the
image's filename.  If an audio transcript and/or mp4 file exists within the
same subdirectory of /data/ImageEngine/ as the jpg images, their URLs are
recovered as well.  For each video frame from multiple clips, these
metadata are stored within the videos table.

============================================================================
BEAST code changes made on Tues, Oct 29, 2013:

*.  mains/JAV/DISPLAY_AUDIO_TRACK is a playground for adding an audio
track's transcript to a video timeline "sine-wave" display within Michael
Yee's graph viewer.

*.  In mains/JAV/LINK_VIDEO_FILENAMES, we discovered the painful way that
video_filenames is generally NOT sorted alphabetically (or by date).  So we
explicitly sort the strings within STL vector video_filenames:

*.  mains/imagesearch/DUMMY_VIDEOS_EDGELIST queries the user for campaign
and mission IDs corresponding to some set of video clips.  It generates a
dummy edgelist for this imagery set where each video frame within a clip is
connected to its nearest temporal neighbors.  Frames between video clips
are disconnected.  So the number of disconnected components within the
image graph equals the number of distinct video clips.

*.  Experimenting with displaying audio text transcript alongside video
clip frames in mains/imagesearch/VIDEOS_TEMPORAL_LAYOUT

============================================================================
BEAST code changes made on Mon, Oct 28, 2013:

*.  Added mains/puma to Makefile.

*.  filefunc::ReadInStrings() takes in the name for some text file.  It
fills and returns an STL vector of strings containing the contents of the
input text file.

============================================================================
BEAST code changes made on Fri, Oct 25, 2013:

*.  mains/gist/VIDEO_KEYFRAMES imports color, texture and LBP image
matching scores for some set of video frame pairs.  It declares the very
first video frame to be a "keyframe".  The program then requires all
subsequent keyframes to be nontrivially different in terms of their color,
texture and LBP contents relative to all preceding keyframes.
VIDEO_KEYFRAMES creates soft links to video frames declared to be key
within a keyframes/ subdirectory of the root video directory.

*.  Moved VIDEO_KEYFRAMES from gist/ to JAV/ subdirs.

============================================================================
BEAST code changes made on Thurs, Oct 24, 2013:

*.  stringfunc::decompose_string_into_substrings() simply calls dlib's
split method.  As of 10/24/13, we strongly suspect this is the best string
tokenizer code available from the web.

................

*.  Made a few structural changes to mains/gist/svm_global_descrips.cc
following conversation with Davis King about dlib's vector_normalizer vs
vector_normalizer_pca objects.

*. Generalized compare_color[gist,texture,LBP]_histograms.cc to work with
just temporally sequential video frames.

................

*. Generalized compare_ellipse_histograms.cc to work with
just temporally sequential video frames.

============================================================================
BEAST code changes made on Weds, Oct 23, 2013:

*.  More refining of text parsing.

.................

*.  test_image_comparisons starting to work for NewsWrap w_transcript video
clips.

.................

*.  triangles_group::generate_new_triangle() now explicitly checks whether
all triangle vertex IDs are unique.  If not, this method now returns NULL.

*.  New tokenization within stringfunc::decompose_string_into_substrings()
DESTRUCTIVELY ALTERS input string!

============================================================================
BEAST code changes made on Tues Oct 22, 2013:

*.  Boolean member function vertices_handler::vertex_in_table() returns
false if no vertex corresponding to the specified input ID actually exists
within member STL vector vertex_table:

*.  Added new vertices_handler::get_vertex_ptr(int Vertex_ID) method which
returns NULL if vertex corresponding to specified ID doesn't exist.

*.  mains/gist/COMPARE_ELLIPSE_HISTOGRAMS now automatically generates
area/, numberdensity/ and separation/ subdirectories of
ellipses/metafiles/.

............

*.  filefunc::ReadInNumbers() imports numbers from text files using >>
operator and no longer converts strings to numbers.

............

*.  Updated mains/gist/test_image_comparisons.cc

============================================================================
BEAST code changes made on Mon, Oct 21, 2013:

*.  Starting to process w_transcript NewsHour video clips.

............

*.  mains/JAV/PLOT_AFFINE_ELLIPSES imports a set of JPG files from a
specified subdirectory.  Looping over each image, this program extracts
interest points via the Affine Covariant Region Detector linux binary (see
http://www.robots.ox.ac.uk/~vgg/research/affine/detectors.html).
Parameters associated with the elliptical affine covariant regions are
written to an output text file.  Ellipses corresponding to each affine
region are also superposed on the input image and exported to
ellipses_subdir.

============================================================================
BEAST code changes made on Fri, Oct 18, 2013:

*.  Added delete_triangle_poly_ptr() to triangle class.

============================================================================
BEAST code changes made on Tues, Oct 15, 2013:

*.  mains/gist/PLOT_LABELED_POINTS imports 3-feature vectors for pairs of
manually labeled matching and nonmatching image pairs.  It generates and
exports .osga files which visualize these labeled feature vectors as green
and red points in 3D space.  PLOT_LABELED_POINTS also exports probability
density distributions for color, GIST and texture feature values for both
matching and nonmatching image pair samples.

============================================================================
BEAST code changes made on Fri, Oct 11, 2013:

*.  Eliminated dependence of train[test]_image_comparisons.cc upon
threevector/fourvector in favor of genvector*.

..................

*.  mains/gist/GENERATE_MATCH_SCORES imports relatively small numbers of
pairs of matching image filenames generated via program
TRAIN_IMAGE_COMPARISONS.  It first instantiates an STL map to hold
quadruples formed from the image pairs' clip and frame IDs.
GENERATE_MATCH_SCORES next imports scores indicating overlap within color,
GIST, texture, etc channels for large numbers of image pairs.  Dependent
score vectors are filled for independent image pair quadruples within the
STL map.

Iterating over all entries in the STL map, GENERATE_MATCH_SCORES exports
matching_images.dat and nonmatching_images.dat text files which list
n-tuples of feature matching scores for matching and nonmatching image
categories.  These text files become input for program SVM_GLOBAL_DESCRIPS.

============================================================================
BEAST code changes made on Weds, Oct 9, 2013:

*.  mains/gist/text_image_comparisons.cc now exports color, gist, and
texture scores along with matching probability as funcs of first and second
clip/frame IDs to output text file.

..................

*.  Trying to incoporate 4th Local binary pattern feature into training and
testing for global image matching.


============================================================================
BEAST code changes made on Tues, Oct 8, 2013:

*.  mains/gist/compute_color_histogram.cc now can compute histogram for
multiple regions of interest.

............

*.  Tweaked mains/gist/near_duplicates.cc to work with color histograms
calculated over multiple regions of interest.

============================================================================
BEAST code changes made on Mon, Oct 7, 2013:

*.  Starting to experiment with local binary pattern descriptors for
images.

============================================================================
BEAST code changes made on Fri, Oct 4, 2013:

*.  Starting to test binary classification of merged color, GIST and
texture global image descriptors.

============================================================================
BEAST code changes made on Thurs, Oct 3, 2013:

*.  Starting to compare color, GIST and texture histograms using Davis
King's rank SVM approach.

============================================================================
BEAST code changes made on Weds, Oct 2, 2013:

*.  mains/JAV/LINK_VIDEO_FILENAMES imports a set of mp4 filenames from a
specified subdirectory.  It wraps the video filenames in double quotes in
order to shield subsequent link commands from any white spaces.
LINK_VIDEO_FILENAMES generates an executable script which links the input
mp4 files to homogenized output filenames.

*.  mains/JAV/RIP_VIDEO_FRAMES imports a set of homogenized mp4 filenames
generated via program LINK_VIDEO_FRAMES.  For each mp4 clip, it executes an
ffmpeg command which rips frames at 1 Hz.

*.  Renamed mains/gist/histcompare.cc as compare_texture_histograms.cc

...................

*.  mains/JAV/COMPARE_COLOR_HISTOGRAMS imports a set of color histograms
generated by program COMPUTE_COLOR_HISTOGRAMS.  Looping over all imported
histograms, it calculates dotproducts between successive pairs.  The
dotproducts are sorted in descending order.  Dotproducts exceeding a
specified threshold value are exported to an output text file with the
corresponding pair's image filenames.

============================================================================
BEAST code changes made on Tues, Oct 1, 2013:

*.  mains/geo/RELATIVE_POSE imports two aerial video frames which we label
as "current" and "next".  It works with the camera metadata for the two
input frames except their orientation angles.  Instead, we assume both
frames were shot at a constant depression angle (which is hardwired below)
and with zero roll angle.  The relative azimuthal angle between the two
video frames' cameras is guestimated based upon their average altitude.
Working with just the first few frames from GEO pass 20120105_1402, we
empirically find that the guestimated relative az, el and roll angles
between the two frames are within a few degrees of the bundle adjusted
"true" values computed via our entire GEO reconstruction pipeline.

RELATIVE_POSE also attempts to improve upon the initial guestimated
relative camera orientation angles by brute force searching for values
which minimize a score function based upon ray intersection errors.  But
after many experiments, we could not find any set of input parameters for
the brute force search which yielded better results than the original
guestimated angles.  So as of 9/20/13, we suspect that feeding the
guestimates as starting points to bundle adjustment may be the best way to
operate when initial camera pointing metadata is unavailable.

...............

*.  Trying to implement two-pass approach to connected component labeling
as described in wiki page.

============================================================================
BEAST code changes made on Mon, Sep 30, 2013:

*.  Added Noah's 5point.cc and attendant .cc/.h files into src/bundler/ . 

..................

*.  libceres integrated into our code tree on BEAST.

============================================================================
BEAST code changes made on Fri, Sep 27, 2013:

*.  texture_rectangle::lexicographical_order() reduces an input (pu,pv)
pixel coordinate to a single integer.  The output integer obeys the
property (pu,pv) <= (qu,qv) iff pu < qu OR pu=qu AND pv <= qv.

============================================================================
BEAST code changes made on Thurs, Sep 26, 2013:

*.  mains/korea/VIEW_TEL imports a set of TEL contours generated via
program ALIGN_CONTOUR_VERTICES.  The TEL contours are represents via OSG
PolyLines.  TEL tires are instead represented via OSG Cylinders.  We
hardwire TEL tire locations relative to the TEL's front "star" symbol
within this program.

VIEW_TEL displays the 3D TEL model on an XY grid.  It also displays the two
internet ground photos as 3D frusta.  A user can doubleclick on the frusta
in order to compare the 3D TEL's model projection with the ground photos.

*.  mains/korea/ALIGN_CONTOUR_VERTICES imports a set of TEL vertices
generated via triangulating tiepoint pairs from 2 internet ground photos.
We initially work in a "TEL" coordinate system defined by n_hat, a_hat and
z_hat direction vectors.  a_hat points in the TEL's forward direction.
z_hat points upwards.  n_hat = a_hat x z_hat points away from the TEL along
its broadside direction.

In this program, we first hardwire sets of 3D TEL vertices which should
share n, a and/or z coordinates.  3D vertices n,a,z coordinates are
replaced by median values.  We also allow for manual tweaking of TEL
contours in the n,a,z coordinate system.  Corrected TEL 3D vertices are
exported to bundler_IO_subdir/corrected_rel_TEL_vertices.dat Corrected TEL
contours are also exported as polylines in XYZ world coordinates and
flipped about the a_hat - z_hat symmetry plane.

============================================================================
BEAST code changes made on Weds, Sep 25, 2013:

*.  Continuing to refine TEL model.  Trying to eliminate gross 3D
inconsistencies.

============================================================================
BEAST code changes made on Fri, Sep 20, 2013:

*.  Continuing to refine TEL model.

============================================================================
BEAST code changes made on Thurs, Sep 19, 2013:

*.  Starting to model TEL with some nontrivial fidelity.

============================================================================
BEAST code changes made on Weds, Sep 18, 2013:

*.  mains/plume/8BIT_TO_24BIT asks the user to specify the full path to
some subdirectory which sits atop a "tree" of directories filled with 8-bit
binary plume masks.  It searches the entire tree for all jpg files which
are assumed to correspond to 8-bit binary masks.  8BIT_to_24BIT overwrites
the 8-bit binary masks with their 24-bit analogs.  Note that the blue
channel is slightly randomized in order to force the output JPEG masks to
have 24 rather than 8 bits.

...............

*.  Added Noah's bundler/5point.h to repository.

*.  mains/korea/IMAGELINES imports a set of manually selected points along
lines which are parallel in world-space.  It exports the parallel segment
information in polyline format which can be visualized via program VIDEO.

*.  mains/korea/VANISHING_POINT imports polylines from text files generated
by program IMAGELINES.  These polylines are assumed to correspond to
parallel lines in 3D world-space.  It computes the 2D imageplane
intersection point of the parallel lines.  VANISHING_POINT then exports a
new set of polylines which replace the initial input set.  The vanishing
points may be visualized via program VIDEO.

*.  mains/korea/F_FROM_VANISHING_POINTS follows the discussion in example
8.28 "Determining the focal length when the other internal parameters are
known" in Hartley and Zisserman, 2nd edition (pg 228).  Given UV
coordinates for the vanishing points of two sets of orthogonal parallel 3D
world-lines, we can simply compute a single camera's focal parameter.

...............

*.  mains/structmotion/FIVEPOINT attempts to use Noah Snavely's
implementation of the 5-point algorithm in order to determine relative
position and pose between two cameras.


============================================================================
BEAST code changes made on Fri, Sep 6, 2013:

*.  Renamed gistfunc namespace as descriptorfunc.

*.  imagefunc::compute_sobel_gradients() takes in a twoDarray and
calculates first order x and y derivatives via convolution with a 2D Sobel
edge filter.  On 9/6/13, we empirically confirmed that the output
xderiv_twoDarray_ptr and yderiv_twoDarray_ptr results are qualitiatively
similar to those generated via member function compute_x_y_deriv_fields().

*.  Starting to implement texture descriptor generator.

============================================================================
BEAST code changes made on Thurs, Sep 5, 2013:

*.  Overloaded version of gistfunc::compute_linesegments_histogram() takes
n_frac_mag_bins and n_theta_bins as input parameters.  It generates and
returns a TWO dimensional histogram which bins line segments by their angle
and fractional distance but NOT by their center position within the image
plane.

*.  mains/gist/COMPUTE_SEGMENT_HISTOGRAMS loops over all images within some
set of subdirectories.  For each input image, it calls the LSD
algorithms/codes by von Gioi (Nov 2011) to extract a set of line segments.
COMPUTE_SEGMENT_HISTOGRAMS then computes a 2D histogram for the extracted
segments where the bins' independent variables segment angle and magnitude.
The calculated histograms are exported to output text files.

*.  mains/gist/EARTH_MOVER_DISTANCES imports a set of line segment
histograms generated via program COMPUTE_SEGMENT_HISTOGRAMS.  For each pair
of histograms, this program computes their "earth mover distance" which is
a measure of histogram similarity.  The earth mover distances are sorted
and exported to an output text file with the corresponding pair's image
filenames.


============================================================================
BEAST code changes made on Weds, Sep 4, 2013:

*. gistfunc::compute_linesegments_histogram() first extracts line segments
from the specified input image file via the LSD algorithm/codes by R.G. von
Gioi (Nov 2011).  Each line segment is assigned an angle theta ranging over
[0,180 degs], a fractional length with respect to the image's main
diagonal, and quantized sub-image position indices 0 <= i,j <= 3.  The
theta values are quantized into ten 18-degree bins, while the fractional
length values are quantized into 8 logarithmic bins.  This method returns a
4x4x8x10=1280 dimensional histogram which characterizes the input image's
line segment content.
   
*.  mains/JAV/DETECT_SEGMENTS calls the LSD algorithms/codes by von Gioi
(Nov 2011) to extract a set of line segments from an input image.  It then
places the resulting segments into angle, magnitude and gross image plane
location bins.

============================================================================
BEAST code changes made on Tues, Sep 3, 2013:

*.  Trying to implement edge histogram descriptor within gistfuncs
namespace.

============================================================================
BEAST code changes made on Thurs, Aug 29, 2013:

*.  mathfunc::import_genvector_from_dense_text_format() returns a
dynamically-instantiated genvector read in from a specified text
file.

============================================================================
BEAST code changes made on Weds, Aug 28, 2013:

*.  GEO demo works reasonably well on ~15 different GEO passes.  

============================================================================
BEAST code changes made on Fri, Aug 23, 2013:

*.  mains/imagevocab/image_relns now adds SIFT words whose importance lie
belows some minimal threshold to a stop-list.

============================================================================
BEAST code changes made on Thurs, Aug 22, 2013:

*.  filefunc::files_sorted_by_bytesize() takes in a subdirectory and
performs a Unix listing sorted according to file byte size.  This method
returns results sorted from smallest to largest file.

*.  mains/imagevocab/IDENTIFY_BAD_IMAGES imports text files containing SIFT
words for images generated by program SIFTWORDS_2_TEXT.  It counts the
number of distinct extracted SIFT words for each image.  If the number is
less than some user-specified threshold, the image contains little useful
content and is declared bad.  The basenames and SIFT word counts for bad
images are exported to an output text file.

*.  mains/dime/Wisp360CalAssistant_script now queries the user to enter the
name of the WISP calibration file to import from
/data/DIME/Condor_March2013/WispRDC_test/bin/

============================================================================
BEAST code changes made on Weds, Aug 21, 2013:

*.  mains/imagevocab/SIFTWORDS_2_TEXT imports Voronoi cell histograms
generated by program IMAGE_WORD_HISTOGRAMS for some number of input images.
Each SIFT word that has a nonzero frequency within an input image
"document" is converted into a 5-digit integer string (0-16383).  The
integer string is exported to an output text file with a frequency equaling
that in the Voronoi cell histogram.  The output file represents a "text
document" equivalent for an image.

============================================================================
BEAST code changes made on Tues, Aug 20, 2013:

*.  mains/image_vocab/IMAGE_RELNS imports Voronoi cell histograms generated
by program IMAGE_WORD_HISTOGRAMS for some number of input images.  It fills
a term-frequency matrix whose entries are renormalized to take into account
variable image "document" size.  Inverse document frequencies are next
computed to assess individual SIFT word importance. TF-IDF ratios are
formed and exported to text and binary file formats.

============================================================================
BEAST code changes made on Mon, Aug 19, 2013:

*.  mains/imagevocab/DESCRIPTORS_COVAR parses all compressed binary SIFT
descriptor files within a specified input subdirectory.  It sequentially
forms first and second moments from SIFT descriptors as they're
individually imported.  Once all SIFT descriptors have been processed,
their 128x128 covariance matrix is calculated.  The mean, covariance,
square root and inverse square root covariance matrices are written to text
and binary files within the sift keys subdirectory.

..................

*.  mains/imagevocab/CELL_FREQ imports SIFT descriptors from compressed
binary key files.  It also inputs the random projection hash function
generated by program RANDOMHASH.  Looping over some fraction of all input
keys, CELL_FREQ computes their corresponding Voronoi cell IDs.  It plots
the frequency histogram for the Voronoi cell IDs.

..................

*.  Starting to write up new mains/imagevocab/README.dictionary 

..................

*.  mains/imagevocab/IMAGE_WORD_HISTOGRAMS imports the random projection
hash function generated by program RANDOMHASH.  Looping over all images
which have SIFT key files, it imports SIFT feature descriptors for each
image.  IMAGE_WORD_HISTOGRAMS maps image SIFT features to word Voronoi
clusters.  It exports a text file for each image containing its Voronoi
cell histogram.

============================================================================
BEAST code changes made on Fri, Aug 16, 2013:

*.  In photograph::read_image_from_file(), set xdim and ydim from
image_refptr->s() and ->t().

============================================================================
BEAST code changes made on Thurs, Aug 15, 2013:

*.  Added SignPostsGroup_ptr member to FeaturesGroup class along with set
method.

*.  FeaturesGroup::compute_multi_line_intersection() calculates the 3D
point that lies closest to multiple 3D lines.  It instantiates a SignPost
which displays the 3D point's easting and northing geocoordinates.  This
method subsequently projects the 3D intersection point into all 2D video
frames.

============================================================================
BEAST code changes made on Tues, Aug 13, 2013:

*.  PhotoServer::generate_JSON_response_to_requested_camera_metadata()
retrieves camera intrinsic and extrinsic parameters from package
files/database and returns them within a JSON string for all sensors
corresponding to the requested hierarchy_ID.

....................

*.  imagesdatabasefunc::retrieve_sensor_metadata_from_database() takes in
campaign and mission IDs.  It retrieves all camera parameters for all
images corresponding to the input parameters.

============================================================================
BEAST code changes made on Mon, Aug 12, 2013:

*.  mains/imagesearch/COMPUTE_COLOR_HISTS loops over all images within an
images directory.  It exports their color histograms to text files within a
color_histograms subdirectory of the images directory.

*.  Fixed scene date entry within DIME main programs.

============================================================================
BEAST code changes made on Fri Aug 9, 2013:

*.  mains/korea/RECTIFY_GROUND_PHOTO is a playground for orthorectifying
photos based upon Google Earth UTM geocoords for observed street lines.  We
identify 2D lines in a ground photo with their counterparts in an overhead
Google Earth view.

We deduce a homography for the particular case of a Korean rocket internet
photo.  Though the derived homography looks valid, the orthorectified
internet image does not look especially useful.

................

*.  mains/gist/GISTCOMPARE now exports a text file containing pairs of
similar images whose difference magnitude is less than some user-specified
threshold.

============================================================================
BEAST code changes made on Thurs, Aug 8, 2013:

*.  Generalized mains/dime/Wisp360CalAssistant_script to handle 8 and 16
bit depth pano generation.

*.  Generalized DIME programs to query user for panorama collection date
(e.g. 05202013 or 05222013).

*.  geometry_func::homogeneous_line_coords() returns coeffs (a,b,c) for the
homogeneous line which passes through 2D points UV1 and UV2.

============================================================================
BEAST code changes made on Tues, Aug 6, 2013:

*.  mains/korea/CALIBRATE_CAMERA imports a set of 2D features that lie
along line segments within an open source ground photo.  It generates and
exports homogeneous coefficients for each image plane line.
CALIBRATE_CAMERA next works with pairs of 3D points that lie along the
corresponding world-space lines.  The relationships between the 2D line
segments and 3D points are stored within STL vectors.

CALIBRATE_CAMERA takes reasonable initial ranges for 7 camera calibration
parameters.  It minimizes the sum l^T P X where l = homogeneous 3-vector
for a line segment, P = 3x4 camera calibration matrix and X = homogeneous
4-vector for a world-space point.

Best-fit values for the 7 camera calibration parameters are reported by
this program.

................

*. In MoviesGroup::generate_new_Movie(), we now explicitly check if
get_pass_ptr()==NULL before attempting to set video corner UTM coords.

============================================================================
BEAST code changes made on Mon, Aug 5, 2013:

*.  Added easting_lo,easting_hi,northing_lo,northing_hi member variables to
TextureSector and PassInfo classes.

*.  mains/korea/MODEL_BLDGS reads in easting, northing, altitude
geocoordinates for "skyline" corners on Korean buildings in UTM zone 51.
It generates and exports simple polyhedra models for these buildings.

*.  mains/korea/ROCKET now displays plane indicating rocket's symmetry axis
as it travels down parade road.

============================================================================
BEAST code changes made on Fri, Aug 2, 2013:

*.  mains/imagesearch/QUANTIZE_IMAGE_COLORS queries the user to enter some
input image file.  It first computes and displays the color histogram for
the input image.  QUANTIZE_IMAGE_COLORS then exports the color-quantized
version of the image to a quantized_colors subdirectory.

*.  mains/gist/GISTCOMPARE computes the magnitude of the difference between
GIST descriptors for pairs of images.  It outputs a probability
distribution for the difference magnitudes.

============================================================================
BEAST code changes made on Thurs, Aug 1, 2013:

*.  In mains/imagesearch/UPDATE_PICTURE_TIMES, if an exif time precedes 1
Jan 1990, we also replace its value with that coming from an image file
time.

*.  Eliminated UPDATE_PHOTO_TIMES in favor of UPDATE_PICTURE_TIMES.

*.  mains/imagesearch/IMAGE_COLOR_GRAPH imports a set of thumbnails from a
specified subdirectory of /data/ImageEngine.  It computes quantized color
histograms for each input thumbnail.  IMAGE_COLOR_GRAPH subsequently
computes TF-IDF edge weights between all image nodes.  After discarding all
edges whose weights are less than some user-specified threshold, this
program exports an edge list which corresponds to the color graph for the
imagery corpus.

============================================================================
BEAST code changes made on Weds, July 31, 2013:

*.  Program UPDATE_PICTURE_TIMES queries the user to enter campaign and
mission IDs for some set of images already loaded into the images table of
the IMAGERY database.  We assume that the input images are *stills* and not
video frames nor Reuters news articles. UPDATE_PICTURE_TIMES retrieves the
UTM zonenumber corresponding to a set of images residing within
/data/ImageEngine/ from the world_regions table of the IMAGERY database.

UPDATE_PICTURE_TIMES tries to extract local image times from exif
metadata tags.  If unsuccessful, a time based upon the image file's
access, modification or change times is assigned to the photo.
UPDATE_PICTURE_TIMES subsequently converts local image times to UTC
and exports a SQL script which updates timing columns within the
images table of the IMAGERY database.

UPDATE_PICTURE_TIMES does NOT depend upon any SIFT graph
information.  So it can be run immediately after
LOAD_IMAGE_METADATA.

============================================================================
BEAST code changes made on Weds, July 24, 2013:

*. timefunc::secs_since_Y2K() returns number of seconds elapsed in current
timezone since 1 Jan 2000.  This code snippet comes from
http://www.cplusplus.com/reference/ctime/time/

................

*.  PhotoServer::display_graph_geometries() retrieves any graph polygons
stored within the graph_geometries table of the IMAGERY database.  If any
are found for the specified hierarchy_ID, this method displays them as
backdrops for the current graph.

*.  colorfunc::RRGGBBAA_hex_to_rgba() takes in hex string RRGGBBAA where
RR, GG, BB and AA range from 00 to FF=255.  It returns decimal fractions r,
g, b and a corresponding to the hex values.

*.  Background polygon display in Michael's graph viewer is starting to
work.

============================================================================
BEAST code changes made on Tues, July 23, 2013:

*.  Eliminated deprecated methods from general/sysfuncs.cc namespace.

*.  filefunc::assign_file_epoch_time() imports the path for some input
file.  If the file exists, this method returns the minimum of its access,
modification and change times as its best estimate for the file's creation
time.  Otherwise, this method return -1.

*.  imagesdatabasefunc::get_image_ID() takes in an image's campaign and
mssion IDs along with its URL.  It returns the corresponding unique image
ID from the IMAGERY database.

*.  mains/imagesearch/UPDATE_PHOTO_TIMES queries the user to enter a graph
hierarchy ID for someset of images already loaded into the images table of
the IMAGERY database.  We assume that the input images are *stills* and not
video frames nor Reuters news articles. UPDATE_PHOTO_TIMES retrieves the
campaign and mission IDs plus UTM zonenumber corresponding to a set of
images residing within /data/ImageEngine/ from the world_regions table of
the IMAGERY database.

UPDATE_PHOTO_TIMES tries to extract local image times from exif metadata
tags.  If unsuccessful, a time based upon the image file's access,
modification or change times is assigned to the photo.  UPDATE_PHOTO_TIMES
subsequently converts local image times to UTC and exports a SQL script
which updates timing columns within the images table of the IMAGERY
database.

................

*.  sift_detector::reorder_parallelized_tiepoints_file() imports an
"ntiepoints.dat" file which we assume was generated via some threaded
program.  It reorders the lines within the tiepoints file based upon
image_i,image_j duples.  The reordered ntiepoints file is exported to
tiepoints_subdir and may be easily compared with serial-processing
counterparts.

*.  Experimenting with calling siftfast rather than Lowe_sift in sift_detector::generate_Lowe_keyfile().


============================================================================
BEAST code changes made on Mon, July 22, 2013:

*.  Modified mains/graph/kmeans_clusters.cc to better handle many connected
components with relatively small numbers of nodes.

................

*.  graph::write_SQL_insert_link_commands() now takes
minimal_edge_weights_threshold as an input argument.

................

*.  Fixed some bugs in SIFT graph construction


============================================================================
BEAST code changes made on Fri, July 19, 2013; Sun, July 21, 2013:

*.  Installed postgis2 on biglaptop following notes added as
postgis_on_ubuntu12_4.png within README folder.

................

*.  Program PARSE_MIKE_TRACKS imports a CSV file generated by Mike Watson
in late July 2013 containing both FSF and Athena ship track information.
It exports a new text file containing GPS track info where time is measured
since midnight Jan 1, 1970.  And the temporal spacing between GPS track
points is approximately 1 second.

============================================================================
BEAST code changes made on Thurs, July 18, 2013:

*.  mains/dime/VPLAYER is an OSG based viewer for WISP imagery.  This
variant is specifically intended to play temporal sequences of DIME panels
with aerial track features superposed for comparison.  It queries the user
to enter scene and panel IDs for some set of processed WISP & aerial track
data.

................

*.  Moved /usr/local/include/lm.h to /usr/local/include/levmar.h.  Changed
include within src/optimum/optimizer_funcs.cc

============================================================================
BEAST code changes made on Weds, Jul 17, 2013:

*.  mains/dime/RELOCATE_HORIZON imports a set of subsampled, stabilized
WISP panoramas for some user-specified May 2013 scene.  For each input
panorama, it computes horizontal line integrals near the vertical middle.
RELOCATE_HORIZON then computes the first derivative of the horizontal line
integrals as a function of vertical pixel py.  The py value for which the
first derivative is maximal is taken to be the vertical coordinate for the
horizontal horizon.

RELOCATE_HORIZON exports text file Horizon_V.dat which reports V_horizon as
a function of panorama ID and filename.  It also generates AVI movie
Horizon_15fps_SceneNN.avi that illustrates extracted horizons as red lines
within subsampled WISP panos.

................

*.  mains/dime/GEOREG_FSF_PANOS now computes the U coordinate corresponding
to due east for each panorama, the azimuth corresponding to U=0 and the
elevation corresponding to V=0.  GEOREG_FSF_PANOS exports these results to
output text file Panos_Az_El.dat.


============================================================================
BEAST code changes made on Tues, Jul 16, 2013:

*.  Many updates to several DIME programs.

*.  Update config/common_VMware.pro

============================================================================
BEAST code changes made on Mon, July 15, 2013:

*.  Updated config/common_all.pro to include dlib references.

................

*.  Multiple updates to several DIME programs.

============================================================================
BEAST code changes made on Sun, July 14, 2013:

*.  Made multiple DIME program updates.

============================================================================
BEAST code changes made on Fri, July 12, 2013:

*.  Minor dime updates

============================================================================
BEAST code changes made on Thurs, July 11, 2013:

*.  Added README.davis and README.Vmware to SVN repository.

..................

*.  Now pass minimal_number_of_inliers into sift_detector classes rather
than hardwiring this parameter.

...................

*.  In map_unionfind destructor, we now assume that OTHER classes are
responsible for deleting dynamically instantated objects to which a void*
member of each NODE triple points.  

...................

*.  Now pass min_n_features into sift_detector classes rather than
hardwiring this parameter.

============================================================================
BEAST code changes made on Weds, July 10, 2013:

*.  As of July 2013, FLANN index construction is NOT thread safe.  So FLANN
will generally return *different* candidate image tiepoint pairs each time
we run program ASIFTVID &/or RESTRICTED_ASIFT in parallel threading mode.

*.  Created new datastructures/map_unionfind class in which a node ID is
now represented by a pair of ints corresponding to frame and feature labels
rather than a concatenated double.

============================================================================
BEAST code changes made on Tues, July 9, 2013:

*.  Made some DIME code changes


============================================================================
BEAST code changes made on Mon, July 8, 2013:

*.  mains/dime/STABILIZE_PANOS now generates and exports an AVI movie from
subsampled, stabilized WISP panos.

..................

*.  Assign default true value to flann_flag boolean argument within akm
constructor.

============================================================================
BEAST code changes made on Sat, July 6, 2013:

*.  camerafunc::uv_translate_WISP_image() takes in a WISP image whose
horizon has previously been straightened.  It also imports U and V
translation parameters that were derived via SIFT/ASIFT feature
matching between the 0th and some later WISP frame stored in
*input_texture_rectangle_ptr.  Looping over all pixels within a "2D
translated" version of the later panorama frame panorama, this method finds
their progenitor pixels within the later frame.  Progenitor pixel RGB
values are transfered to their "2D translated" counterparts within
*output_texture_rectangle_ptr.  The "2D translated" image returned in
*output_texture_rectangle_ptr should (hopefully) closely match the 0th WISP
panorama.

============================================================================
BEAST code changes made on Fri, July 5, 2013:

*.  Cleaned up mains/dime/STABILIZE_PANOS.  It now should import subsampled
UVcorrected panos and output full-resolution stabilized panos.

============================================================================
BEAST code changes made on Weds, July 3, 2013:

*.  mains/photosynth/generate_peter_inputs now allows bundler subdir to be
passed as a command-line argument for summer 2013 GEO demo purposes.

*.  Added start_frame_ID & stop_frame_ID members to PassInfo class along
with get methods.

.....................

*.  mains/dime/SUBSAMPLE_STABILE_PANOS loops over all panoramas within
bundler_IO_subdir/stable_frames/ . Using ImageMagick's convert command, it
resizes each WISP panorama from 40Kx2.2K pixels down to 3960x218.

.....................

*.  Streamlined summer 2013 GEO demo for pass 20120105_1402.

*.  mains/geo/TRIANGULATE now calls /usr/local/bin/bundler-v0.4 rather than
/home/cho/software/bundler-v0.4-source/bin/bundler

.....................

*.  Renamed mains/dime/subsample_stabile_panos.cc as subsample_panos.cc


============================================================================
BEAST code changes made on Tues, July 2, 2013:

*.  pfiles5_28a.tgz yielded good 20120105_1402 reconstruction results
*.  pfiles5_28b.tgz yielded mediocre 20120105_1402 reconstruction results

*.  Added mains/geo/README.summer2013_demo

........................

*.  sift_detector::export_fundamental_matrix() again takes fundamental*
curr_fundamental_ptr as input argument.

*.  sift_detector::export_feature_tiepoints() again takes ntiepoints_stream
as input argument.

........................

*.  sift_detector::export_feature_tiepoints() now ignores any tiepoint
pairs whose feature IDs don't match!

*.  Restored exporting of feature tiepoints and not just feature tracks to
asiftvid and restricted_asift programs.

*.  20120105_1402 reconstruction yielding good results.


============================================================================
BEAST code changes made on Mon, July 1, 2013:

*.  filefunc::ReadInSubstrings() takes in the name for some text file which
we assume corresponds to an input table of strings.  It fills and returns
an STL vector of vector of strings containing the contents of the input
text file.

*.  mains/dime/FILTER_HORIZON_PARAMS imports sinuosoidal-fit parameters to
panorama image plane horizons generated by program FIT_HORIZONS.  It first
generates probability distributions for the amplitude A, sinusoidal phase
phi, and averaged DC value v parameters over all frames from an FSF scene.
After computing these parameters' medians and quartile-widths,
FILTER_HORIZON_PARAMETERS identifies outliers among the input values as
those which lie more than 3 quartile widths away from the median.  Outlier
values are ignored in subsequent gaussian filtering of the inlier parameter
inputs.  Raw and filtered parameter values are plotted as functions of
panorama frame number.  The filtered sinuosoidal parameter values are
exported to a new text file within horizons_subdir.

-------------


*.  Created new mains/plume/README.masks.

*.  GEO/20120105_1402 example works well from scratch.

============================================================================
BEAST code changes made on Thurs, Jun 27, 2013:

*.  mains/dime/DIME_SA is a variant of program LOS.  It displays a 3D DTED
map of the southern US with a large and medium city GIS layer.  FSF and
Athena ship tracks are displayed as cyan and purple curves, while aircraft
tracks are displayed as red to green curves.

*.  mains/dime/AERIAL_TRACKS imports aerial track information extracted by
Mike Watson from various May 2013 Panama City fieldtest sources.  It
instantiates and fills track objects with aircraft timing and UTM position
information.  AERIAL_TRACKS exports the aerial tracks to an output text
file.

*.  mains/dime/AERIAL_FEATURES imports projected May 2013 Panama City field
test aerial tracks generated by AERIAL_TRACKS.  In particular, it reads in
track label, panel_ID, panel_U and panel_V information as a function of
pano ID.  Looping over all 10 wagonwheel panels, AERIAL_FEATURES exports 2D
feature files which contain U,V feature track coordinates as functions of
video framenumber.  The resulting UV feature files can be imported into
program VPLAYER in order to directly compare WISP video with aerial tracks
projected into georegistered image planes.

============================================================================
BEAST code changes made on Weds, Jun 26, 2013:

*.  mains/dime/GEOREG_FSF_PANOS first imports epoch times for a set of
stabilized FSF WISP panoramas.  It next imports GPS tracks for the FSF and
Athena ships.  The azimuthal angle of the Athena relative to the FSF is
calculated for each stabilized panorama.  GEOREG_FSF_PANOS next imports the
Athena's UV image-plane track for a set of stabilized panoramas previously
computed via program ATHENA.  It then computes the U coordinate
corresponding to due east for each panorama and exports the results to an
output text file.

........................

*.  mains/dime/FSF_CARDINAL_DIRS annotates stabilized & georegistered FSF
panos with east, north, west and south directions.

........................

*.  mains/dime/AERIAL_TRACKS imports aerial track information extracted by
Mike Watson from various May 2013 Panama City fieldtest sources.  It
instantiates and fills track objects with aircraft timing and UTM position
information.  AERIAL_TRACKS exports the aerial tracks to an output text
file.



============================================================================
BEAST code changes made on Tues, Jun 25, 2013:

*.  mains/dime/PARSE_TIME_CSV imports a CSV file accompanying some raw
WISP image file from the FSF field test in May 2013. It computes an
averaged UTC for each panorama and exports this time to an output text file
as a function of panorama ID.

.......................

*.  mains/dime/PARSE_SHIP_TRACKS imports a CSV file generated by Rob
Sweeney containing either FSF or Athena ship SPAN-CPT GPS information.  It
exports a new text file containing GPS track info where time is measured
since midnight Jan 1, 1970.  And the temporal spacing between GPS track
points is approximately 1 second.

============================================================================
BEAST code changes made on Mon, Jun 24, 2013:

*.  mains/dime/ATHENA attempts to semi-automatically track the ATHENA ship
seen in WISP-360 imagery from the FSF.  It takes in an initial set of UV
Athena coordinates determined by a human.  ATHENA then searches for hot
pixels in the vicinity of the initial UV coordinates.  It applies
alpha-beta filtering to the new U coordinate and alpha filtering to the new
V coordinate.  ATHENA superposes a red dot in an output image indicating
its best estimate for the second ship's image plane location.  And it
exports a text file containing the UV coordinates as functions of input
panorama filename.

*.  mains/dime/JOIN_PANELS concatenates together subsampled "panel" images
into a single, larger image.  We wrote this program in order to join
together FSF panels so that the Athena ship could always be seen somewhere
within the concatenation over an entire pass.

============================================================================
BEAST code changes made on Sun, Jun 23, 2013:

*.  Updated more DIME programs so that they can work with FSF data.

============================================================================
BEAST code changes made on Fri, Jun 21, 2013:

*.  Updated more DIME programs so that they can work with FSF data.

============================================================================
BEAST code changes made on Thurs, Jun 20, 2013:

*.  Updated mains/dime/list_subsampled_images.cc

..................

*.  In graph::compute_edge_weights_distribution(), we now explicitly
ensure STL vector edge_weights has at least 2 members before attempting to
compute a probability distribution from it.

============================================================================
BEAST code changes made on Weds, Jun 19, 2013:

*.  May28a pfiles from ROBOT laptop yields 0 bundler errors and good 3D
reconstruction results.  May28b pfiles from BEAST yields 0 bundler errors
and mediocre reconstruction results.

*.  Overwrote Jun19 versions of sift_detector and akm class files with
May28a versions.

*.  Triangulation results for GEO pass 20120105_1402 are again good after
making above heart transplant!

*.  Added buggy subdirs containing Jun 18 versions of sift_detector, akm
classes plus restricted_asift mains program to repository.

============================================================================
BEAST code changes made on Tues, Jun 18, 2013:

*.  Updated mains/aerosynth/PLY2TDP which now yields surprisingly nice
dense 3D point cloud for flight facility from GEO/20120105_1402_good PMVS
inputs.

*.  mains/aerosynth/visualize_FLIR_metadata now reports average range to
target based upon hardware measurements.


============================================================================
BEAST code changes made on Mon, Jun 17, 2013:

*.  Significantly reworked mains/dime/EXTRACT_HORIZON_SEGMENTS and
FIT_HORIZONS so that they can work on May 2013 FSF WISP imagery.

................

*.  graphdbfunc::retrieve_connected_component_posn_labels_from_database()
now explicitly checks for "NULL" strings before returning cc_label and
topic labels.

*.  Started to split apart mains/photosynth/GENERATE_PHOTO_HIERARCHY into
GENERATE_CCS and FILL_PHOTO_HIERARCHY for image search database ingesting
purposes.

..........

*.  20120105_1402 from May24d at least produces reasonable reconstruction
(though agreement with GE is poor)

============================================================================
BEAST code changes made on Sun, Jun 16, 2013:

*.  Significantly reworked login in sift_detector::rename_feature_IDs().
Any duplicate descriptors are now ignored.  Any duplicate UV image plane
coordinates are ignored.

...............

*.  Reconstruction of 20120105_1402 is still very unstable and poor!

============================================================================
BEAST code changes made on Fri, Jun 14, 2013:

*.  Added CURRIMAGE_FEATURE_IDS_MAP and IMAGE_VS_FEATURES_MAP typedefs in
sift_detector class.  

*.  sift_detector::export_feature_tracks_for_image() takes in index i
labeling some image as well as image_vs_features_map.  It first generates a
features filename based upon the input image's filename.  It next extracts
all feature IDs for the specified input image and sorts their descriptors
based upon the IDs.  This method exports to the IDs, U and V image plane
coordinates, and feature frequency across all images to the output features
text file.

*.  Trying to get GEO processing chain to yield good results for
20120105_1402 pass again.  Results so far are lousy!

...............

*.  Do NOT use interest_points_map in sift_detector::parse_Lowe_features().

...............

*.  In graph::compute_edge_weights_distribution(), now explicitly check
whether graph_edges_map.size()==1.

*.  Perhaps some hope for GEO pass 20120105_1402...

============================================================================
BEAST code changes made on Thurs, Jun 13, 2013:

*.  descriptor::outerproduct() returns a dynamically instantiated flann
Matrix.

*.  Overloaded mathfunc::recursive_second_moment() to take in descriptors
as well as genvectors.

...................

*.  Overloaded bundlerfunc::export_bundle_file() to take in STL map
containing feature IDs to ignore.

============================================================================
BEAST code changes made on Weds, Jun 12, 2013:

*.  Updated several build_XXX and build_anti_XXX scripts within various
main directories.

...................

*.  Modified mains/dime/Wisp360CalAssistant_script s.t. it now always
requests user to enter full path for output panorama files.


============================================================================
BEAST code changes made on Tues, Jun 11, 2013:

*.  Added mains/graphs/GENERATE_SINGLETON_CLUSTERS to repository.

============================================================================
BEAST code changes made on Thurs, Jun 6, 2013:

*.  Updated Makefile_VMware

============================================================================
BEAST code changes made on Thurs, Jun 6, 2013:

*. Hacked mains/photosynth/Qt/qtphotoserver.cc in order to illustrate
dominant topics for 3 YouTube videos for ICE proposal.

============================================================================
BEAST code changes made on Weds, Jun 5, 2013:

*.  Starting to implement server code to handle new polygon activeMQ call
to Michael's graph viewer.

============================================================================
BEAST code changes made on Tues, Jun 4, 2013:

*.  Generated reasonable sine-wave graphs for 3 YouTube Boston Bombing
clips for ICE round II proposal.

============================================================================
BEAST code changes made on Mon, Jun 3, 2013:

*.  Replaced genmatrix with flann::Matrix<int> in
mains/sift/FORM_IMAGE_EDGELIST to conserve RAM.

*.  Descriptor::docopy() and operator=() methods appear to be working.

*. sift_detector::export_feature_tiepoints() takes in a set of inlier
tiepoint pairs corresponding to images labeled by indices i and j.  It
first appends to the ntiepoints_stream one line which contains the indices
i and j for the images, their number of tiepoints, the number of featur
eduplicates and the images' file names.  This method next creates a new
subdirectory within tiepoints_subdir that is labeled by i and j.  It
exports two feature text files to this labeled subdirectory which contain
all tiepoint pairs found for images i and j.

*.  Changed /home/cho/programs/... to ~/programs in
mains/photosynth/Qt/run_photoserver.

============================================================================
BEAST code changes made on Sun, Jun 2, 2013:

*.  Added _feature_track_ID member to sift_detector class.  

*.  Overloaded sift_detector::rename_feature_IDs() to take in
feature_track_ID integer reference.  Set tiepoint pair IDs to
feature_track_ID rather than to their minimum.

*.  Removed unnecessary lines from sift_detector::rename_feature_IDs().

*.  sift_detector::rename_feature_IDs() now takes in feature_track_ID and
feature_track_ids_map.  If the ID for the current first member of an inlier
tiepoint pair resides in feature_track_ids_map, the ID for the 2nd member
of the inlier pair is set equal to the first member's.  Otherwise, both
tiepoint pair feature IDs are set equal to feature_track_ID.

============================================================================
BEAST code changes made on Sat, Jun 1, 2013:

*.  mains/sift/FORM_IMAGE_EDGELIST imports features extracted from a
transcripted and non-transcripted Boston Bombing YouTube video clip.  It
computes and plots the distribution for feature image frequencies.
FORM_IMAGE_EDGELIST next forms a matrix whose rows are labeled by feature
ID and whose columns are labeled by image ID.  Entries in this matrix equal
1 if a particular feature was extracted from a particular image and 0
otherwise.  Inner products between different columns of this matrix
correspond to number of within an image graph.  FORM_IMAGE_EDGELIST exports
an edge list to an output text file.

......................

*.  mains/sift/CREATE_SIFT_SCRIPT is a little utility program which we
wrote in order to generate an executable script for matching the
transcripted "center" Nightline Boston Bombing video frames with a
candidate "left" YouTube video.

============================================================================
BEAST code changes made on Fri, May 31, 2013:

*. Tried to streamline sift_detector::parse_Lowe_features().

*.  Created lightweight datastructures/descriptor class to eventually
replace expensive genvectors in sift_detector class.

*.  Globally replaced all references to genvectors with descriptors in
sift_detector, image_matcher, akm, vptree and ann_analyzer classes.

*.  Fixed bad memory leak in akm destructor.  Added delete
SIFT_descriptors_matrix_ptr and delete SIFT_descriptors2_matrix_ptr calls.

........................

*.  Main programs symbol_descriptors, nplusone and descriptors require
further nontrivial changes to new descriptor class before they can compile.

........................

*.  Discovered painful way that while loop in
sift_detector::compute_fundamental_matrix_via_RANSAC() could get stuck.  So
added n_iters < max_n_iters conditional to avoid infinite while loop.

============================================================================
BEAST code changes made on Thurs, May 30, 2013:

*.  Matched transcripts for few Boston Bombing YouTube clips with topics
from 50K+ Reuters articles.

============================================================================
BEAST code changes made on Weds, May 29, 2013:

*.  In FFMPEGVideo::decodeNextFrame(), we had to comment out call to
avcodec_decode_video() which doesn't link correctly under gcc/g++ version
4.6.3 in Ubuntu 12.4.

......................

*.  Added campaign_ID, mission_ID and graph_hierarchy_ID members to
PassesGroup class along with setter methods.

*.  mains/textsearch/POPULATE_GRAPH_DIRS now passes campaign_ID, mission_ID
and graph_hierarchy_ID to mains/photosynth/GENERATE_COMPONENT_HIERARCHY

*.  Successfully generated coarse & fine topics plus graph for 50K+ Reuters
articles.

============================================================================
BEAST code changes made on Tues, May 28, 2013:

*.  Add -lX11 to linked libraries list in Makefile for Ubuntu 12.4
machines.

============================================================================
BEAST code changes made on Fri, May 24, 2013:

*.  Added new Graphical_index_ID_map_ptr and Graphical_ID_index_map_ptr
members to GraphicalsGroup class.  But GraphicalsGroup class does not yet
depend upon them in any critical way.  Eventually want to eliminate
deprecated graphicals_counter_ptrs_vector member in favor these new map
members.

*.  Fixed some main programs so that they compile again.

...............

*.  After tightening up max_intersection_uncertainty=250 in
mains/geo/TRIANGULATE, 3D reconstruction for flight facility in
20120105_1402 is quite accurate!

============================================================================
BEAST code changes made on Thurs, May 23, 2013:

*.  Added new README.Kermie for new windows VM

*.  Overloaded version of
fundamental::Hartley_normalize_homogeneous_vectors() now returns false if a
division-by-zero error would have occurred given the inputs.

*.  Parallelized image matching for programs ASIFTVID and RESTRICTED_ASIFT.
Matching runs noticeably faster.  But 3D reconstruction results are poor.

*.  Eliminated graphical_counter_ptrs_vector member from GraphicalsGroup in
favor of new Graphical_index_ID_map_ptr and Graphical_ID_index_map_ptr
members.  

..................

*.  Added MAINS_DIME_DIR to Makefile

..................

*.  Restored sift_detector::recover_inlier_tiepoints().

============================================================================
BEAST code changes made on Weds, May 22, 2013:

*.  Significantly refactoring sift_detector class to enable threading of
image matching.

============================================================================
BEAST code changes made on Tues, May 21, 2013:

*.  sift_detector::add_image_feature_info() takes in image index i along
with STL vector currimage_feature_info which is assumed to contain feature
info for image i.  It pushes the contents of currimage_feature_info back
onto the ith STL vector in image_feature_info.

*.  Added num_threads member to sift_detector class along with set method.

*.  imagesdatabasefunc::retrieve_image_attribute_keys_values_from_database()
now writes out integer values as genuine ints and not as doubles with
trailing .00 

============================================================================
BEAST code changes made on Mon, May 20, 2013:

*.  mains/puma/TIMINGS converts takeoff/landing metadata extracted from the
Puma metadata file into epoch seconds.

============================================================================
BEAST code changes made on Fri, May 17, 2013:

*.  Generalized mains/dime/WISP360CALASSISTANT_SCRIPT.

*.  mains/aerosynth/EARTHBUNDLER is starting to backproject raw Puma
imagery onto a GE screen shot.

============================================================================
BEAST code changes made on Thurs, May 16, 2013:

*.  Trying to track down definite bug in mains/geo/RESTRICTED_ASIFT.

============================================================================
BEAST code changes made on Weds, May 15, 2013:

*.  Created new src/mains/puma subdirectory.

*.  Significantly simplified FeaturesGroup::read_in_photo_features().

*.  Added max_n_features_to_consider_per_image member to sift_detector
class along with set method.

============================================================================
BEAST code changes made on Tues, May 14, 2013:

*.  mains/aerosynth/PARSE_PUMA_METADATA imports the metadata text file
generated for a PUMA UAV flight.  It exports a simpler metadata file
containing video frame filename, UAV and ground target geolocation as
functions of GPS time.

*.  mains/aerosynth/VISUALIZE_PUMA_METADATA reads in the metadata ascii
file generated by program PARSE_PUMA_METADATA.  It extracts aircraft GPS and
video camera pointing information from this metadata file. This program
generates a TDP/OSGA file containing the aircraft's GPS track and
line-of-sight rays from the aircraft towards the
ground. VISUALIZE_FLIR_METADATA also outputs package files containing video
frame filenames and their hardware derived camera parameters to
bundler_IO_subdir/packages/hardware_in.  Finally, it exports an executable
script for program SEPARATED_PACKAGES.

................

*.  In sift_detector::generate_Lowe_keyfile(), replace call to Lowe's
original binary with the much faster siftfast executable.

============================================================================
BEAST code changes made on Mon, May 13, 2013:

*.  mains/geo/PARSE_PUMA imports the metadata text file generated for a
PUMA UAV flight.  It exports a simpler metadata file containing UAV and
ground target geolocation as functions of GPS time.

============================================================================
BEAST code changes made on Fri, May 10, 2013:

*.  mains/geo/TRIANGULATE creates softlinks between key files in
all_keys_subdir with images_subdir.

*.  Mains/geo/CROP_ANALOG_FRAMES now deletes existing
bundler_IO_subdir/images soft link which points to
bundler_IO_subdir/raw_images.  It replaces old link with new link to 
bundler_IO_subdir/cropped_lowdefn_frames/ subdirectory:

============================================================================
BEAST code changes made on Thurs, May 9, 2013:

*.  bundlerfunc::RANSAC_fit_rotation_translation_scale() takes in a set of
"left" points which need to be rotated, translated and scaled so that they
optimally match a corresponding set of "right" points.  Since the input
"left" points may contain significant outliers, we perform RANSAC
determination of inlier transformed left-right tiepoint pairs.  The
rotation, translation and scale parameters which yield the largest number
of inlier tiepoint pairs are printed out by this method.

============================================================================
BEAST code changes made on Weds, May 8, 2013:

*.  mains/dime/WISP360CALASSISTANT_SCRIPT now queries user if he wants to
generate high-pass filtered versions of WISP panos.

*.  Overloaded genvector::outerproduct() within threevector class which
returns a threematrix.

*.  Overloaded operator - and * in threematrix class.

*.  Overloaded version of geometry_func::multi_line_intersection_point()
computes the least-squares fit for the 3D intersection point corresponding
to multiple nearly-intersecting lines.  It also propagates angular errors
in the lines' direction vectors to yield an "error ellipsoid" for the
intersection point.

============================================================================
BEAST code changes made on Tues, May 7, 2013:

*.  No longer compile our libins.a library in Makefile.

*.  No longer link with 3rd-party libcwiid in Makefile.

*.  mains/geo/SEPARATED_PACKAGES imports an entire set of video frames for
some flight.  It then queries the user to enter the maximum permissible
angular separation between subsampled frames which will be bundle adjusted.
On 5/7/13, we empirically found that setting this angular threhsold to 5
degs yielded quite good reconstruction results for GEO pass 20120105_1402!
SEPARATED_PACKAGES exports the angularly separated package filenames to an
output text file which can serve as input to progrmas RESTRICTED_ASIFT and
TRIANGULATE.  It also outputs the image filenames corresponding to those
packages to bundler_IO_subdir/list_tmp.txt.

*. No longer hardwire bundler_IO_subdir and metadata filenames into
mains/aerosynth/PARSE_FLIR_METADATA & VISUALIZE_FLIR_METADATA and
mains/geo/CROP_ANALOG_FRAMES.

============================================================================
BEAST code changes made on Fri, May 3, 2013:

*.  In
sift_detector::identify_candidate_FLANN_feature_matches_for_image_pair(),
reject tiepoint pairs if their Hamming distances exceed a maximum
threshold.

============================================================================
BEAST code changes made on Tues, Apr 30, 2013:

*.  sift_detector::compute_descriptor_component_medians() loops over all
d_dim components of all descriptors.  It computes the median value for each
component and stores the results within member STL vector median_d_values.

*.  sift_detector::binary_quantize_SIFT_descriptors() loops over all
features within all images.  It compares each component of each feature
descriptor with the component's median value stored in median_d_values.  A
binary 1 or 0 value is assigned based upon the component being greater or
less than the median value.  Binary quantized feature descriptors are
stored within member STL vector Dbinary_ptrs.

*.  In akm::initialize_forward_SIFT_feature_search(), reduced number of
kd-trees from 8 to 4 in randomized kd-tree index construction.  Yields
noticable increase in SIFT/ASIFT feature matching rate.

============================================================================
BEAST code changes made on Mon, Apr 29, 2013:

*.  binaryfunc::genvector_to_string() takes in a genvector *x_ptr whose
entries are assumed to equal 0 or 1.  It returns a string corresponding to
the input binary quantized genvector.

*.  sift_detector::identify_inlier_matches_via_fundamental_matrix() now
takes max_n_good_RANSAC_iters as input argument.

*.  In
genmatrix::sorted_singular_value_decomposition_w_mdim_less_than_ndim(),
added try-catch statement to handle NewMat::SVD() exceptions.  

*.  genmatrix::sorted_singular_value_decomposition() now returns boolean
flag indicating success/failure of NewMat::SVD() method.  Several other
genmatrix methods which depend upon NewMat::SVD() now also return bool
flags indicating success/failure.

*.  Fixed numer bug in fundamental::sampson_error().  Also intentionally
tried to streamline this method as much as possible.

============================================================================
BEAST code changes made on Fri, Apr 26, 2013:

*.  mains/geo/GPSFIT now generates a new version of the GPS measurements
file whose entries do match those in the reconstructed camera posns files
if these 2 input files are NOT initially in precise correspondence.

*.  mains/dime/ERSA_TRACKS can now accomodate non-square WISP pixels.

*.  Experimenting with imposing more constraints on raw triangulated points
in mains/geo/TRIANGULATE

============================================================================
BEAST code changes made on Thurs, Apr 25, 2013:

*.  Tried to georegister Hawaii pano to SRTM map.

============================================================================
BEAST code changes made on Weds, Apr 24, 2013:

*.  sift_detector::quantize_SOH_corner_angles() takes in a SIFT feature
(F_ptr,D_ptr) within input current_feature_pair.  It computes the
descriptor's four corner angles.  Each angle is then quantized into 1 of 24
15-degree bins.  The four quantized bin integers are returned within a
quadruple data structure.

*.  sift_detector::quantize_currimage_feature_info() loops over all
(F_ptr,D_ptr) feature pairs within input STL vector currimage_feature_info.
For each input SIFT feature, it computes quantized integer indices for the
descriptor's 4 SOH corners.  The entire set of input feature pairs are
stored as functions of quantized quadruple SOH corner indices in STL map
member curr_SOH_corner_descriptor_map.

*.  camerafunc::fv_from_vert_FOV() returns fv < 0 given FOV_v measured in
radians.

*.  camerafunc::fu_from_horiz_FOV_and_Umax() returns fv < 0 given FOV_u
measured in radians and Umax=Npu/Npv.

============================================================================
BEAST code changes made on Tues, Apr 23, 2013:

*.  In akm class, added typedef and STL vector member:

typedef flann::Index<flann::L2<float> > RANDOMIZED_KDTREE_INDEX;
std::vector< RANDOMIZED_KDTREE_INDEX* > kdtree_index_ptrs;

*.  sift_detector::prepare_all_SIFT_descriptors() sequentially imports SIFT
feature information for each image within STL vector member
image_feature_info into FLANN matrix *SIFT_descriptors_matrix_ptr of
*akm_ptr.  It then instantiates and a new KDtree index within the STL
vector kdtree_index_ptrs member of *akm_ptr.

*.  In sift_detector::rename_feature_IDs(), eliminated unnecessary
"brute-force" comparison between inlier tiepoint features and all features
for next image.


============================================================================
BEAST code changes made on Mon, Apr 22, 2013:

*.  Streamlined sift_detector::parse_Lowe_features() so that it now imports
numbers using >> rather than stringfunc::string_to_numbers().

============================================================================
BEAST code changes made on Fri, Apr 19, 2013:

*.  mains/imagesearch/VIDEOS_TEMPORAL_LAYOUT reads in a set of node and
image IDs as well as epoch times from the IMAGERY database for some
user-specified graph hierarchy.  (As of April 2013, we have stored video
times relative to their starting frames within the epoch column of the
IMAGERY database for Boston bombing YouTube clips.  Each clip was
arbitrarily assigned an absolute start time of midnight, April 15, 2013.)

VIDEOS_TEMPORAL_LAYOUT generates a set of stacked cosines layout for
(gx2,gy2) graph node coordinates which can serve as a reasonable timeline
display for multiple video clips.  The period for all cosines is assumed to
equal 1 minute.  VIDEOS_TEMPORAL_LAYOUT exports gx2,gy2 coordinates to
ascii output as well as updates gx2,gy2 columns in the nodes table of the
IMAGERY database.  It also exports a SQL script which contains time stamp
annotations that label the sinusoidal graph layout.  Each video clip is
also labeled on its left-hand side.

*.  mains/imagesearch/UPDATE_REL_FRAME_TIMES queries the user to enter a
graph hierarchy ID for a set of video frames already loaded into the images
table of the IMAGERY database.  It retrieves the campaign and mission IDs
plus UTM zonenumber corresponding to a set of images residing within
/data/ImageEngine/ from the world_regions table of the IMAGERY database.
UPDATE_REL_FRAME_TIMES assumes the current video clip began at midnight,
and it bases video frame times upon frame number.  UPDATE_REL_FRAME_TIMES
stores timing metadata within the images table of the IMAGERY database.

============================================================================
BEAST code changes made on Thurs, Apr 18, 2013:

*.  PhotoServer::issue_update_annotations_message() broadcasts the current
number of annotations associated with the current image (which is
associated with one or more nodes).

============================================================================
BEAST code changes made on Weds, Apr 17, 2013:

*.  Trying to generalize Image Search tools to process Boston Bombing
videos

============================================================================
BEAST code changes made on Thurs, Apr 11, 2013:

*.  Modified mains/dime/STABILIZED_CHIP s.t. it could recrop ERSA track
21698 in order to better stabilize this target.

============================================================================
BEAST code changes made on Weds, Apr 10, 2013:

*. Overloaded version of imagefunc::extract_subimage() takes in a bounding
box defined in UV space.  It crops that region out from the specified input
image file.

*.  mains/dime/STABILIZED_CHIP imports ERSA feature information for a
single, specified target track.  It excises a 2D bounding box around the
target's image-plane location for each imported panel frame.  In theory,
the resulting set of cropped images should have the specified ERSA target
stabilized near their centers.

============================================================================
BEAST code changes made on Tues, Apr 9, 2013:

*.  MIT aerial video frames vs GE matching starting to yield
quasi-reasonable results for aircraft locations.

============================================================================
BEAST code changes made on Mon, Apr 8, 2013:

*.  In sift_detector::generate_detector_descriptor_keyfile(), we assume
that if sift_keys_filename already exists, we do NOT need to compute it
again.

============================================================================
BEAST code changes made on Fri, Apr 5, 2014:

*.  Processed Hawaii SRTM map for Marius.

============================================================================
BEAST code changes made on Weds, Apr 3, 2014:

*.  WISP vs ERSA correlations can now definitely be seen!

============================================================================
BEAST code changes made on Tues, Apr 2, 2014:

*.  In FeaturesKeyHandler.cc, pressing "j" now toggles on/off score display
for features.

*.   In FeaturesGroup::update_display(), now call update_feature_scores()
if display_feature_scores_flag==true.

*.  Added set/get methods for display_feature_scores_flag in
FeaturesGroup.h

============================================================================
BEAST code changes made on Mon, Apr 1, 2014:

*.  mains/dime/ERSA_FEATURES imports projected ERSA track information
generated by ERSA_TRACKS.  In particular, it reads in track label,
panel_ID, panel_U and panel_V information as a function of ERSA frame
number.  Looping over all 10 wagonwheel panels, ERSA_FEATURES exports 2D
feature files which contain U,V feature track coordinates as functions of
video framenumber.  The time offset between ERSA and video frames is a free
variable which the user is queried to enter.

============================================================================
BEAST code changes made on Fri, Mar 29, 2013:

*.  mains/dime/CROP_AIR_OVER_OCEAN reads in "bundler-style" image_list and
image_sizes files for set of stabilized, UV-corrected WISP panos.  It crops
out the upper right-half region of each pano which corresponds to air over
ocean.

*.  mains/dime/GENERATE_STABLE_PACKAGES generates package files for panels
corresponding to stabilized and UV-corrected WISP panoramas.

============================================================================
BEAST code changes made on Thurs, Mar 28, 2013:

*.  pngfunc::add_text_to_PNG_image() imports an existing PNG image.  It
inserts the string text_line at the pixel location starting at
px_start,py_start where (0,0) corresponds to the picture's upper left
corner.  It also takes in angle measured in radians which specifies the
text's orientation relative to the picture's horizontal axis.  Input
text_rgb has red,green and blue values measured from 0 to 1.

*.  texture_rectangle::generate_RGB_from_grey_texture_rectangle() works
with the current texture rectangle which is assumed to be filled with 8-bit
greyscale values.  It instantiates a new texture rectangle which holds
three bytes for each pixel.  Greyscale intensity values are copied from the
8-bit to the new 24-bit texture rectangle.

*.  mains/dime/WISP_CARDINAL_DIRS annotates a de-warped & georegistered
Deer Island pano with east, north, west and south directions.

============================================================================
BEAST code changes made on Weds, Mar 27, 2013:

*.  geofunc::altitude_relative_to_tangent_plane() takes in some point on
the spherical earth's surface within tangent_plane_point.  It also imports
a secondary point that may lie on or above the spherical earth.  This
method computes and returns the 2nd point's altitude relative to the
tangent plane point.

*.  mains/dime/EDGE_PANOS reads in "bundler-style" image_list and
image_sizes files for set of 360 deg panorama mosaics.  It calls
ImageMagick's edge command in order to extract high-frequency spatial
content from each WISP panorama.  The edge panoramas are exported to
edge_pics_subdir.

============================================================================
BEAST code changes made on Tues, Mar 26, 2013:

*.  In Geometrical::set_curr_color(), commented out alpha=0.3.

*.  In SignPostsGroup::read_info_from_file(), we now allow for SignPosts
labels within the input text file to have white spaces.

============================================================================
BEAST code changes made on Mon, Mar 25, 2013:

*.  mains/dime/UVCORRECT_PANOS imports fitted sinusoid horizon parameters
generated by program FIT_HORIZONS.  Looping over a set of raw WISP
panoramas, it applies U-dependent sine function V-offsets to each input
image.  The physical horizon within a "V-corrected" panorama appears as a
horizontal line in the output image.  Obvious "U-shearing" of vertical
edges within "V-corrected" panoramas can be removed via a V-dependent
cosine function.  Corrected versions of the input panoramas which are
unwarped in both the U and V image plane directions are exported.
Subsampled versions of the corrected panoramas are also exported so that
SIFT/ASIFT can later be run on them for video stabilization purposes.

*.  mains/dime/LIST_SUBSAMPLED_IMAGES is a little utility program which we
wrote to generate a list of subsampled panoramas that serves as input to
program STABILIZE_PANOS.

*.  mains/dime/STABILIZE_PANOS first imports a set of subsampled,
"UV-corrected" WISP panoramas separated in time generated by program
UVCORRECT_PANOS.  It extracts SIFT and ASIFT features via calls to Lowe's
SIFT binary and the affine SIFT library.  Consolidated SIFT & ASIFT
interest points and descriptors are exported to key files following Lowe's
conventions. STABILIZE_PANOS performs tiepoint matching via homography
estimation and RANSAC.

Each tiepoint pair between a 0th and later WISP frame establishes a
correspondence between some horizontal "X" and counterpart "U" coordinate.
STABILIZE_PANOS simply computes the average of Delta=U-X over all input
panoramas.

STABILIZE_PANOS exports a set of full-resolution WISP panoramas which
should (theoretically) be stabilized relative to the 0th frame's
UV-corrected panorama.

============================================================================
BEAST code changes made on Sat, Mar 23, 2013:

*.  mains/dime/EXTRACT_HORIZON_SEGMENTS loops over input DIME WISP
panoramas.  For each image, it runs the line segment detector
algorithm/code of von Gioi (version 1.6 Nov 2011) on input DIME WISP
panoramas.  This variant of program LSD bins detected line segments into
(segment azimuthal orientation angle,impact parameter) cells.  Within each
cell, EXTRACT_HORIZON_SEGMENTS tries to concatenate line segments into
longer "super" segments.  The long segments are exported to an output text
file.

*.  mains/dime/FIT_HORIZONS loops over input DIME WISP panoramas.  For each
image, it imports horizon line segments generated by program
EXTRACT_HORIZON_SEGMENTS from an input text file.  Line segments lying too
far above or below the panorama's horizontal midline are ignored.  Segments
with large slope magnitudes are similarly ignored.  Surviving segments are
then ordered according to their midpoint U coordinates.  Initial estimates
for the A, phi and v_avg parameters entering into the sinusoidal function
for the projected horizon are computed based upon 3 neighboring line
segments.  A brute-force search is subsequently conducted for refined
sinusoid parameter estimates.  The score function favors long line segments
that lie close to the sinusoid fit.  Best fit parameters are exported to
text file output.  And fitted sinusoids are drawn on top of WISP-360
panoramas.

============================================================================
BEAST code changes made on Fri, Mar 22, 2013:

*.  Need to accurately find horizon within wisp-360 panos for DIME.

============================================================================
BEAST code changes made on Thurs, Mar 21, 2013:

*.  In PolyLinesGroup::generate_new_PolyLine() #7, call
   curr_PolyLine_ptr->set_multicolor_flag(true);

*.  In Clock::YYYY_MM_DD_H_M_S(), append "UTC" to output string if input
parameter display_UTC_flag==true.

============================================================================
BEAST code changes made on Weds, Mar 20, 2013:

*.  tracks_group::associate_track_labelID_and_ID() takes in a track.  It
adds the tracks label_ID and ID to STL map *track_labels_map_ptr.

*.  mains/dime/ERSA_TRACKS imports ERSA track information extracted from
MATLAB files via Allyn Dullighan's CSV parser matlab code.  It instantiates
and fills track objects with aircraft timing and UTM position information.
ERSA_TRACKS exports the aerial tracks to an output text file.

============================================================================
BEAST code changes made on Tues, Mar 19, 2013:

*.  STABILIZE_PANELS now exports images to date-time stamped PNG files.

*. In Clock::YYYY_MM_DD_H_M_S(), we now ensure integer part of
sec_to_display always takes up 2 digits.  Leading zero is added if
necessary to enforce this consistency condition.

============================================================================
BEAST code changes made on Mon, Mar 18, 2013:

*.  mains/dime/STABILIZE_PANELS imports affine transformation parameters
from the text file generated by program ASIFTVID.  It simply translates
WISP panel pngs so that py_avg --> 0.5*pixel height.  After this shift, the
WISP panel png should be stabilized relative to the georegistered panel.

*.  mains/dime/LIST_PANEL_IMAGES is a little utility program which we wrote
to generate a list of panel images that serves as input to ASIFTVID.

============================================================================
BEAST code changes made on Fri, Mar 15, 2013:

*.  Added magnification_factor parameter to initialize_ALIRT_grid() members
in AlirtGrid class.

*. Added TINY=1E-9 parameter to mathfunc::decompose_orthogonal_matrix()
methods.

============================================================================
BEAST code changes made on Weds, Mar 13, 2013:

*.  Renamed mains/dime/CREATE_PANO_SCRIPT as WISP360CALASSISTANT_SCRIPT.

.......................

*.  mains/dime/DRAPE_EO imports a TDP file along with an aerial EO image
which has been registered with the point cloud via program FUSION.
DRAPE_EO iterates over every point in the cloud and colors it to indicate
height or RGB information.  Fused data is written to TDP/OSGA file output.

*.  mains/dime/GEOREGPANO reads in package files for 10 WISP panoramic
video panels containing reasonable initial estimates for the cameras'
calibration parameters.  It also reads in manually established tiepoints
selected between a ladar point cloud and the WISP panels.  After iterating
over possible WISP camera position threevectors, GEOREGPANO computes the
global rotation which maps the rescaled image space ray constellation onto
the ladar rays in absolute world space coordinates.  After a georegistered
set of translated and rotated package files are written to disk, they can
be directly imported into program PANOVSLADAR in order to view the WISP
panoramas a set of 3D OBSFRUSTA against the ladar point cloud background.


============================================================================
BEAST code changes made on Tues, Mar 12, 2013:

*.  mains/falconI/WRITE_RUN_SAR_PROP is a little utility we wrote to
downsample the number of simulated SAR images for programs ANALYZE_SAR and
SAR_PROPAGATOR.

============================================================================
BEAST code changes made on Mon, Mar 11, 2013:

*.  FeaturesGroup::backproject_selected_photo_features_as_3D_rays() loops
over all 2D features and backprojects them into 3D space.  It draws colored
rays emanating from OBSFRUSTA apexes through the 2D image plane features
into world space.

============================================================================
BEAST code changes made on Fri, Mar 8, 2013:

*.  Trying to generate reasonable bundle-adjustment results for circular
orbit around flight facility.

..............

*.  Seemingly quasi-reasonable circular orbit GEO reconstruction when focal
length is held fixed for 60 frames.

============================================================================
BEAST code changes made on Thurs, Mar 7, 2013:

*.  mains/geo/LIST_HARDWARE_PACKAGES is a little utility program which we
wrote to generate a list of selected FLIR hardware packages which
serve as inputs to programs RESTRICTED_ASIFT, TRIANGULATE and
PARSE_SSBA.

............

*.  mains/geo/VIDEO_PROPAGATOR is a variant of mains/photosynth/PROPAGATOR.
It pops open a 3D window displaying a bundle-adjusted point cloud and
aerial OBSFRUSTA. It also opens a 2D window in which the video frame for
the currently selected OBSFRUSTUM is displayed.  When the 2D window works
in RUN_MOVIE_MODE, all video frames may easily be viewed by pressing the
left/right arrow keys.

A user may mark some imageplane point of interest within the 2D window
after entering into INSERT_FEATURE_MODE.  A 3D ray is then backprojected
from the current OBSFRUSTUM down towards ground-level.  Feature 0 appears
in all other video frames within the lower left corner of each image plane.
Video tiepoints may be manually established by dragging the zeroth feature
crosshairs from the lower left corner to an appropriate image plane
location in MANIPULATE_FEATURE_MODE.  Within the 3D window, a purple ray
moves as the 2D feature is dragged.

Once 2 or more tiepoints have been established, the user may press 'd'
within the 3D window provided it operates in MANIPULATE_FUSED_DATA_MODE.  A
set of 3D crosshairs then appears at the best-fit intersection of the
backprojected rays.

*.  mains/graphs/EDGELIST_2_DIMACS parses the sift_edgelist text file
generated program SIFT_PARSER.  After generating the corresponding graph,
EDGELIST_2_DIMACS re-exports it in DIMACS edge format.

============================================================================
BEAST code changes made on Weds, Mar 6, 2013:

*.  Added libceres (Google nonlinear solver) to Makefile.


============================================================================
BEAST code changes made on Tues, Mar 5, 2013:

*.  Added Essex James' Fast Sea Frame 3D model to data/OpenSceneGraph-Data/

*.  mains/dime/SUBSAMPLE_PANELS loops over all 36-degree WISP "panel" PNG
files.  Using ImageMagick's convert command, it resizes each panel image
from 4Kx2.2K down to 1Kx0.5K.

*.  mains/dime/AFFINE_FIT imports 2D tiepoint pairs between two WISP panel
images separated in time.  It performs and returns an affine fit to the
tiepoint pairs.

============================================================================
BEAST code changes made on Mon, Mar 4, 2013:

*.  Eliminated many unused lines from mains/photosynth/bundler_photos.cc

*.  In GraphicalPickHandler::move_Graphical(), we commented out several
lines which automatically (and incorrectly) copied 2D UV feature
coordinates one video frame to all higher video frames.

*.  In GraphicalsGroup::initialize_Graphical(), we commented out several
lines which automatically erase 2D UV features for frame numbers less than
the frame in which a feature is first manipulated.

============================================================================
BEAST code changes made on Fri, Mar 1, 2013:

*.  In /usr/include/c++/4.4/ext , removed algorithm link to
/usr/include/c++/4.4/algorithm.  Now /usr/include/c++/4.4/ext/algorithm is
the original one which includes the random_sample() algorithm.

*.  mains/textsearch/DOCS_IN_TOPIC parses the document-topics text file
generated by MALLET.  Given a specified topic ID, it returns names of
documents for which that topic is dominant.

============================================================================
BEAST code changes made on Thurs, Feb 28, 2013:

*.  mains/textsearch/PARSE_DOC_TOPICS parses the document-topics text file
generated by MALLET.  Given a specified topic ID, it returns names of
documents for which that topic is dominant.

..................

*.  In tdpfuncs.cc, commented out write_xyz_data(
   std::string UTMzone,std::string tdp_filename,
   const std::vector<double>& X,const std::vector<double>& Y,
   const std::vector<double>& Z).

*.  Fixed several compilation errors which we had not fixed over past 6
months!

============================================================================
BEAST code changes made on Weds, Feb 27, 2013:

*.  mains/geo/GPSFIT reads in reconstructed camera posns generated by
program PARSE_SSBA in UTM coords.  It also reads in a text file containing
hardware GPS measurements for the camera generated by program TRIANGULATE.
The two input files are assumed to be in precise correspondence.  GPSFIT
applies B. Horn's closed-form least-squares fitting procedure to compute
the global rotation, translation and scaling needed to transform the
bundler camera path into the GPS path.  It reports the average residual
between the transformed and measured paths.  This program also exports the
transformed path as a TDP and OSGA file.

*.  bundlerfunc::export_bundle_file() takes in a set of cameras within
*photogroup_ptr and a set of 3D points plus their 2D image plane
projections in *FeaturesGroup_ptr.  It exports a bundle.out file in Noah's
bundler (as opposed to world) coordinate system.

============================================================================
BEAST code changes made on Mon, Feb 25, 2013:

*.  mains/dime/PANELPKGS generates package files for WISP panorama panels.
The panoramas can subsequently be viewed via VIEW_WISP.

*.  mains/dime/VIEW_WISP is a variant of program NEW_FOV .  It's a testing
lab for instantiating, manipulating and displaying OBSFRUSTA.  It also
stands alone from any point cloud input.

============================================================================
BEAST code changes made on Fri, Feb 22, 2013:

*.  mains/dime/GENERATE_IMAGE_SIZES exports an image_sizes.dat file to
bundler_IO_subdir for a set of WISP panoramas.  Each panorama is assumed to
have a fixed, specified size in pixels.

*.  mains/dime/PANEL_MOVIES generates executable scripts which string
together individual wisp panel frames into AVI movies.

*.  Added land_sea colormap to data/OpenSceneGraph-Data/3D_colormaps/

......................

*.  Added mains/dime/packages to repository.

============================================================================
BEAST code changes made on Weds, Feb 20, 2013:

*.  Added JSON_filename member to PhotoServer class along with get method.

*.  PhotoServer class can now pass a graph to Michael's graph viewer which
is imported from a JSON file rather than from the Image database.

*.  Created new mains/machine_learning subdir.

*.  machine_learning/FANNTRAIN reads in some training data set in a format
that can be handled by the Fast Artificial Neural Network (FANN) library.
It exports the network's structure to a JSON file which can be displayed
via Michael Yee's Graph Viewer.  FANNTRAIN also calls FANN in order to
train the network's weight and bias terms.

============================================================================
BEAST code changes made on Tues, Feb 19, 2013:

*.  Added new machine_learning subdir to repository.

============================================================================
BEAST code changes made on Fri, Feb 15, 2013:

*.  mains/dime/CREATE_PANO_SCRIPT is a little utility program which we
wrote to generate a script to run the G99 Wisp360CalAssistant binary.  The
executable transforms raw WISP imagery into output 360 panorama JPG files.

*.  mains/dime/GENERATE_WISP_MOVIE reads in set of WISP jpg files.  It
converts each greyscale input image into RGB output image.  Horiz pixel
size of each output jpg file is restricted < 4000.  Resulting downsized,
colored WISP panos may be converted into a movie via mkmpeg4.

============================================================================
BEAST code changes made on Thurs, Feb 14, 2013:

*.  mains/geo/CAMGEOREG imports a georegistered TIF file generated from a
Google Earth screen shot plus ground control points.  It also takes in an
aerial video frame. CAMGEOREG extracts SIFT and ASIFT features via calls to
Lowe's SIFT binary and the affine SIFT library.  Consolidated SIFT & ASIFT
interest points and descriptors are exported to key files following Lowe's
conventions.  CAMGEOREG next performs tiepoint matching via homography
estimation and RANSAC on the consolidated sets of image features.  The
best-fit homography matrix and feature tracks labeled by unique IDs are
exported to output text files.

============================================================================
BEAST code changes made on Weds, Feb 13, 2013:

*.  mains/geo/CAMGEOREG matches aerial video frames to georegistered Google
Earth geotif files.  

============================================================================
BEAST code changes made on Mon, Feb 11, 2013:

*.  In sift_detector class, split
identify_candidate_feature_matches_via_fundamental_matrix() member function
into identify_candidate_feature_matches_via_Lowe_ratio_test() and 
identify_inlier_matches_via_fundamental_matrix().

*.  Created new mains/dime folder with README.wisp_processing.

============================================================================
BEAST code changes made on Thurs, Feb 7, 2013:

*.  Starting to finally get reasonable video frame stabilization for GEO
pass 15!

============================================================================
BEAST code changes made on Weds, Feb 6, 2013:

*.  Added member STL vector d_chi to homography class along with get
method.

*.  Trying to use homographies to generate better initial estimates for
GEO camera parameters.

============================================================================
BEAST code changes made on Tues, Feb 5, 2013:

*.  mains/geo/PARSE_SBA imports the refined structure from motion
parameters file generated by SBA-1.6.  It resets the cameras' intrinsic and
extrinsic parameters based upon the bundle-adjusted results.  It also
exports a "sparse 3D cloud" corresponding to the bundle-adjusted
triangulated points.

============================================================================
BEAST code changes made on Mon,  Feb 4, 2013:

*.  mains/plume/CALC_VOLUMES.cc now computes plume centroid radial distance
and height versus time since ignition.

============================================================================
BEAST code changes made on Fri, Feb 1, 2013:

*.  Added mains/pathplanning/README.pathfinder 

============================================================================
BEAST code changes made on Thurs, Jan 31, 2013:

*.  mathfunc::real_cubic_roots() implements the "general formula of roots"
for a cubic polynomial presented in
http://en.wikipedia.org/wiki/Cubic_function .  It returns either one or
three real roots within an STL vector.

*.  fundamental::seven_point_algorithm() now takes a bool
ignore_triple_roots_flag.  If true, this method returns a dummy -1 value if
its cubic polynomial has 3 instead of 1 real root.  For RANSAC purposes,
it's faster to call seven_point_algorithm() again rather than have to
identify inliers 3 times.

*.  Added sampson_error_flag member to sift_detector class along with set
method.  If this flag==true, sampson error distance rather than expensive
reprojection error distance is used to define fundamental matrix inliers.
RANSAC runs dramatically faster when sampson distance is employed.

*.  Removed dependence of our Makefile upon kakadu 3rd party libraries.

*.  Trying to remove dependence of our Makefile upon boost libraries.

*.  Updated mains/graphs/kmeans_clusters so that it's now hopefully
compatible with NNODES_POSN_LABELS & COMPONENTS_LEVELS_MAP typedefs in
graph_hierarchy class.

*.  ASIFT extracts features dramatically faster when multi-processing
multithreading is enabled!

============================================================================
BEAST code changes made on Weds, Jan 30, 2013:

*.  "Final" reasonable 4D plume evolution results generated for Nov 2012
Expt 2H.

.........................

*.  Changed default value for FLANN_flag from false to true in
sift_detector and image_matcher constructors.

*.  Fixed B_ptr memory leak in fundamental::parse_fundamental_inputs().

*.  Privatized decompose_fundamental_as_M_times_eUV(),
decompose_fundamental_as_eXY_times_M() and compute_linear_combo_det() in
fundamental class.

*.  Added two_determinant() and three_determinant() members to genmatrix
class for speed purposes.

*.  Trying to streamline matching of SIFT/ASIFT features.

============================================================================
BEAST code changes made on Tues, Jan 29, 2013:

*.  Refining 4D plume evolution results for Nov 2012 Expt 2H.

============================================================================
BEAST code changes made on Mon, Jan 28, 2013:

*.  Getting close to generating final 4D plume evolution movie for Nov 2012
Expt 2H.

============================================================================
BEAST code changes made on Sat, Jan 26, 2013:

*.  SMOKE_MASKS now performs subtraction comparisons between video frames
separated by i_step=10 rather than i_step=30.  For Nov 2012 Expt 2H, this
should provide 3 "t<0" video frames to establish VIBE background model.

============================================================================
BEAST code changes made on Fri, Jan 25, 2013:

*.   Added set_pixel_hsv_values() to texture_rectangle class.

*.  mains/plume/SMOKE_MASKS employs the ViBe background subtraction
algorithm in order to classify pixels as "smoke" or "non-smoke" for t > 0
plume images.  By varying the ViBe radius threshold, we generate
increasingly strict "smoke" classes.  SMOKE_MASKS eliminates small
connected components whose number of pixels is less than a
min_n_pixels_per_cluster threshold whose value varies with the Vibe radius
threshold.  After the multiple masks are consolidated, median filling is
performed to minimize small holes in smoke plumes (caused by foreground
occluders).

*.  SMOKE_MASKS now performs subtraction comparisons between video frames
separated by i_step=30 rather than i_step=1.  Decelerating plume is now
less likely to be classified as "background".

============================================================================
BEAST code changes made on Thurs, Jan 24, 2013:

*.  texture_rectangle::RandomNeighborCoordinates() takes in pixel coords
(px,py) and returns the coords for some random 8-neighbor.  This method
performs brute-force checks to ensure the neighbor exists within 0 <=
px_neighbor < width and 0 <= py_neighbor < height.

*.  connected_components::count_all_cc_pixels() works with
*cc_twoDarray_ptr which is assumed to have previously been filled
with integer valued connected component labels.  It scans through
*cc_twoDarray_ptr and counts the number of pixels associated with
each distinct cc label.  Results are returned within member
*labels_map_ptr.  

*.  mains/tracking/SMOKE_MASK employs the ViBe background subtraction
algorithm in order to classify smoke vs non-smoke pixels in t > 0 plume
images.  After ViBe classification is performed, SMOKE_MASK eliminates
small connected components within the resulting masks.  It also performs
recursive filling in order to eliminate small holes surrounded by oceans of
smoke pixels.

============================================================================
BEAST code changes made on Weds, Jan 23, 2013:

*.  mains/tracking/VIBE implements the background subtraction algorithm
from O. Barnich and M.V. Droogenbroeck, "ViBe: A Universal background
subtraction algorithm for video sequences, IEEE Trans Image Processing 20
(6), 1709-1724, June 2011.

============================================================================
BEAST code changes made on Tues, Jan 22, 2013:

*.  Fixed several memory leaks in mains/plume/DBVOLUME.

.................

*.  Updated remaining PLUME programs to handle fieldtest_ID=2.

.................

*.  Starting to generate quasi-reasonable final 3D movie results for Nov
2012 Expt 2H.

============================================================================
BEAST code changes made on Fri, Jan 18, 2013:

*.  mains/geo/PARSE_SSBA imports the refined structure from motion
parameters file generated by SSBA-3.0.  It resets the cameras' intrinsic
and extrinsic parameters based upon the bundle-adjusted results.  It also
exports a "sparse 3D cloud" corresponding to the bundle-adjusted
triangulated points.

============================================================================
BEAST code changes made on Thurs, Jan 17, 2013:

*.  DBVOLUME is starting to generate reasonable results for t=300 time
slice for Nov 2012 Expt 2H plume reconstruction.  As of now, we discard 2
of 10 cameras and take voxel smokiness threshold to equal 0.3 to 0.5.  We
also use geometrical mean averaging to convert smokiness mask values into
single voxel smokiness value.

......................

*.  mains/plume/SETPARAMS tries to implement Will Lawrence's idea for
identifying a prefered voxel smokiness threshold.  For a specified time
slice, this program loops over smokiness threshold values ranging from 0.5
to 0.95.  It computes and plots reconstructed plume volume as a function of
this threshold setting.  Perhaps the plot exhibits a "knee" in the
otherwise monotonically decreasing function of voxel smokiness threshold.

============================================================================
BEAST code changes made on Weds, Jan 16, 2013:

*.  In mains/plume/VIEWTRIPODS, ALRT grid now has constant size independent
of cloud's bounding box.

*.  Added some user-friendly instructions for running program PATHFINDER.

============================================================================
BEAST code changes made on Tues, Jan 15, 2013:

*.  Generalized mains/plume/DBVOLUME so that it can work with video results
from Nov 2012 Expt 2H.

......................

*.  Renamed mains/plume/TEMPORAL_MOSAICS as TEMPORAL_COMPOSITES.

*.  plumedatabasefunc::retrieve_extremal_slice_IDs_from_database() searches
the photos table in the plume database for the min and max time slice
numbers.

============================================================================
BEAST code changes made on Mon, Jan 14, 2013:

*.  Generalized mains/plume/GENERATE_MONTAGE_AVIS and DBVISIBILITY so that
they can work with video results from Nov 2012 Expt 2H.

============================================================================
BEAST code changes made on Fri, Jan 11, 2013:

*.  mains/plume/MATLAB_BINARY_2_IMAGE reads in binary MATLAB files
generated by Joe Isaacson containing mask information for Nov 2012
experiments.  It parses each binary file and exports a corresponding JPG.

*.  arrayfunc::parse_binary_shorts_file() imports a binary file which is
assumed to be filled with xdim*ydim 2-byte short integers.  It instantiates
a twoDarray and fills it with values read in from the binary file after
they are multiplied by magnitude_factor.  The dynamically instantiated
twoDarray is returned by this method.

============================================================================
BEAST code changes made on Thurs, Jan 10, 2013:

*.  mains/geo/TRIANGULATE now exports initial camera params to
bundle.out file in Noah's coord system.

................

*.  Renamed mains/plume/GENERATE_TIMESLICE_DIRS as POPULATE_TIMESLICE_DIRS.

============================================================================
BEAST code changes made on Weds, Jan 9, 2013:

*.  stringfunc::string_to_long() takes in an inputstring which we assume
contains an integer with up to 19 digits.  This method returns its long (8
byte) integer equivalent.

============================================================================
BEAST code changes made on Tues, Jan 8, 2013:

*.  mains/plume/GENERATE_TIMESLICE_DIRS generates a set of soft-links which
convert a set of t>0 plume images organized according to camera ID to a new
set organized according to time slices.  We wrote this utility in order to
convert the format of Will Lawrence's set of Nov 2012 Day2H video frames
into that needed by LOAD_PHOTO_METADATA.

*.  Added -lopencv_nonfree to config/Makefile_VMware

..............

*.  camera::convert_world_to_bundler_coords() works with the current
extrinsic parameters contained in *this.  It transforms their values from
world coordinates back into Noah's original coordinate system in which
results are reported in bundle.out.

============================================================================
BEAST code changes made on Mon, Jan 7, 2013:

*. Added mains/plume/GE_REGISTRATION to repository.

...................

*.  Generalized mains/plume/ARCHIVE_CAMERA_PARAMETERS to distinguish
between video and SLR cameras.

============================================================================
BEAST code changes made on Fri, Jan 4, 2013:

*.  OBSFRUSTAGROUP::adjust_frustum_angles() takes in small offsets in
azimuth, elevation and roll angles.  It destroys the OBSFRUSTUM specified
by the input ID and builds a new one with adjusted angles.

*.  In Movie::set_camera_ptr(camera* c_ptr), replaced initial lines with
call to Movie::destroy_cameras_for_images().

*.  In mains/china/NEW_FOV, we can now interactively adjust the az, el and
roll of a single OBSFRUSTUM by pressing u,i,j,k,m and comma keys.

============================================================================
BEAST code changes made on Thurs, Jan 3, 2013:

*.  mains/plume/SENSOR_POSNS now displays the locations of 4x3=12 wooden
posts on the South Carolina experiment site.

*.  OBSFRUSTAGROUP::draw_ray_through_imageplane() returns a linesegment
whose V1 vertex corresponds to the specified OBSFRUSTUM's camera position
and V2 vertex corresponds to the unit ray from the camera position along
the ray through the image plane.

*.  mains/plume/VIEWTRIPODS is a specialized version of
photosynth/VIEWBUNDLER which we use to view reconstructed (and preferably
georegistered) tripod camera frusta, tripod camera SignPost labels and
South Carolina wood post locations.

============================================================================
BEAST code changes made on Weds, Jan 2, 2013:

*.  Altered mains/plume/SURVEY_CAMERA_POSNS.cc so that its hardwired South
Carolina truth data is appropriate for the Nov 2012 experimental campaign.
Copied previous version onto survey_camera_posns_Nov2011.cc

============================================================================
BEAST code changes made on Fri, Dec 21, 2012:

*.  genmatrix::export_to_dense[sparse]_text_format() writes the current
genmatrix to an output file following the formats used by the SVDLIBC
library.  See http://tedlab.mit.edu/~dr/SVDLIBC/

*.  mains/geo/TRIANGULATE imports SIFT/ASIFT feature tracks generated by
program ASIFTVID.  It also takes in package files for the n video frames
processed by ASIFTVID which contain hardware-based camera parameters.
TRIANGULATE backprojects each 2D feature into a 3D ray.  It then computes
multi-line intersection points for each feature track.

============================================================================
BEAST code changes made on Weds, Dec 19, 2012:

*.  Trying to extract SIFT, FREAK and ASIFT features for >= 2 images just
once.  Trying to match cumulative set of features in pairwise combinations.

============================================================================
BEAST code changes made on Mon, Dec 3, 2012:

*.  All C++ programs seem to build OK on BEAST as of 12:40 pm on Mon, Dec
3.

..................

*.  Renamed mains/utility/rename_images.cc as regularize_image_names.cc

============================================================================
BEAST code changes made on Mon, Nov 19, 2012:

*.  Added mains/aerosynth/README.Qinetic_demo to repository.

============================================================================
BEAST code changes made on Fri, Nov 16, 2012:

*.  Clipping::classify_candidate_foliage_pixels() marks all green and black
colored pixels within *texture_rectangle_ptr.

============================================================================
BEAST code changes made on Fri, Nov 9, 2012:

*.  sift_detector::extract_harris_corners() takes in an image within
*texture_rectangle_ptr which is assumed to also exist in
*corners_texture_rectangle_ptr.  On the other hand,
*edges_texture_rectangle_ptr is assumed to have initialized with
some greyscale version of the input image.  This method computes
squared products of horizontal and vertical image derivatives at
each pixel location in the image.  It next computes response R of
the Harris corner detector at each pixel.  If R exceeds input
threshold R_min, the pixel is declared to be a corner.  Corner
pixel locations are returned within an STL vector of integer pairs.

============================================================================
BEAST code changes made on Tues, Nov 6, 2012:

*.  Included -DTOC12_LAPTOP_FLAG into CXX_FLAGS within
mains/TOC12/Makefile_TOC12_laptop.

*.  mains/TOC12/TANKSIGN_PROCESSOR now generates a JSON string containing
image filename, time stamp and tank sign posn rel to camera which can be
published to other ROS nodes.

*.  signrecogfunc::archive_all_but_latest_image_files() now checks if input
images are in ppm format.  If so, they are first converted into png files
and the original ppm files are deleted.

============================================================================
BEAST code changes made on Mon, Nov 5, 2012:

*.  mains/TOC12/PG_RECOG_PROCESSOR executes an infinite while loop.  It
constantly imports the next-to-latest image file residing within
input_images_subdir.  It moves all other images in input_images_subdir to a
time-stamped archive subdirectory.  PG_RECOG_PROCESSOR generates text file
output containing TOC12 sign positions relative to the instantaneous camera
versus local computer time.

...........

*.  Commented out TOC12_LAPTOP_FLAG preprocessing conditionals from
videofuncs, signrecogfuncs and pngfuncs namespaces now that we have
libpngwriter successfully installed on Minitaur TOC12 basestation laptop.

............

*.  PG_RECOG_PROCESSOR now annotates colored TOC12 sign bboxes with labels
on base station laptop.

*.  Significantly refactored TANK_SIGNS and TANKSIGN_PROCESSOR by moving
many lines of code into signrecogfuncs namespace.

============================================================================
BEAST code changes made on Sun, Nov 4, 2012:

*.  signrecogfunc::get_Pointgrey_calibration_params() returns focal length
and curvature parameters based upon checkerboard measurements analyzed via
Caltech matlab codes.

*.  Programs TANK_SIGNS and PG_RECOG now utilize camera dependent
calibration parameters based upon specified PointGrey camera IDs.

................

*.  mains/TOC12/TANKSIGN_PROCESSOR executes an infinite while loop.  It
constantly imports the next-to-latest image file residing within
input_images_subdir.  It moves all other images in input_images_subdir to a
time-stamped archive subdirectory.  TANKSIGN_PROCESSOR generates text file
output containing tank position relative to the instantaneous camera versus
local computer time.

============================================================================
BEAST code changes made on Fri, Nov 2, 2012:

*.  Removed version number from -I/usr/local/include/activemq-cpp entry in
Makefile and added link from /usr/local/include/activemq-cpp-2.0.1 to
/usr/local/include/activemq-cpp

.................

*.  Added more liberalized color tables from src/colors to repository

.................

*.  signrecogfunc::compute_relative_bbox_position() takes in the separation
distance between opposite corners of a 2D bounding box measured in 3D
space.  For TOC12 signs, this diagonal distance = 1.724 meters.  For the
17"x22" tank sign, the diagonal distance between opposite centers of the
colored cells = 0.289 meters.

It computes the 3D rays corresponding to the bounding box's opposite
corners.  This method computes the range to the TOC12 sign which we
approximate as equaling the separation distance divided by the angle
between the two 3D rays.  It sets the TOC12 sign's position relative to the
camera equal to the range multiplied by the average of the two opposite
corners' 3D rays.


============================================================================
BEAST code changes made on Thurs, Nov 1, 2012:

*.  mains/TOC12/PG_RECOG is starting to yield reasonable colored sign
detection results for Tennis bubble imagery gathered by PointGrey camera!

*.  Starting to compactify PG_RECOG by utilizing methods and variables in
signrecogfuncs namespace.

*.  signrecogfunc::identify_purple_interior_pixels() counts the number of
purple pixels inside the bounding box specified by input parameters
left_pu, right_pu, bottom_pv & top_pv.  If the current sign is the blue
radiation symbol, this boolean method returns false if the bounding box
contains too few purple pixels.  Otherwise, the method returns false if the
bounding box contains too many purple pixels.

*.  signrecogfunc::classify_dominant_colored_pixels() classifies the color
for every pixel within the bounding box specified by input parmaeters
left_pu, right_pu, bottom_pv and top_pv as "dominant" (e.g. orange for
biohazard sign) or "other".  It subsequently resets every "other" colored
pixel to the current sign's interior color.

============================================================================
BEAST code changes made on Weds, Oct 31, 2012:

*.  Updated RYCP threshold values in mains/TOC12/tank_signs.cc

============================================================================
BEAST code changes made on Tues, Oct 30, 2012:

*.  GENERATE_SYMBOL_IMAGES now superposes TOC12 image on random non-sign
internet pictures for some fraction of synthetic images.

*.  Trying to regenerate dictionaries and pooled features for all 9 final
TOC12 signs.

============================================================================
BEAST code changes made on Sat, Oct 27, 2012 & Sun, Oct 28, 2012:

*.  camerafunc::radially_undistort_image() implements a minor variant of
Noah Snavely's RadialUndistort program.  It imports intrinsic camera
calibration parameters and exports radially undistorted versions of input
video frames.

*.  Updated mains/TOC12/ALL_SIGNS to search for final set of 9 TOC12 signs

============================================================================
BEAST code changes made on Thurs, Oct 25, 2012:

*.  mains/TOC12/UNDISTORT is a minor variant of Noah's RadialUndistort
program.  It uses calibration parameters for the PointGrey video cameras
which will be mounted on the airship and ground tank robots.  It outputs
radially undistorted versions of input video frames.


============================================================================
BEAST code changes made on Weds, Oct 24, 2012:

*.  mains/TOC12/AERIAL_CAMERA_CALIB tries to calibrate PointGrey camera
using homography computed from planar tank sign.

============================================================================
BEAST code changes made on Tues, Oct 23, 2012:

*.  TANK_SIGNS is starting to locate 6 colored dots within planar 10th TOC
sign.

============================================================================
BEAST code changes made on Mon, Oct 22, 2012:

*.  Starting to write mains/TOC12/TANK_SIGNS to look for
cooperatively-created colored triangle signs atop tank robot.

============================================================================
BEAST code changes made on Sat, Oct 20, 2012:

*.  Converted ppt_subdir --> final_subdir in all TOC12 Ng-Coates classifier
main programs.

============================================================================
BEAST code changes made on Fri, Oct 19, 2012:

*.  mains/TOC12/ALL_SIGNS.cc can now start to identify all 9 TOC12 signs
within an input image stream.

============================================================================
BEAST code changes made on Thurs, Oct 18, 2012:

*.  Started moving code out of mains/TOC12/black_signs into signrecogfuncs
namespace.

============================================================================
BEAST code changes made on Weds, Oct 17, 2012:

*.  Created specialized signrecogfuncs namespace and started moving code
out of main TOC12 symbol search programs into this new namespace.

..................

*.  Moved signrecogfuncs namespace into src/classification

============================================================================
BEAST code changes made on Tues, Oct 16, 2012:

*.  Added bbox_polygon member to extremal_region class along with set/get
methods.

*.  Eliminated highly problematic bounding_box bbox member from
extremal_region class.

*.  Program BLACK_SIGNS can now start to place coarse bounding boxes around
black TOC12 signs.  It also calls Ng classification in order to nominate
final set of black sign bboxes.

============================================================================
BEAST code changes made on Mon, Oct 15, 2012:

*.  Can start to associate neighboring dark and bright regions within
BLACK_SIGNS program.

============================================================================
BEAST code changes made on Thurs, Oct 11, 2012:

*.  Made more incremental modifications to mains/TOC12/BLACK_SIGNS in order
to find adjacent black and white regions.

============================================================================
BEAST code changes made on Mon, Oct 8, 2012:

*.  extremal_region::compute_border_pixels() takes in a border_thickness
parameter which is measured in pixels.  Looping over all entries within
RLE_pixel_IDs, it sets the corresponding pixel value within
*cc_twoDarray_ptr equal to cc_value.  It also sets all neighboring pixels
whose values do not already equal cc_value to border_value.  This method
returns an STL vector containing the extremal region's border pixel IDs.
Border pixels lie outside the extremal region.

*.  Moved MSER methods out of videofuncs into new src/video/mserfuncs
namespace.

*.  extremal_region::coalesce_touching_regions() takes in *cc_twoDarray_ptr
which is assumed to be filled with connected component IDs > 0. We first a
UnionFind datastructure with the IDs for all extremal regions within input
*extremal_region_map_ptr.  Looping over all pixels in *cc_twoDarray_ptr, we
next associate pairs of extremal regions if the border region of one
contains pixels that lie inside of the other.  This method returns a
compactified extremal_regions map which effectively contains the union of
all the input extremal regions.

============================================================================
BEAST code changes made on Fri, Oct 5, 2012:

*.  mains/TOC12/SIGN_RECOG now downsizes any input image with xdim >= 1000
or ydim >= 600.  Also starting to incorporate B&W skull and eat signs into
SIGN_RECOG.

*.  mains/utility/RENUMBER_IMAGES is a quick-n-dirty utility to replace
image files of the form "basename_1.jpg" by "basename_0001.jpg".

*.  Updated mains/TOC12/BLACK_SIGNS so that it more closely matches
current version of SIGN_RECOG.

============================================================================
BEAST code changes made on Thurs, Oct 4, 2012:

*.  mains/TOC12/LINK_SYMBOL_IMAGES loops over all 9 TOC12 signs.  For each
one, it generates links to the other 8 signs.  We wrote this utility
program in order to train the Ng classifier on negative examples of symbols
to hopefully reduce false alarms.

============================================================================
BEAST code changes made on Weds, Oct 3, 2012:

*.  mains/geo/VIDEO_PROPAGATOR and SAR_PROPAGATOR are prototype demos for
macheta algorithm evaluation purposes.

============================================================================
BEAST code changes made on Tues, Oct 2, 2012:

*.  mains/geo/GENERATE_SAR now simulates 6 actual SAR targets under HAFB
trees as well as random noise.  Resulting synthetised SAR images look
reasonable.

..................

*.  mains/geo/ANALYZE_SAR works with synthetic SAR images exported by
program GENERATE_SAR.  It searches for hot-spots and wraps bounding boxes
around them.  Bbox centroids are then backprojected into frusta
corresponding to the synthetic SAR images.  ANALYZE SAR exports a text file
containing rays from frusta vertices to the Z=0 ground plane which can be
imported by program PROPAGATOR.  Rays should generally intersect around 3D
locations corresponding to genuine SAR signal locations.

*.  mains/TOC12/GENERATE_SYMBOL_IMAGES now generates simulated TOC12 signs
with saturations and values ranging from 0.5 to 1.

============================================================================
BEAST code changes made on Mon, Oct 1, 2012:

*.  In mains/TOC12/SIGN_RECOG, Ng classification thresholds are now TOC12
sign depenendent.

*.  Added display_range_alt_flag bool member to FeaturesGroup class along
with set method.

*.  text_detector::import_image_from_file() no longer performs any RGB ->
greyscale conversion.

*.  Experimenting with altering sat and value in GENERATE_SYMBOL_IMAGES

............

*.  mains/geo/GENERATE_SAR is a playground for simulating SAR imagery which
can be inserted as 3D frusta in the HAFB ALIRT map.

============================================================================
BEAST code changes made on Sat, Sep 29, 2012:

*.  Recalculating Ng dictionaries for TOC12 ppt signs.

============================================================================
BEAST code changes made on Fri, Sep 28, 2012:

*.  sift_detector::raw_match_OpenCV_FREAK_features() calls OpenCV methods
which compute UV image plane interest points as well as FREAK descriptors.
UV coordinates are returned within STL vectors keypoints1 and keypoints2.
FREAK descriptors are returned within STL vector matches.

*.  sift_detector::color_prune_FREAK_matches() takes in UV imageplane
keypoints and FREAK descriptors.  For each candidate UV tiepoint pair, this
method compares RGB values.  For video frames spaced close in time, we
expect RGB values at genuinely matching keypoints to be fairly close.  So
we eliminate any putative FREAK matches whose separation in RGB color space
exceeds some threshold.  The surviving FREAK matches are returned within
updated STL vectors keypoints_1 and keypoints_2.

*.  mains/geo/TIEVID is a playground for experimenting with finding 2D
tiepoints between fairly similar video frames.

*.  Added Ng classification into mains/TOC12/SIGN_RECOG.  Ng
classification for multiple TOC12 signs is starting to work.

========================================================
BEAST code changes made on Thurs, Sep 27, 2012:

*.  GENERATE_SYMBOL_IMAGES now automatically loops over all TOC12 symbols.

*.  Reworked Ng TOC12 programs to work with ppt_signs images.

.......................

*.  Cleaned up mains/plume/LOAD_PHOTO_METADATA.cc

*.  Added mains/plume/THUMBNAILS to cheat sheet #4

.......................

*.  Eliminated hard-wired mask height and width from
mains/plume/TEMPORALLY_FILTER_MASKS.

========================================================
BEAST code changes made on Weds, Sep 26, 2012:

*.  Added -lopencv_nonfree to Makefile link list.  Can now work with OpenCV
Sift[Surf]FeatureDetectors.

*.  sift_detector::compute_OpenCV_SIFT_features() calls OpenCV methods which
compute UV image plane interest points as well as 128-dimensional SIFT
descriptors.  On 9/26/12, we empirically found that this method runs
slightly faster than Lowe's binary (which involves writing/reading text
files).  But it may not yield as many good SIFT keypoints as Lowe's binary.

========================================================
BEAST code changes made on Tues, Sep 25, 2012:

*.  Added README.RecordMyDesktop to repository.

*.  Added purple_interior_flag entry to SIGN_PROPERTIES structure.

*.  In RGB_analyzer class, added quantized_colors_map member which holds
quantized_color_vector_ptrs as a function of liberalized color names.

*.  SIGN_RECOG is starting to nominate multiple colored TOC12 signs per
input image.

========================================================
BEAST code changes made on Mon, Sep 24, 2012:

*.  mains/TOC12/SIGN_RECOG is a main pgm which takes in sets of input video
frames and searches for all 9 TOC12 ppt signs within them.

========================================================
BEAST code changes made on Fri, Sep 21, 2012:

*.  Added bounding_box member to extremal_region class.

*.  In FIND_COLORED_SIGNS, set reasonable parameters for orange biohazard
and red stop signs.  

.................

*.  Bbox nomination for all 9 TOC12 signs is becoming quasi-reasonable.

========================================================
BEAST code changes made on Thurs, Sep 20, 2012:

*.  videofunc::extract_MSERs() takes in an image and calls the Oxford MSER
linux binary which outputs RLE runs for locally dark and bright maximally
stable extremal regions.  This method decodes the MSER linux binary output
and instantiates extremal region objects which are returned in STL vectors.

*.  videofunc::update_MSER_twoDarray() takes in STL vectors containing
locally bright and dark maximally stable extremal regions.  It sets bright
[dark] MSER pixels equal to region_ID [p_dark] within the ptwoDarray member
of *mser_texture_rectangle_ptr.

*.  videofunc::draw_MSERs() draws locally bright [dark] pixels as red [blue] in
in *mser_texture_rectangle_ptr.

*.  mains/TOC12/BLACK_SIGNS is a playpen for experimenting with nominating
TOC12 skull and eat ppt sign regions based primarily upon their color and
edge contents.

========================================================
BEAST code changes made on Weds, Sep 19, 2012:

*.  mains/TOC12/MSERS calls the Oxford MSER linux binary and parses its RLE
output.


========================================================
BEAST code changes made on Tues, Sep 18, 2012:

*.  In PassesGroup::generate_passes_from_arguments(), loop index r and ID
now start at get_n_passes() rather than 0.  

*.  Overhauled mains/plume/SELECT_FIXED_TRIPODS so that it no longer
assumes tripod photos correspond to first subset among all images.

..............

*.  imagefunc::compute_gradient_steps() takes in horizontal and vertical
partial derivative fields.  It computes the gradient at each pixel location
and ignores any whose magnitude lies below grad_mag_threshold. This method
then computes a "stepped" pixel location which resides step_distance away
from the gradient's base position along its direction vector.  It returns
an STL map containing pixel_ID vs stepped_pixel_ID.

*.  RGB_analyzer::identify_all_greyish_pixels() loops over all pixels within
*texture_rectangle_ptr and retrieves their quantized color indices.  If a
pixel's quantized color is sufficiently close to "grey", this method resets
the pixel's color to R_grey,G_grey,B_grey.

========================================================
BEAST code changes made on Thurs, Sep 13, 2012:

*.  mains/plume/SELECT_FIXED_TRIPODS reads in a set of georegistered
package files corresponding to fixed tripod cameras.  It also imports
surveyed camera positions from a text file generated by program
GEOREGISTER_CAMERAS.  SELECT_FIXED_TRIPODS visualizes the candidate
georegistered cameras as selectable view frusta and their surveyed
positions as 3D "signposts".  When a user doubleclicks on any view frustum,
its corresponding image and package filenames are displayed in the terminal
window.

...................

*.   In imagefunc::horiz_derivative_filter() and vert_derivative_filter(),
last argument is now null_value rather than dx/dy.

...................

*.  Edge detection may be promising for black/white TOC12 signs.


========================================================
BEAST code changes made on Weds, Sep 12, 2012:

*.  Trying to intelligently nominate black TOC12 sign regions.  

========================================================
BEAST code changes made on Tues, Sep 11, 2012:

*.  Replaced RGBI_lookup_map_ptr member of RGB_analyzer class with
quantized_color_lookup_vector_ptr.  Loading of 16M quantized colors now
occurs noticeably faster.  

*.  Cleaned up RGB analyzer class and eliminated unnecessary members.

*.  Color-based and significant hole nomination of yellow radiation and
blue water TOC12 signs is starting to really work!

========================================================
BEAST code changes made on Mon, Sep 10, 2012:

*.  Color-based nomination of yellow radiation TOC12 sign is starting to
look hopeful!

========================================================
BEAST code changes made on Fri, Sep 7, 2012:

*.  texture_rectangle::find_perimeter_seeds() takes in horizontal pixel run
information for a particular extremal region as well as its connected
component binary mask.  It searches for perimeter pixels that lie precisely
outside the connected component.  This method computes the average RGB for
all perimeter pixels.  All perimeter pixels whose RGB values are reasonably
close to the average are then returned within STL vector perim_seeds.

*.  Tuned various threshold parameters called by LOCATE_SYMBOLS in order to
improve PD/FA performance.

*. texture_rectangle::find_interior_median_RGBs() takes in extremal region
*extremal_region_ptr.  After decoding its run-length encoded pixels, this
method computes and returns the median R, G and B values for all pixels
lying inside the region's interior.

========================================================
BEAST code changes made on Thurs, Sep 6, 2012:

*.  Trying to improve LOCATE_SYMBOLS ability to find TOC12 ppt signs in
cluttered environments. 

========================================================
BEAST code changes made on Weds, Sep 5, 2012:

*.  Generalized object_prob member in extremal_region class to STL map.

*.  connected_components::find_stable_extremal_regions() loops over all
leaf nodes within member *tree_ptr.  From each leaf node, it climbs
vertically towards the tree's root node.  For each extremal region along
the way, it compares pixel widths, heights and number of holes.  If these
quantities vary too much in the vertical direction, the extremal region is
NOT regarded as stable.  This method returns an STL vector containing
pointers to stable tree nodes.

*.  Trying to generalize LOCATE_SYMBOLS so that it searches for all 9 TOC12
ppt symbols within each input image.


========================================================
BEAST code changes made on Tues, Sep 4, 2012:

*.  Shape recognition of ppt TOC12 symbols starting to show some hope after
new classifier funcs were generated today.

========================================================
BEAST code changes made on Fri, Aug 31, 2012:

*.  texture_rectangle::minutely_perturb_RGB_values() adds small random
fluctuations to R=G=B color values in order to force them to be unequal.
We wrote this method in Aug 31 to avoid black & white images from turning
into 8-bit greyscale rather than 24-bit RGB JPGs.

*.  Generalizing TOC12 symbol recognition codes to work with ppt signs.

========================================================
BEAST code changes made on Thurs, Aug 30, 2012:

*.  Modified osgClipping/Clipping::update_display() s.t. it can generate
rectified facade decals for a set of input images without user interaction.

*.  texture_rectangle::convert_color_image_to_luminosity() forms and
returns a particular linear combination of the R,G,B values for each pixel
which corresponds to "luminosity".

========================================================
BEAST code changes made on Weds, Aug 29, 2012:

*.  In Clipping::project_clipped_polygons_into_imageplane(),
texture_rectangle_ptr is deleted near the start of this member function.
So we do NOT need to delete its RGBA twoDarrays at the end of this
method.

*.  VolumetricCoincidenceProcessor::compute_counts_sum() iterates over all
voxels and returns the integral of their counts.

*.  Clipping::generate_candidate_sky_colors() first forms an
8x8x8 VCP grid.  It then loops over all pixels within
*buildings_texture_rectangle_ptr and extracts RGB values from pixels
located above building rooftops.  Quantized RGB values are accumulated
within *VCP_ptr.  After renormalizing the VCP's counts and converting them
into probabilities, this method finds all voxels with probabilities
exceeding a minimal threshold.  The RGB values of these candidate sky
voxels are returned within an output STL vector.

*.  Sky detection based upon building rooftop pixel seeding followed by RGB
floodfilling is starting to work on nontrivial MIT2317 images.

========================================================
BEAST code changes made on Tues, Aug 28, 2012:

*.  Generalized mains/imagesearch/TEMPORAL_LAYOUT s.t. sinusoidal period
can range from minutes to days.


========================================================
BEAST code changes made on Mon, Aug 27, 2012:

*.  Ng filtering of text characters seems to work OK (but certainly not
perfect!)

*.  graphfunc::generate_graph_from_edgelist() now explicitly checks if
node_ID_1 != node_ID_2 and edge weight >= 0 before calling
graph::add_graph_edge().  This method can now handle graphs containing a
single node and no edges.

*.  mains/graphs/GENERATE_SINGLETON_CLUSTERS now writes out
connected_edgelist_CXX.dat files containing the single node ID (repeated
twice) along with a -1 edge weight.  It also now creates a
graph_XY_coords_CXX.fm3_layout file containing gx=gy=0.5 graph coordinates
for the single node.

*.  Fixed logic bugs in mains/imagesearch/TEMPORAL_LAYOUT.

========================================================
BEAST code changes made on Sat, Aug 25, 2012:

*.  Updated mains/imagesearch/text_recognition/POOL_FEATURES.cc

*.  Added mains/imagesearch/AIPR12/charts.notes to repository

*.  mains/graphs/GENERATE_SINGLETON_CLUSTERS reads in cluster text files
generated by the Markov Clustering Algorithm (MCL).  It first finds the
maximum child node ID.  GENERATE_SINGLETON_CLUSTERS then rescans all the
cluster text files and identifies those nodes whose IDs are absent.  These
correspond to images which Bundler never included into any SIFT match pair.
This program exports level_0l_clusters_CXX.dat files (for level l=1 and 2)
which includes a single singleton node ID entry.

========================================================
BEAST code changes made on Thurs, Aug 23, 2012:

*.  Eliminated descriptors.cc, whiten_descriptors.cc and dictionary.cc from
mains/TOC12 in favor of symbol_descriptors.cc, whiten_symbol_descriptors.cc
and symbol_dictionary.cc . 

========================================================
BEAST code changes made on Tues, Aug 21, 2012:

*.  RGB color versions of TOC12 Ng routines completely fails for radiation1
sign detection.  So we revert for now back to working with greyscale
imagery.

*.  Relatively good radiation1 sign detection with red-channel greyscale
imagery obtained after training Ng classifier with 10K positive and 80K
negative examples.

========================================================
BEAST code changes made on Mon, Aug 20, 2012:

*.  Updated Makefile_VMWARE

..........................

*.  text_detector::compute_constant_matrices() fills *B_ptr =
inverse_covar_sqrt^T * dictionary and *A_ptr = mu^T * (*B_ptr). 

..........................

*.  Renamed mains/modeling/EXTRACT_IMAGESNAMES as MAP_VSFM_IMAGENAMES.

.........................

*.  Reworked TOC12 Ng programs so that they can easily handle input
greyscale and RGB color images.  Greyscale images with 1024 dictionary
features and 50K negative examples yields slightly fewer false alarms for
radiation1 video sequences.

========================================================
BEAST code changes made on Sat, Aug 18, 2012:

*.  Eliminated D_ptr genmatrix member from text_detector class in favor of
lighter, faster Dictionary_ptr FLANN matrix member.

*.  Tried to streamline text_detector::average_window_features() in order
to make POOL_SYMBOL_FEATURES to run faster.  Haven't yet considered
"convolution" approach mentioned by Geoff Brown in past.

========================================================
BEAST code changes made on Fri, Aug 17, 2012:

*.  Generalized mains/TOC12/GENERATE_SYMBOL_IMAGES to output colored TOC12
signs against randomly colored backgrounds.  This program can also export
blank colored signs for negative Ng training set purposes.

*.  Added src/math/ltduple.h which is an integer version of lttwovector.h.

..............

*.  In text_detector class, eliminated twovector in favor of integer DUPLE
objects for speed purposes.

*.  In text_detector::compute_patch_histogram(), extremely slow assignment
line found.  But after several hours of debugging, we have no understanding
why this line is so slow !!!

========================================================
BEAST code changes made on Thurs, Aug 16, 2012:

*.  Added several symbol versions of Ng-Coates programs to TOC12 mains
subdir.

*.  Ng-Coates classification of radiation1 sign is partially working.

========================================================
BEAST code changes made on Weds, Aug 15, 2012:

*.  mains/modeling/PROPAGATOR now exports original imageplane UV and
absolute UTM coordinates for building facet corners to metadata text files.

*.  mains/modeling/FACADE_WARP is a playground for warping an MIT2317 of
the medical center containing no people onto a counter part image which
does contain people.  It reads in orthorectification metadata generated by
PROPAGATOR for the two images.  FACET_WARP then applies the homography that
maps the no people to people image.  It exports a mask of the warped no
people image corresponding to just background static building facades.

*.  texture_rectangle::find_perimeter_seeds() decodes the pixels
corresponding to input *extremal_region_ptr into *cc_twoDarray_ptr.  It
next computes the distance transform for the binary mask in
*cc_twoDarray_ptr.  This method classifies pixels within the mask as
interior if their distance transform is small, exterior if their distance
transform is large, and perimeter otherwise.  It computes the average RGB
for all perimeter pixels.  All perimeter pixels whose RGB values are
reasonably close to the average are then returned within STL vector
perim_seeds.

*.  texture_rectangle::update_symbol_bbox() takes in pixel coordinates for
some seed location.  If the seed's color already matches new_R,new_G,new_B,
this method returns.  Otherwise, it flood-fills all pixels around the seed
whose RGB values are globally close to the seed's and whose differential
RGB changes are relatively small.  The input bounding box *symbol_bbox_ptr
is updated by each returned flood-filled pixel's image location.

*.  Renamed mains/TOC12/SYMBOLS2PNGS as LETTERS2PNGS.  

*.  New GENERATE_SYMBOL_IMAGES works with TOC12 words rather than
individual letters.

========================================================
BEAST code changes made on Tues, Aug 14, 2012:

*.  colorfunc::color_match() returns true if the Euclidean distance
between (R1,G1,B1) and (R2,G2,B2) is less than threshold.

*.  Implemented seed perimeter pixel picking for extremal symbol regions.

*.  Symbol region bbox placement is starting to (barely) work.

========================================================
BEAST code changes made on Mon, Aug 13, 2012:

*.  Added bbox_color member to bounding_box class along with set/get
methods.

*.  Incorporated Lode's computer graphics tutorial methods into
texture_rectangle class.

*.  Boolean texture_rectangle::color_match() returns true if the Euclidean
distance between (R,G,B) and (old_R,old_G,old_B) is less than
threshold.

*.  mains/TOC12/FLOODFILL is a playpen for experimenting with identifying
nearby, similarly-colored regions within an input image.

========================================================
BEAST code changes made on Thurs, Aug 9, 2012:

*.  Copied over several programs from imagesearch/text_recognition to
TOC12.  Specialized these programs to work for multiple TOC12 sign
detection.

*.  Added new distance_transform subdir to src.

========================================================
BEAST code changes made on Weds, Aug 8, 2012:

*.  In compositefunc::regrid_twoDarray(), now explicitly check if mdim
and/or ndim == 1.  If so, set delta_x, delta_y to zero.


========================================================
BEAST code changes made on Tues, Aug 7, 2012:

*.  In texture_rectangle::set_pixel_RGBA_values(), changed m_image to
data_ptr.

*.  texture_rectangle::get_pixel_intensity_value() takes in integer pixel
coordinates (px,py) along with a byte array which is assumed to correspond
to a single-channel greyscale image.  It returns this pixel's intensity
value.

*.  mains/utility/CONVERT_GREY_IMAGE_TO_RGB queries the user to enter the
name for some 8-byte greyscale image.  It instantiates a texture_rectangle
object which converts the input 8-byte greyscale image to a nearly
identical 24-byte RGB image.  In order to force the output image to really
have 3 color channels, some small random fluctuations are added to all
non-zero valued pixels.

.................

*.  tree::size() now loops over levels from get_min_level() to
get_max_level() and not from 0 to n_levels-1.

*.  In mains/imagesearch/text_recognition/COMPUTE_SHAPE_DESCRIPTORS, now
explicitly check for NANs before writing features to output file.

========================================================
BEAST code changes made on Mon, Aug 6, 2012:

*.  Discarding n_horiz_crossings shape feature yields significantly more
false alarm bbox candidates.

*.  Added STL vector horiz_crossings member to extremal_region class.

*.  Number of horizontal crossings is now recursively calculated.

*.  mathfunc::median_value() is a brute-force version for just 3 input
integers.  

*.  Trying to streamline extremal region tree building and shape feature
evaluation methods in connected_components class to speed up candidate text
char detection.

*.  Candidate text bbox detections based upon shape features takes 14.2
secs for kermit image on BEAST.

........................

*.  Candidate text bbox detections based upon shape features takes 12.5
secs for kermit image on BEAST.

========================================================
BEAST code changes made on Fri, Aug 3, 2012:

*.  Added math/ltquadruple.h to repository.

*.  Eliminated fourvector in favor of quadruple in LOCATE_CHARS.

*.  extremal_region::compute_shape_text_prob() takes in a pointer to a
pretrained probabilistic classifier function generated by Davis King's DLIB
library.  It computes the probability that the shape for the current
extremal region corresponds to a text character.  If the shape probability
is less than the threshold specified below, this boolean method returns
false.

========================================================
BEAST code changes made on Thurs, Aug 2, 2012:

*.  Continued refining codes and cheat sheet #5 for plume project.

*.  Still more refining of codes and cheat sheet #5 for plume project.

..............

*.  Trying to work with extremal_region ptrs rather than treenode ptrs in
new version of LOCATE_CHARS

========================================================
BEAST code changes made on Weds, Aug 1, 2012:

*.  Euler number computation seems to be working within new fast extremal
region property computation approach.

*.  plumedatabasefunc::retrieve_slice_epoch_time_from_database() returns
the epoch time corresponding to the photos within the photos table of the
plume database specified by the input slice_number.

*.  Program INTERP_MISSING_SLICES imports the volumes_vs_timeslice.txt file
generated by program CALC_VOLUMES.  It searches for missing reconstructions
at isolated time slices.  (For example, if too few tripod camera masks
exist at some timeslice, then no 3D volume reconstruction can be
performed.)  INTERP_MISSING_SLICES performs piecewise linear interpolation
to estimate missing time slice plume volumes.  It also links missing OSGA
files at time_slice t to an existing OSGA file at time_slice t-1.

*.  Program GENERATE_VIEW3DMOVIE_SCRIPT recovers the starting UTC time
for the first OSGA file generated by program DBVOLUME from the
photos table in the plume database.  It exports an executable
script which needs to be run in order to view the reconstructed
"t>0" plume volumes as 3D point clouds evolving over time.  

========================================================
BEAST code changes made on Tues, Jul 31, 2012:

*.  Trying to fix fast extremal region property computations.  Everything
except euler calculations may be working.

========================================================
BEAST code changes made on Mon, Jul 30, 2012:

*.  Significantly reworked & simplified
binaryimagefunc::compute_delta_Euler_number() in an attempt to speed up
extremal region finding.

*.  Reduced (but not elimiminated) memory leaks in LOCATE_SYMBOLS.
LOCATE_SYMOBLS is starting to yield quasi-hopeful sign detection results
for video shot by Harsh in access corridor.

*.  Cleaned DBVOLUME and CALC_VOLUMES programs.

========================================================
BEAST code changes made on afternoon of Fri, Jul 27, 2012:

*.  Added delete_pooled_memory() call for pixelNodes in
connected_components destructor.

*.  Deleted mains/plume/print_params.cc from repository in favor of
archive_camera_params.cc

*.  Starting to generate cheat sheet #5 for plume project.

*. mains/TOC12/LOCATES_SYMBOLS is a variant of LOCATE_CHARS intended for
TOC12 sign detection.

========================================================
BEAST code changes made on Thurs, Jul 26, 2012 & Fri, Jul 27, 2012:

*.  Added TOC12 subdir to mains

*.  connected_components::export_individual_connected_components() takes in
twoDarray *cc_twoDarray_ptr which is assumed to be filled with integer
valued connected component labels.  It first counts the number of distinct
cc labels and enters them into an STL map.  Looping over all connected
components, this method exports each one as a binary image to a separate
PNG file.  We wrote this method in July 2002 in order to break apart
complex symbols (e.g. biohazard signs) into separate extremal regions for
"text location" purposes.

*.  mains/imagetext/SYMBOLS2PNGS is a variant of CHARS2PNGS.  It imports
PNG/JPG images of symbol "letters" generated via LOCATE_CHARS and
connected_components::export_individual_connected_components() enabled.
The UV image is initially oriented in the YZ world-plane.

*.  connected_components::fill_labels_map() takes in works with
*cc_twoDarray_ptr which is assumed to have previously been filled with
integer valued connected component labels.  It counts the number of
distinct cc labels and enters them into STL map member *labels_map_ptr.

*.  connected_components::retain_only_largest_cc() works with
*cc_twoDarray_ptr which is assumed to have previously been filled
with integer valued connected component labels.  It scans through
*cc_twoDarray_ptr and counts the number of pixels associated with
each distinct cc label.  This method then resets all entries in
*cc_twoDarray_ptr to zero which do not correspond to the largest
connected component.  

========================================================
BEAST code changes made on Weds, Jul 25, 2012:

*.  Created vector_union_find class which uses STL vector rather than STL
map for speed purposes.  

========================================================
BEAST code changes made on Tues, Jul 24, 2012:

*.  Union_find class is starting to work reasonably well.  

========================================================
BEAST code changes made on Mon, Jul 23, 2012:

*.  mains/mapping/GENERATE_SHAPEFILE reads in lat-lon points from an input
text file.  It uses the SHAPELIB in order to create and populate a
shape file with the points from the input text file.

....................

*.  mains/imagesearch/text_recognition/UNIONFIND is a playpen for
experimenting with a "non-tree" implementation of the union-find algorithm.

*.  Starting to create new datastructures/union_find class.

========================================================
BEAST code changes made on Fri, Jul 13, 2012:

*.  Added skew_z and quartic_z computations into LOCATE_CHARS and
extremal_region class.

*.  In
graph_hierarchy::write_SQL_insert_connected_component_annotation_commands(),
fixed gx spacing for connected component annotation labels.

....................

*.  Added grandparent and grandchildren matching in
connected_components::traverse_extremal_region_tree().



========================================================
BEAST code changes made on Thurs, July 12, 2012:

*.  Renamed mains/plumes/filtermasks.cc as temporally_filter_masks.cc

...................

*.  mains/imagetext/GENERATE_CHAR_IMAGES is a generalization of CHARS2PNGS.
It first generates png images of synthetic characters using the
PNGWRITER program.

The UV image is initially oriented in the YZ world-plane.  It is
rotated through az about the world z axis, el about the world
y-axis and roll about the the world x-axis.  The az, el and roll
angles are random variables selected from gaussian distributions
with reasonable standard deviations to simulate camera views of
text in the wild.  The rotated synthetic character image is
subsequently projected back into the YZ world-plane.  

Text characters are assigned random foreground and background
colors.  Reasonable differences in hue, saturation and value are
imposed between foreground and background colorings.  Random linear
shading is performed on both foreground and background colors to
simulate illumination variations.  Random gaussian noise is also
added to the RGB color channels of every pixel.

The projected image is cropped so that the rotated character fills
most of the projection. The cropped character is subsequently
scaled so that its height equals 32 pixels in size.  Finally,
the output character image is blurred by a gaussian with variable
sigma value.

We wrote this program in July 2012 in order to easily obtain large
numbers of training examples for the Coates-Ng text classifier.

========================================================
BEAST code changes made on Weds, July 11, 2012:

*.  Renamed mains/imagetext/CHARS2JPGS as CHARS2PNGS.  Tried to streamline
this expensive program a little bit as well.

*. mains/imagetext/CHARS2REGIONS imports synthesized text character images
generated by CHARS2PNGS.  In July 2012, we empirically found that synthetic
text characters generally have a nontrivial intensity distribution.  So for
each character image, we find a reasonable threshold that can be used to
convert it into a binary image.  After binarizing, CHARS2REGIONS next
counts the number of connected components.  It moves all binary text
character images containing a single connected component into
single_component_subdir.

========================================================
BEAST code changes made on Tues, July 10, 2012:

*.  Added moment member variables and functions to extremal_region class.

*.  Added important note in BasicServer after Dave Ceddia taught us today
about Qwidgets, QT guis, etc.  

................

*.  Adding quadratic XY moments into char bbox shape classification leads
to noticeable reduction in false alarms.

*.  Adding cubic X^3, YX^2, XY^2 and Y^3 moments to extremal region class.

========================================================
BEAST code changes made on Mon, July 9, 2012:

*.  Starting to generate cheat sheet #4 for plume project.  

....................

*.  Restoring image entropy computation as secondary text bbox classifier
in LOCATE_CHARS.

========================================================
BEAST code changes made on Fri, July 6, 2012:

*.  mains/imagesearch/TEMPORAL_LAYOUT reads in a set of node and image IDs
as well as epoch times from the IMAGERY database for some hardwired graph
hierarchy.  It generates a cosine layout for (gx2,gy2) graph node
coordinates which can serve as a reasonable timeline display.
TEMPORAL_LAYOUT exports gx2,gy2 coordinates to ascii output as well as
updates gx2,gy2 columns in the nodes table of the IMAGERY database.

*.  Generalized SVM_SHAPE so that it can start to handle different numbers
of positive and negative training samples

========================================================
BEAST code changes made on Thurs, July 5, 2012:

*.  Allocate large pools for treenodes and extremal region objects in
connected_components::allocate_member_objects().

*.  Replaced STL map treenodes_map_ptr member in tree class with map of
maps treenodes_map_map_ptr.  Given a specified level, tree class can now
return map corresponding to treenodes at that particular level.

*.  texture_rectangle::compute_image_entropy() now explicitly checks and
discards pixels with missing data values.

*.  LOCATE_CHARS no longer runs glacially slow on kermit and similarly
sized pictures.

========================================================
BEAST code changes made on Tues, July 3, 2012:

*.  In graphicsfunc::label_connected_components(), switched output_buffer
from unsigned chars to doubles.  Number of labeled components can then
equal 2**32-1 rather than 2**8-1=255.

========================================================
BEAST code changes made on Fri, Jun 29, 2012:

*.  mains/modeling/LAZERGEOREG is a specialized program which attempts to
find a global transformation that optimally georegisters Nick
Armstrong-Crews' lazerkart point cloud with our 3D MIT building models.  It
takes in a set of planar facets manually extracted from building sides in
the lazerkart point cloud.  It also has the unique building model ID
associated with each lazerkart planar facet hardwired into STL vector
bldg_ID_for_facet.  LAZERGEOREG iteratively performs a brute-force search
for the azimuthal rotation angle, XY translation and XY scaling which
minimizes the distances between the planar facets and their nearest
building models.

*.  Added layout entry within graph_annotations table in IMAGERY database.
Made necessary changes in graph_hierarchy and graphdbfuncs methods.

..................

*.  Extremal regions with Ng-Coates dictionary is starting to look
promising!

*.  Graph annotations are starting to appear in Michael's viewer.

========================================================
BEAST code changes made on Thurs, Jun 28, 2012:

*.  Added threevector roof_COM member to Building class along with get
method.

========================================================
BEAST code changes made on Weds, Jun 27, 2012:

*.  In MODELSGROUP::set_tomcat_subdir(), we explicitly check whether
webapps_outputs_subdir exists.  If not, set_tomcat_subdir() creates it.
Note that this may be dangerous.  For example, user cho might create
webapps/LOST/outputs/ .  But then user los may not be able to write to
it...

*.  GENERATE_PHOTO_HIERARCHY exports SQL graph annotation insertion
commands containing connected component labels and number of nodes only if
graph(s) contain more than one connected component.

.........

*.  Starting to play with Nick's lazerkart data set collected around east
MIT.

========================================================
BEAST code changes made on Tues, Jun 26, 2012:

*. Eliminated unused member segmentation_twoDarray_ptr from photograph
class.

*.  graph::erase_node() removes the input node from nodes_map.  However, it
does NOT call the node's destructor.  We wrote this method in June 2012
when we realized that photogroup::destroy_single_photograph() was
previously trying to call a node's destructor twice.  Recall that the
photograph class inherits from the node class.  So calling delete photo_ptr
automatically calls the node destructor.

*.  Started to add in Ng char detection into LOCATE_CHARS.  Results are
lousy so far.

*.  Added mains/modeling/README.modeling to repository

*.  Added max_frustum_to_rectangle_distance member to Clipping class along
with set method.

..................................

*. graph_hierarchy::write_SQL_insert_connected_component_annotation_commands()
populates entries in the graph_annotations table of the IMAGERY database
connected component information.

*.  Starting to incorporate graph annotation functionality into
PhotoServer.

========================================================
BEAST code changes made on Mon, Jun 25, 2012:

*.  Reworked mains/imagesearch/text_recognition/GENERATE_FEATURES so that
it imports single text character image files whose width or height
precisely equals 32 pixels in size.  But width and height do not BOTH need
to equal 32 pixels.

*.  Renamed GENERATE_FEATURES as POOL_FEATURES.

..................................

*.  text_detector::compute_sector_start_stop() is a specialized method
which takes in width w measured in pixels.  It returns a set of
threevectors that partition the width into 3 sectors labeled by first
component integers 0, 1 and 2.  The starting and stopping pixel numbers for
each partition are contained in the second and third components of the
threevectors.

*.  text_detector::average_window_features() takes in pixel integer offsets
px,py.  It first computes K-dimensional descriptors for each 8x8 patch
within the ~32x32 window in the current *texture_rectangle_ptr.  This
method next partition *texture_rectangle_ptr into 3x3 sectors which are not
generally of precisely the same pixel size.  For each of the 9 sectors, the
K-dimensional descriptors are averaged together and stored in
*average_features_map_ptr.

*.  text_detector constructor now takes in feature descriptor dimension K
as explicit input parameter.

========================================================
BEAST code changes made on Fri, Jun 22, 2012:

*.  Added bbox image entropy as secondary classifier in EXTREMAL_REGIONS.
Image entropy does much better job than edge gradient content for
eliminating spurious bboxes not really surrounding text regions.

========================================================
BEAST code changes made on Fri, Jun 15, 2012:

*.  mains/imagesearch/text_recognition/GENERATE_EXTREMAL_REGIONS is a
specialized variant of SHAPE_DESCRIPTORS.  It is designed to output
extremal regions for text and non-text images which are only 32 pixels
high.  GENERATE_EXTREMAL_REGIONS works with images containing bright
characters against dark backgrounds or vice versa (or else non-text input
imagery).  It varies a binary threshold from 0 to 255 and generates
connected binary component images.  If the number of connected components
or fill fraction is too large or small, this program ignores the candidate
image.  Otherwise, it retains some a small fraction of extremal region
image examples corresponding to random threshold settings.


========================================================
BEAST code changes made on Mon, Jun 11, 2012:

*.  mains/imagesearch/text_recognition/EXTREMAL_REGIONS computes connected
components within binary thresholded versions of an input image for
thresholds ranging from 255 down to 0.  It also follows Neumann and Matas,
"Real-time scene text localization and recognition", CVPR 2012 and computes
descriptors for the extremal regions.

========================================================
BEAST code changes made on Fri, Jun 8, 2012:

*.  mains/sift/MSER_REGIONS queries the user to enter an image filename.
It then calls the Oxford MSER binary to compute positive and negative
maximally stable extremal regions within the input image.  The positive and
negative regions are represented by colored polygons into two output
versions of the original image.

========================================================
BEAST code changes made on Thurs, Jun 7, 2012:

*.  videofunc::display_region_polygons() takes in an STL vector of polygons
in UV image plane space.  It also takes in a texture rectangle which is
assumed to have a clean copy of the image from which the polygons were
derived.  This method colors polygon edges and exports the annotated image
to output_filename.

========================================================
BEAST code changes made on Tues, Jun 5, 2012:

*.  mains/imagesearch/text_recognition/NORMALIZE_WORDS reads in a set of
JPG files from words_subdir which contain multi-character words from a
directory tree.  It reassigns uniform names to the input files of the form
"12345.jpg".  NORMALIZE_WORDS also resizes each input jpg file so that its
new height precisely equals 32 pixels.

*. mains/imagesearch/text_recognition/CHOP_WORDS reads in a set of JPG
files output by NORMALIZE_WORDS containing multi-character words.  The
vertical height of each image file should precisely equal 32 pixels in
size.  It excises 32x32 "window" images and shifts 16 pixels over for each
new window.  The exported images have filenames of the form
text_123456.jpg.

*.  mains/imagesearch/text_recognition/EXTRACT_NONTEXT searches for JPG,
PNG and GIF files within training_data/not_text/ .  Randomly looping over
all such non-text image files, it randomly chooses a 32x32 window within
some image.  If the image entropy for the random window exceeds a minimal
threshold, EXTRACT_NONTEXT exports it to a file with name of the form
nontext_123456.jpg.

*.  mains/imagesearch/text_recognition/GENERATE_FEATURES reads in a set of
text or non-text images files from a specified input subdirectory.  It also
imports a precomputed character dictionary along with whitening mean and
covariance matrices.  Looping over each input 32x32 window file,
GENERATE_FEATURES extracts 8x8 patches in each window with pixel for every
possible 25x25 pixel offset.  Each 8x8 patch is projected onto the
dictionary and converted into a K-dimensional histogram.  The histogram
descriptors are averaged together within 3x3 regions of the 32x32 window.
So the final descriptor for each 32x32 window is a 9*K dimensional vector.
The window descriptors for all of the 32x32 windows are exported to
windows_descriptors.hdf5.

*.  mains/imagesearch/text_recognition/SVM_TEXT reads in 9xK dimensional
features for N 32x32 text windows and N 32x32 non-text windows.  It then
uses Davis King's DLIB library to load the input samples along with their
positive and negative labels.  After the ordering of the input samples is
randomized, cross-correlation is performed in order to estimate a
reasonable value for a linear-SVM slack variable C.  DLIB then trains
binary decision and probabilistic decision functions.  A serialized version
of the probabilistic decision function is exported to an output binary
file.

========================================================
BEAST code changes made on Fri, Jun 1, 2012:

*.  Added dictionary and word features maps member functions to
text_detector class.

*.  mains/imagesearch/text_recognition/NORMALIZE_WORDS reads in a set of
JPG files which contain multi-character words from a directory tree.  It
reassigns uniform names to the input files of the form "12345.jpg".
NORMALIZE_WORDS also resizes each input jpg file so that its new height
precisely equals 32 pixels.

========================================================
BEAST code changes made on Thurs, May 31, 2012:

*.  mains/imagesearch/text_recognition/DESCRIPTORS loops over all character
jpeg image files and extracts n_patches_per_image 8x8 pixel patches from
each image.  It converts the 8x8 patches into a 64x1 column vector of
grey-scale intensities.  Raw descriptors for all character image patches
are exported to a single HDF5 binary file.  Descriptor mean and covariance
are recursively calculated and written to output text files.

......................

*.  mains/imagesearch/text_recognition/WHITEN_DESCRIPTORS imports raw 64x1
descriptors for 8x8 pixel patches selected from character jpeg images.  It
also imports the descriptors' mean and inverse square root covariance
matrix which was previously generated by program DESCRIPTORS.  The mean is
subtracted from each raw descriptor, and the residual is multiplied by the
inverse square root covariance matrix in order to whiten it.  covariance
matrix in order to "whiten" it.  Whitened patch descriptors are exported to
a single HDF5 binary file.

*.  mains/imagesearch/text_recognition/DICTIONARY imports whitened 64x1
descriptors for 8x8 pixel patches X^i randomly selected from text character
jpeg images.  It initially assigns each patch to some random cluster
labeled by 0 <= k < K. Score vectors S^i associated with each pixel patch
are then computed which have precisely one non-zero entry.  We then
iteratively solve for the 64xK dictionary matrix D which minimizes sum_i |D
S^i - X^i|.  Columns within D are subsequently renormalized to have unit
magnitude.  The final values in D are exported to a binary HDF5 file.

*.  Created new classification/text_detector class.

========================================================
BEAST code changes made on Thurs, May 24, 2012:

*.  Added few functions to emulate selection of ladar files to be processed
in MacheteServer class.

========================================================
BEAST code changes made on Weds, May 23, 2012:

*.  mains/modeling/RECONSTRUCTED_POSNS reads in the XYZ bundler locations
for all reconstructed camera from
bundler_IO_subdir/reconstructed_camera_posns.dat.  It generates a TDP file
containing the point cloud corresponding to all the reconstructed camera
positions.

*.  mains/plume/GENERATE_SCRIPTS now exports run_load_photos

========================================================
BEAST code changes made on Tues, May 22, 2012:

*.  mains/imagesearch/GISTCOMPUTE first queries the user to enter an image.
It then generates a PPM thumbnail version of the input image.  GISTCOMPUTE
then calls the LEAR c implementation of Torralba's original MATLAB code
which computes a 960-dimensional GIST descriptor for the thumbnail.  The
GIST descriptor is written to an output text file.

*.  mains/imagesearch/GISTCOMPARE queries the user to enter the basenames
for two input images whose GIST descriptors are assumed to have been
precalculated via program GISTCOMPUTE.  It computes and reports the
Euclidean distance between the two images' GIST descriptors.

========================================================
BEAST code changes made on Thurs, May 17, 2012:

*.  videofunc::generate_color_histogram() takes in *texture_rectangle_ptr
which is assumed to hold some input image.  It generates and returns an STL
vector containing integrated pixel count fractions for a discrete set of
colors.

========================================================
BEAST code changes made on Weds, May 16, 2012:

*.  mains/modeling/EXTRACT_IMAGENAMES reads in "NVM" output generated by
VSFM.  It pulls out original jpeg image filenames from the .nvm file.
EXTRACT_IMAGENAMES then exports VSFM names vs original jpeg image filenames
to a text file within bundler_IO_subdir.

*.  imagesdatabasefunc::retrieve_all_image_annotations() issues a single
SQL select command for all images containing annotations corresponding to
the input campaign and mission IDs.

*.  Generalized jsonfunc::generate_human_faces_JSON_string() to 
generate_multi_object_selection_JSON_string().

*.  LOSMODELSGROUP::mark_ground_intercept() takes in an aerial camera
position as well as camera pointing vector r_hat.  It computes the SRTM
ground intercept and marks the location with a new GroundTarget SignPost.

*.  Image annotations backprojected for TSTORM video can now be
backprojected onto DTED2 map and displayed in SAURON_CLIENT.

========================================================
BEAST code changes made on Tues, May 15, 2012:

*.  Added mains/imagesearch/README.demo into repository.

*.  stringfunc::decompose_alpha_numer_string() takes in a string which is
assumed to be of the form "XXX####" where XXX denotes some string
consisting of non-numerals and #### denotes some string comprised only of
numerals (and possibly includes a decimal point).  This method extracts and
returns the alpha and numerical parts of the input string.

*.  imagesdatabasefunc::insert_image_annotations() takes in metadata for
set of new entries in the image_annotations table of the IMAGERY
database. It inserts these metadata into *gis_database_ptr.

*.  Can start to retrieve annotations from imagery database.

========================================================
BEAST code changes made on Mon, May 14, 2012:

*.  Added broker_URL and message_queue_channel_name members to PassesGroup
class along with get methods.

*.  Number of detected faces is now automatically displayed when human
faces tab in IMAGE viewer is selected and not just when thick client signal
is received.

========================================================
BEAST code changes made on Fri, May 11, 2012:

*.  videofunc::detect_line_segments() takes in a texture_rectangle which is
assumed to already contain an RGB image.  It runs the LSD algorithm/codes
by R.G. von Gioi (version 1.6 Nov 2011) which locates line segments within
the input image.  This method returns an STL vector containing linesegments
in UV image plane space derived from the LSD code output.

*.  videofunc::display_detected_line_segments() takes in an STL vector of
linesegments in UV image plane space.  It also takes in a texture rectangle
which is assumed to have a clean copy of the image from which the
linesegments were derived.  This method colors the linesegments pixels as
purple and exports the annotated image to output_filename.

*.  For reasons we don't understand, VIEWBUNDLER when calling
(*cameraID_xyz_map_ptr)[curr_camera_ID].push_back(curr_XYZ) in
videofunc::sort_XYZ_points_by_camera_ID().  So we've commented out this
videofunc method call in VIEWBUNDLER.

............

*. mains/imagesearch/LSD runs the line segment detector algorithm/code of
von Gioi (version 1.6 Nov 2011) on some specified input image.  It then
thresholds away short linesegments in the UV image plane.  Surviving line
segments are colored in pink and displayed in a PNG outfile file.

========================================================
BEAST code changes made on Thurs, May 10, 2012:

*.  Fixed retrieval of campaign, mission, datum and image IDs in
mains/imagesearch/INSERTFACES.cc

*.  Added "Restore original coloring" button to Color histogram page.

========================================================
BEAST code changes made on Tues, May 8, 2012:

*.  Trying again to make mains/photosynth/THUMBNAILS robust against
corrupted input JPEG files.

*.  mains/imagesearch/GENERATE_BLANK_IMAGE calls ImageMagick in order to
generate a JPG or PNG image containing a blank grey background with
specified horizontal and vertical pixel dimensions.

...........

*.  mains/graphs/KMEANS_CLUSTERS.cc no longer performs K-means++ clustering
if K==n_nodes.  

========================================================
BEAST code changes made on Mon, May 7, 2012:

*.  imagefunc::valid_image_file() calls linux built-in "file" command to
test the specified input image file.  If JPEG, PNG or TIFF keywords are
found in the output, this boolean method returns true.

*.  In photogroup::generate_bundler_photographs(), we explicitly check for
corrupted input images.  If found, they are replaced with blank dummy
images.

*.  Separated off refreshMainImages() from mainImage::displayNewImage().

========================================================
BEAST code changes made on Fri, May 4, 2012:

*.  Resurrected DBSAURON on BEAST.

*.  Added images_database_ptr member to LOSMODELSGROUP along with set
method.

*.  Eliminated unnecessary Hierarchy_ID input param from
imagesdatabasefunc::get_image_metadata_given_URL().


*.  imagesdatabasefunc::insert_platform_metadata() takes in metadata for a
new entry within the platform_metadata table of the IMAGERY database.  It
inserts this metadata into *gis_database_ptr.

*.  mains/imagesearch/LOAD_PLATFORM_METADATA import aircraft metadata from
text files generated by program mains/thunderstorm/store_FLIR_metadata.  It
inserts these metadata into the platform_metadata table of the imagery
database.

*.  mains/thunderstorm/SAURON_CLIENT is a variant of DBSAURON.  It opens a
single 3D imagery window which displays a DTED-2 map as a point cloud
colored according to height.  SAURON_CLIENT also instantiates an ActiveMQ
messenger which continuously listens for node updates from Michael Yee's
GraphViewer.  When a node message is received, the aircraft position and
orientation are retrieved from the platforms_metadata table in the imagery
database.  Similarly, the FLIR camera's pose is retrieved from the
sensors_metadata table in the imagery database.  The LOST aircraft model
and OBSFRUSTUM are then updated in the 3D viewer map display.

............

*.  Added sanity check in LOSMODELSGROUP::parse_next_message() on retrieved
internal camera parameter values.

============================================================================
BEAST code changes made on Thurs, May 3, 2012:

*. Number of detected faces now automatically appears within Human Faces
submenu of Image viewer whenever new node is selected.

============================================================================
BEAST code changes made on Weds, May 2, 2012:

*.  Program CONSOLIDATE reads in two text files assumed to contain 2D XY
and UV tiepoint pairs.  It outputs a consolidated file containing 4 columns
corresponding to X, Y, U and V feature coordinates.

============================================================================
BEAST code changes made on Mon, Apr 30, 2012:

*.  Vocab matching for small test MIT_100 imagery set looks like it's
working.

============================================================================
BEAST code changes made on Sun, Apr 29, 2012:

*.  Working on mains/imagevocab/TFIDF and TFIDF2 programs.

============================================================================
BEAST code changes made on Fri, Apr 27, 2012:

*.  Starting to add process data functionality to Machete Server.

============================================================================
BEAST code changes made on Thurs, Apr 26, 2012:

*.  Program GENERATE_IMAGE_WORDS reads in 128D descriptors for Voronoi cell
centroids generated by program CLUSTER_CENTERS.  Looping over all images
which have SIFT key files, it imports SIFT feature descriptors for each
image.  GENERATE_IMAGE_WORDS maps image SIFT features to word Voronoi
clusters.  It exports a text file for each image containing its SIFT word
content.

============================================================================
BEAST code changes made on Weds, Apr 25, 2012:

*.  Starting to mock up raw ladar data file importing in MacheteServer.

============================================================================
BEAST code changes made on Tues, Apr 24, 2012:

*.  Renamed mains/plume/camera_posns.cc as survey_camera_posns.cc . 

*.  Renamed mains/plume/surveyfit.cc as georegister_cameras.cc . 

*.  Renamed mains/plume/README.plume as README.tripod_cameras.

......................

*.  Cleaned more main PLUME codes and made them more user-friendly.

*.  Clipping::identify_texturable_rectangles() loops over all clipped face
triangles.  For each triangle, the rectangle side-face progenitor is found.
The rectangle's ID is associated with counterpart building and polyhedron
IDs.  The dotproduct between the rectangle side-face and the current
camera's pointing direction is also calculated and saved in STL map
*BuildingsGroup::ClippedPolygon_building_polyhedron_rectangle_map_ptr.
Unoccluded rectangle side faces are used to generate Polygons within
*Clipped_PolygonsGroup_ptr.

*.  Clipping::generate_rectangle_face_decals() loops over all rectangles
within *Clipped_PolygonsGroup_ptr generated within
identify_textureable_rectangles().  For each rectangle, this method first
converts its 3D world-space XYZ corners to planar ABN coordinates.  It also
projects the XYZ corners into 2D image plane UV coordinates.  After
renormalizing A and B so that 0 <= B <= 1, generate_rectangle_face_decals()
computes the homography H which maps UV -> AB.  It then maps colored pixels
within the UV image plane onto an AB "decal" via H.  The decal image is
exported with building, polyhedron and rectangle IDs and normal dotproduct
weight information encoded into the output filename.

*.  mains/modeling/COLORBLEND queries the user to enter building,
polyhedron and rectangular side-face IDs.  It then searches the
rectified_views subdirectory for any rectified "decal" images which project
onto the specified rectangle.  COLORBLEND also extract normal weight
information encoded into each decals filename.  It forms a composite mosaic
from all rectified decals and exports it to a single output image.

============================================================================
BEAST code changes made on Mon, Apr 23, 2012:

*.  In akm class, elimininated member FLANN matrix tfidf_matrix_ptr in
favor of GMM++ sparse matrix tfidf_sparse_matrix_ptr.  Beast does not have
nearly enough RAM to hold entire TFIDF matrix in memory for 30K images and
300K clusters.

============================================================================
BEAST code changes made on Fri, Apr 20, 2012:

*.  Overloaded version of filefunc::LoadUnsignedChars() takes in a binary
file containing n_total_features*D bytes.  It reads every n_feature_skip'th
row of D bytes from the specified binary file into a dynamically
instantiated unsigned char* array.

*.  Recall polyhedron::common_edge_between_two_faces() returns -1 if the
two input faces are NOT adjacent.  So we changed the conditional check
common_edge_between_two_faces(n,m) > 0 to >=0 in generate_face_network()
and identify_internal_edges() methods of polyhedron class.

*.  polyhedron::read_PLY_file() imports polyhedron information from a
specified .ply file.  As of April 2012, we use the trimesh2 library in
order to parse polyhedra which are described in the ply file in terms of
triangles.  This method reconstructs the polyhedron's vertices, edges and
faces from the input triangle mesh information within the input ply file.

....................

*.  Commented out trimesh dependence if/when we isolate trimesh2 library
into its own namespace

....................

*.  Restored dependence of polyhedron class upon manually modified trimesh
library.  

....................

*.  mains/mapping/PLY2OFF imports a triangulated polyhedron from some PLY
file passed as a command line argument.  It converts the input .ply file
into Object File Format (.off).

============================================================================
BEAST code changes made on Thurs, Apr 19, 2012:

*.  Streamlined mains/imagevocab/WHITEN_FEATURES s.t. it can process 30K+
MIT photos faster.

*.  mains/imagevocab/DESCRIPTORS_COVAR parses all compressed SIFT HDF5
binary files within a specified input subdirectory.  It sequentially forms
first and second moments from SIFT descriptors as they're individually
imported.  Once all SIFT descriptors have been processed, their 128x128
covariance matrix is calculated.  The square root of the inverse covariance
matrix is written to a text file within the sift keys subdirectory.

*.  mains/imagevocab/WHITEN_FEATURES imports SIFT descriptors from
compressed SIFT HDF5 binary files within a specified input subdirectory.
It also imports the inverse square root of the descriptors' covariance
matrix which was previously generated by program DESCRIPTORS_COVAR.  Each
raw SIFT descriptor is multiplied by the inverse square root covariance
matrix in order to "whiten" it.  Whitened SIFT descriptors are exported to
compressed HDF5 binary files labeled with "whitened_" prefixes.

...............

*.  Updated mains/imagevocab/ACCUM_FEATURES to import raw SIFT descriptors
from compressed HDF5 files.

============================================================================
BEAST code changes made on Weds, Apr 18, 2012:

*.  classification_func::detect_faces() takes in the file name for some
image and returns an STL vector containing circles enclosing detected human
faces.  It calls the face detection binary by Z. Kalal, J. Matas, and
K. Mikolajczyk (see
http://kahlan.eps.surrey.ac.uk/featurespace/web/face.html).  Empirically
derived threshold on "cornerness" as function of face radius helps to
eliminate false alarms.  As of 4/18/2012, we believe this face detector
works significantly better than the default one which comes with OpenCV.

*.  Tightened parameters in classification_func::detect_faces() to cut down on
false alarms.

============================================================================
BEAST code changes made on Tues, Apr 17, 2012:

*.  mains/imagevocab/WHITEN_FEATURES now compreses and decompresses HDF5
binary sift files using LZOP rather than GZIP.  Former is significantly
faster than latter, though it yields less compression.

============================================================================
BEAST code changes made on Thurs, Apr 12, 2012:

*.  sift_detector::parse_Lowe_features() now checks if input SIFT keys
filename has .gz suffix.  If so, it temporarily gunzips the key file,
extracts its contents, and then re-gzips the key file.

*.  sift_detector::parse_Lowe_descriptors() takes in a SIFT keyfile 
(which may be gzipped) generated by Lowe's binary.  It extracts
just the 128-dimensional descriptors and NOT the U,V,scale,rotation
metadata for each SIFT feature.  The descriptors from the SIFT
keyfile are returned within *D_ptrs_ptr.

..............

*. MacheteServer can communicate with Dave Ceddia's ruby module for mounted
disk and data files on specified disks information.  It passes this info
back to the Machete thin client.

..............

*.  mains/imagevocab/keys_to_HDF5 now gzips output binary files

============================================================================
BEAST code changes made on Weds, Apr 11, 2012:

*.  cppJSON class can now start to extract key-value pairs from input JSON
strings.

*.  Trying to eliminate imagefunc::resize_image() in favor of
videofunc::resize_image()

============================================================================
BEAST code changes made on Tues, Apr 10, 2012:

*.  mains/sift/AFFINE_OUTLIERS reads in a pair of matched feature files
generated by program EXTRACT_INLIERS.  It translates the XY and UV
tiepoints so that they have zero-valued COMS.  The tiepoints are then
rotated and rescaled so that their 2x2 covariance matrices equal the
identity.  AFFINE_OUTLIERS computes the median and quartile widths for
|X-U| and |Y-V|.  It then compares d_XU=|X-U| and d_YV=|Y-V| for each
tiepoint pair against the median and quartile widths.  Any tiepoint pair
whose d_XU or d_YV values lie significantly above the median are declared
to be affine outliers.  This program exports a new set of feature files
from which the affine outlier tiepoint pairs are excluded.

...................

*.  Program EXTRACT_INLIERS imports F & D genvector descriptors for SIFT,
Hessian-Affine, etc features from HDF5 binary files for two images
generated by program CONSOLIDATE.  It then performs tiepoint matching using
Lowe's ratio test.  A *coarse* estimate for the fundamental matrix is
derived via RANSAC with tiepoint pairs required to approximately satisfy
XY^T * F * UV = 0.  EXTRACT_INLIERS builds FLANN library nearest neighbor
indices.  After performing ~1000 RANSAC iterations, this program generates
its best fundamental matrix estimate.  EXTRACT_INLIERS exports inlier
tiepoint pairs to a pair of feature text files.

*.  Vocab generation and matching is starting to work for MIT2317!

*.  Added CPPJSON class to src/graphs.  Provides nicer interface to CJSON
codes.

...................

*.  Created new mains/imagevocab subdir.  Moved all programs related to
imagery dictionary creation and exploitation out of mains/sift into this
new subdir.

============================================================================
BEAST code changes made on Mon, Apr 9, 2012:

*.  Renamed mains/sift/extract_hessian_affine.cc as extract_descriptors.cc.

...................

*.  Added mains/sift/README.vocab to repository.

============================================================================
BEAST code changes made on Fri, Apr 6, 2012:

*.  Added cJSON.h and cJSON.cc to graphs subdir.  

*.  Starting to compute LM improved fundamental matrix values.

*.  Modified LOSTClient so that client only attempts to read Server output
after it has received a signal that all output has been received.


============================================================================
BEAST code changes made on Thurs, Apr 5, 2012:

*.  Trying to triangulate corrected image plane points in fundamental
class.  

*.  Added progress bar communication to Machete ground system.

...............

*.  fundamental::correct_tiepoint_coordinates() implements algorithm 12.1
from Hartley and Zisseman, "Multi-view geometry for computer vision", 2nd
edition.  It takes in a set of corresponding 2D tiepoints curr_XY and
curr_UV which are assumed to be noisy.  In contrast, the current
fundamental matrix F is assumed to NOT be noisy.  This method computes
corrected tiepoints which minimize the geometric error function
d(x,xhat)**2 + d(x',xhat')**2 and (nearly exactly) satisfy xhat'^T * F *
xhat = 0.

*.  fundamental::triangulate() takes in two camera projection matrices
*P_ptr and Pprime_ptr as well as a pair of 2D tiepoints UV and XY.  It
implements the homogeneous (DLT) method described in section 12.2 of
Hartley and Zisseman, "Multi-view geometry in computer vision", 2nd edition
to return the threevector corresponding to the triangulated location of the
two tiepoints.

============================================================================
BEAST code changes made on Weds, Apr 4, 2012:

*.  geometry_func::closest_point_to_origin() takes in a 2D line represented
by homogeneous threevector l.  It returns the threevector corresponding to
the point on the line that lies closest to the origin.  This formula comes
from Algorithm 12.1 in Hartley & Zisserman, Multiple view geometry in
computer vision, 2nd edition.

*.  fundamental::optimal_triangulation() implements algorithm 12.1 from
Hartley and Zisseman, "Multi-view geometry for computer vision", 2nd
edition.

......................

*.  Created new src/ladar/machetedbfuncs namespace.

============================================================================
BEAST code changes made on Tues, Apr 3, 2012:

*.  After resetting 3rd component of homogeneous UVW point to 1 in 
FeaturesGroup::update_epipolar_lines(), mains/raven/fundamental is finally
starting to work!

============================================================================
BEAST code changes made on Mon, Apr 2, 2012:

*.  complexfunc::find_real_polynomial_roots() takes in N-th order
polynomial poly.  It computes all of its N complex roots.  But this method
returns only those roots which are real within an STL vector.

*.  fundamental::initialize_Ninverse_matrix() instantiates and fills 4x4
matrix *Ninverse_ptr which is needed to recover cubic polynomial coeffs in
7-point algorithm.

*.  fundamental::seven_point_algorithm() works with the 7x9 genmatrix
*A_ptr generated by method parse_fundamental_inputs(). It first performs a
singular value decomposition of *A_ptr = U diag(w) V^T.  It then identifies
the smallest two singular values (which should be close to zero) as well as
their corresponding column eigenvectors within matrix V.  Both column
vectors should approximately satisfy the homogenous system of equations
*A_ptr v = 0.  The entries of v are rearranged into 3x3 matrices F1 and F2.
We next solve for the real roots of the cubic polynomial Det(alpha F1 +
(1-alpha) F2) = 0.  The one or three real roots of the cubic yield one or
three linear combinations of F1 and F2 which have vanishing determinant and
represent candidate fundamental matrices.  The candidates are stored within
member STL vector F_ptrs.  This method returns the number of candidate
fundamental matrices (1 or 3) which it found.
   
*.  Changes made to fundamental matrix computation have seriously fouled up
CHOG feature matching!

*. filefunc::open_binaryfile() now takes in nbytes output param as long
long rather than int.

*. mathfunc::random_sequence() now implements Durstenfeld's random number
shuffling algorithm.

============================================================================
BEAST code changes made on Fri, Mar 30, 2012:

*.  Renamed src/mains/renormalize_features as whiten_features.  Multiply
raw SIFT descriptors by inverse square root of covar matrix rather than
square root of covar matrix.

============================================================================
BEAST code changes made on Thurs, Mar 29, 2012:

*.  mains/sift/EXTRACT_SIFT_FEATURES searches for
bundler_IO_subdir/images/keys.  If this subdirectory does not exist, it
runs Lowe's binary on all input images and writes SIFT key files to the
keys subdirectory.  EXTRACT_SIFT_FEATURES then parses all individual SIFT
key files and re-exports them as HDF5 binary files.

*.  mains/sift/RENORM_FEATURES parses all individual SIFT HDF5 binary files
within a specified input subdirectory.  It sequentially forms first and
second moments from SIFT descriptors as they're individually imported.
Once all SIFT descriptors have been processed, their 128x128 covariance
matrix is calculated.  The square root of the covariance matrix is written
to a text file within the keys subdirectory.

RENORM_FEATURES next renormalizes all raw SIFT descriptors via
multiplication by the square root covariance matrix.  The renormalized SIFT
descriptors are exported to HDF5 binary files labeled with "renormalized_"
prefixes.

.................

*.    Overloaded pngfunc::convert_textlines_to_PNG() to enable conversion
of words to images for text training purposes.

============================================================================
BEAST code changes made on Weds, Mar 28, 2012:

*.  mains/sift/REWRITE_SIFT_FEATURES parses all individual SIFT key files
within a specified input subdirectory.  Each SIFT key file is reexported in
HDF5 binary files.

============================================================================
BEAST code changes made on Tues, Mar 27, 2012:

*.  mains/sift/EXTRACT_SIFT_FEATURES parses all individual SIFT key files
within a specified input subdirectory.  It reexports all raw SIFT
descriptors within a consolidated binary file written in HDF5
format.  It also writes out separate HDF5 binary files for SIFT
descriptors corresponding to each individual image.

EXTRACT_SIFT_FEATURES next computes the descriptors' 128x128 covariance
matrix.  It renormalizes all raw SIFT descriptors via multiplication by the
square root of the covariance matrix.  The renormalized SIFT descriptors
are also exported to an HDF5 binary file.

*.  mains/sift/CLUSTER_CENTERS imports raw or renormalized SIFT descriptors
for an entire imagery database which was generated by program
EXTRACT_SIFT_FEATURES.  It performs approximate K-means clustering on the
SIFT descriptors via the FLANN library.  Cluster cell center descriptors
are exported to a binary file in HDF5 format.

============================================================================
BEAST code changes made on Thurs, Ma


============================================================================
BEAST code changes made on Mon, Mar 26, 2012:

*.  genmatrix::geometric_mean_scale() iterates over all non-zero entries
within the current genmatrix.  After computing the median logarithm of
their absolute values, this method returns a geometric mean which
represents a characteristic scale for the current genmatrix.  For
determinant and matrix inverse computations, it is useful to first factor
out the geometric mean scale if it significantly differs from 1.

*.  Extracted James Philbin's FASTANN library methods into new class
src/cluster/akm.cc.

*.  mains/sift/approx_kmeans.cc is a testing playground for James Philbin's
FASTANN library.

============================================================================
BEAST code changes made on Fri, Mar 23, 2012:

*.  bundlerfunc::generate_list_tmp_file() searches BUNDLER_IO_SUBDIR/images
for any jpg or png images.  It creates a list_tmp.txt file from whatever
images it finds in this subdirectory.

*.  DOWNSIZE_IMAGES scans through images within bundler_IO_subdir/images.
It downsamples any which are larger than max_xdim,max_ydim in pixel size.
Oversized original images are moved into a separate subdirectory, and their
place within the images subdir is taken by their downsized counterparts.
Original or downsampled image size results are saved into output text file
bundler_IO_subdir/image_sizes.dat.


*.  Reworked and simplified several SIFT feature extraction methods within
sift_detector class.

*.  genmatrix::determinant() calculates the determinant of the current
matrix object.  As of Mar 2012, we call the NEWMAT11 rather than Numerical
Recipes library in order to compute matrix determinants.

*.  genmatrix::sorted_singular_value_decomposition() no longer returns
meaningless bool value.

*.  genmatrix::inverse() now computes matrix inverse via SVD.

*.  genmatrix::square_root() works with an nxn matrix which is assumed to
be symmetric.  If the eigenvalues of the input matrix are all non-negative,
this boolean method computes the square-root of the input matrix and
returns true.

============================================================================
BEAST code changes made on Weds, Mar 21, 2012:

*.  sift_detector::extract_SURF_features() imports the image specified by
the input filename.  It calls the OpenCV's ExtractSURFmethod to compute
128-dimensional feature vectors.  Feature UV coordinates and
128-dimensional descriptor values are returned within STL vector
currimage_feature_info.

============================================================================
BEAST code changes made on Tues, Mar 20, 2012:

*.  vptree::compute_distances_to_nodes() takes in a metric space query
element along with a set of VPtree node IDs.  It computes the distances
between the query element and each of the nodes and returns the results
within output STL vector query_to_neighbor_distances.

*.  Implementation of Samat's Incremental Nearest Neighbor Algorithm
finally seems to be working!

*.  Tiepoint matching via CHOG features is starting to work.

============================================================================
BEAST code changes made on Mon, Mar 19, 2012:

*.  Starting to implement Samat's Incremental Nearest Neighbor Algorithm.
But our implementation is flawed.

============================================================================
BEAST code changes made on Fri, Mar 16, 2012:

*.  Created new datastructures/BinaryTree templatized class.

........................

*.  mathfunc::random_sequence() performs a brute force random ordering of
an integer sequence [0,1,...,nsize-1].  It returns the randomized result in
array a_random:

*.  Metric space partitioning is messed up!

============================================================================
BEAST code changes made on Weds, Mar 14, 2012:

*.  Color backprojection from MIT2317 photos to world model buildings still
needs more work.

*.  Starting to work with HOG features inside sift_descriptor class.

============================================================================
BEAST code changes made on Tues, Mar 13, 2012:

*.  videofunc::quantize_image_coloring() takes in an image within
*texture_rectangle_ptr.  Looping over all pixels within the input image,
this method assigns each to a quantized color bin.  If input boolean flag
generate_quantized_color_image_flag==true, the pixels' original RGB values
are replaced with their quantized counterparts.  If
quantized_color_image_filename is an empty string, the quantized image is
exported to /data/ImageEngine/quantized_colors.jpg.

*.  videofunc::filter_color_image() takes in a raw, colored image within
twoDarrays *HtwoDarray_ptr, *StwoDarray_ptr and *VtwoDarray_ptr.  It
computes a quantized color bin for each pixel within the image.  If the
quantized bin number matches any of those within input STL vector
masked_color_bin_numbers, the pixel's color is reset to black.  This method
exports the filtered version of the input image to filtered_image_filename.

============================================================================
BEAST code changes made on Mon, Mar 12, 2012:

*.  Only images corresponding to nodes in child graphs (level 0) are now
returned within Timeline display.

*.  Added estimated epoch times for NewsWrap data set into images table of
IMAGERY database.

*.  PhotoServer now responds to thin client requests to mark images with
n=1,2,3... human faces.  It also exports an image with detected faces
marked by circles when requested via the thin client.

.................

*.  Starting to add step forward and backward functionality into timeline.

============================================================================
BEAST code changes made on Fri, Mar 9, 2012:

*.  Added brown to colorfuncs list of colors.

*.  Added color histogramming into color tab of image search thin client.

============================================================================
BEAST code changes made on Thurs, Mar 8, 2012:

*.  mains/imagesearch/COLOR_HISTOGRAMS loops over all images corresponding
to a specified graph hierarchy.  It computes a color histogram for each
image.  Histogram colors fractions as well as dominant color names are
saved within the image_color_histograms table of the IMAGERY database.

*.  graphdbfunc::retrieve_cousin_node_IDs_from_database() takes in the IDs
for a graph_hierarchy, graph and particular datum.  This method first the
corresponding node ID.  It next retrieves the grandparent ID for the node.
It then issues a SQL call to *gis_database_ptr for all nodes with the same
grandparent.  This method returns an STL vector containing the
grandchildren IDs of all nodes with the same grandparent.

============================================================================
BEAST code changes made on Weds, Mar 7, 2012:

*.  Starting to compute reasonable color histograms for images.

============================================================================
BEAST code changes made on Tues, Mar 6, 2012:

*.  imagesdatabasefunc::write_nodes_json_string() takes in hierarchy and
graph IDs.  It performs a single database call to retrieve all node
metadata for the specified graph and another single database call to
retrieve all image attributes for the graph.  This method explicitly
constructs the JSON string which needs to be sent to Michael Yee's
GraphViewer.  We have tried to streamline this method so that image server
responses to Get_Graph calls issued by the GraphViewer execute fairly
quickly.

*.  imagesdatabasefunc::retrieve_nodes_metadata() issues a single SQL
select command for all node metadata corresponding to the graph specified
by the input hierarchy and graph IDs.  The node metadata is returned via a
set of STL vectors.

*.  imagesdatabasefunc::retrieve_all_attributes() issues a single SQL
select command for all image attributes corresponding to the graph
specified by the input hierarchy and graph IDs.  Each node within the image
graph may have an arbitrary number of attributes.  So this method returns
attribute information within an ATTRIBUTES_METADATA_MAP where the
independent variable is node ID and the dependent variable is an STL vector
of key-value string pairs.

============================================================================
BEAST code changes made on Weds, Feb 29, 2012:

*.  rotation::rotation_taking_u_to_v() tests uhat.dot(vhat).  If equal to
1, this method returns identity matrix.

*.  polygon::generate_interior_triangles() first rotates the currently
polygon so that it lies within the XY plane.  It then decomposes the
rotated polygon into a set of XY triangles.  The polygon and triangles are
then rotated back to their original plane.

*.  Added triangle_poly_ptr member to triangle class along with get method.

*.  plane::polygon_side_query() takes in a polygon which is assumed to
fully lie on either the positive or negative side of the current plane
object.  It returns +1 or -1 to indicate the plane's side on which the
polygon lies.  If the polygon lies within the plane, this method returns 0.

============================================================================
BEAST code changes made on Tues, Feb 28, 2012:

*.  Created new camera_frustum class in src/video
............

*.  Added get_camera_frustum_ptr() to camera class
............

*.  Moved view frustum culling member functions out of camera class into
camera_frustum class.

*.  camera_frustum::RayIntersectsFrustum() takes in a basepoint and
direction vector for an (infinite, not semi-infinite!) ray.  An infinite
line intersects the camera frustum in either 0, 1 or 2 points.  The
intersection points are returned in an STL vector.

*.  linesegment::frac_distance_along_infinite_line() returns a positive
value if input currpoint lies "upstream" of v1 in the +e_hat direction.  It
returns a negative value if currpoint lies "downstream" of v1 in the -e_hat
direction.  And it returns NEGATIVEINFINITY if currpoint doesn't lie along
the infinite line defined by the current line segment.

*.  Created new Clipping and ClippingKeyHandler classes within new
osg/osgClipping subdir.

.............

*.  Starting to clip polyhedra against selected OBSFRUSTUM.

============================================================================
BEAST code changes made on Mon, Feb 27, 2012:

*.  PhotoServer::get_connected_graph_components() takes in a graph
hierarchy ID.  It generates and returns a JSON string containing graph
level, connected graph component ID and n_nodes per component metadata.

*.  imagesdatabasefunc::get_node_ID() takes in an image's campaign, mission
and image IDs.  It returns the node ID corresponding to graph_ID within the
nodes table of the IMAGERY database.

============================================================================
BEAST code changes made on Fri, Feb 24, 2012:

*.  Record n_connected_components in graph_hierarchy table and
connected_component_ID in nodes table of IMAGERY database.  

........................

*.  Starting to send connected component info to Michael's graph viewer.

........................

*.  mains/imagesearch/IMAGE_OVERLAP_GRAPH loops over all aerial video
frames specified by input campaign and mission IDs.  It first defines a
bbox based on aerial camera's track in UTM spac.e For each video frame,
IMAGE_OVERLAP_GRPAH reconstructs camera based on params retrieved from
sensr_metadata table of IMAGERY database.  It loops over a 10x10 pixel
lattice for each video frame and projects each pixel down onto a ground
z-plane...


============================================================================
BEAST code changes made on Tues, Feb 21, 2012; Weds, Feb 22, 2012; Thurs,
Feb 23, 2012:

*.  Added twovector member gxgy_offset to graph class along with set
method.  This member can be used to globally translate all nodes within a
2D graph.

*.  mains/graph/GENERATE_MCL_SCRIPTS creates an executable script which
calls the Markov Cluster Algorithm (MCL) for each connected component of
the current graph.  The executable script is called run_mcl and is written
to mains/photosynth/.


*.  graph_hierarchy::destroy_hierarchy() deletes all dynamically
instantiated graphs within the current hierarchy and clears member STL map
graphs_map.

*.  Generalized multiple methods in graphdbfuncs and PhotoServer to take
both hierarchy and datum IDs.  Recall datum ID no longer uniquely specifies
entries within nodes table of IMAGERY database.

*.  graph::reorder_nonnull_ptr_nodes() iterates over all entries within STL
map member nodes_map.  It ignores any null-valued node pointers.  The
remaining IDs for the non-null nodes are sorted and set equal to member
node_order.

*.  graph_hierarchy::concatenate_SQL_insert_files() merges all SQL files
containing insertion commands for graphs, nodes and links over various
graph levels and connected components into single SQL files.

*.  Made huge numbers of changes to the processing codes for image graph
generation.  Can now relatively easily generate and view graphs with many
disconnected components.

============================================================================
BEAST code changes made on Fri, Feb 17, 2012:

*.  Eliminated general_string_properties member from Messenger class.

============================================================================
BEAST code changes made on Thurs, Feb 16, 2012:

*. jsonfunc::write_data_json_string() now returns epoch time in integer
millisecs since midnight 1 Jan 1970.

*.  imagesdatabasefunc::retrieve_median_image_time() queries the images
table within *gis_database_ptr for UTC times measured in epoch seconds
corresponding to the input campaign and mission IDs.  It returns their
median value.

*.  Added tomcat_URL_prefix member to WebServer class along with get
method.

============================================================================
BEAST code changes made on Weds, Feb 15, 2012:

*.  In PhotoServer::generate_JSON_response_to_image_times(), fixed
median_epoch_time error which completely fouled up TIMELINE operation!


============================================================================
BEAST code changes made on Mon, Feb 13, 2012:

*.  Fixed bad SQL call bug in graphdbfunc::get_zeroth_node_given_level().

*.  PhotoServer::generate_JSON_response_to_requested_photo() now takes in
datum_ID as argument and no longer computes this parameter.


============================================================================
BEAST code changes made on Fri, Feb 10, 2012:

*.  Fixed two bad bugs in PhotoServer.

....................

*.  Can now store and retrieve image attribute keys, values and value-types
from IMAGERY database.


============================================================================
BEAST code changes made on Thurs, Feb 9, 2012:

*.  Edge list filename now passed as explicit input parameter to
graph_hierarchy::build_hierarchy().  GENERATE_PHOTO_HIERARCHY now sends
connected edgelist filename to build_hierarchy().


============================================================================
BEAST code changes made on Weds, Feb 8, 2012:

*.  Get_Graph call to PhotoServer now returns JSON string which contains
epoch times measured in secs since midnight 1 Jan 1970 for each node

...........

*.  Disconnected nodes are still slipping into GENERATE_PHOTO_HIERARCHY!

============================================================================
BEAST code changes made on Fri, Feb 3, 2012:

*.  mains/plume/FILTERMASKS reads in raw mask filenames from the photos
table in the plume database.  At each time slice, it finds n_timesteps
masks earlier and later in time.  FILTERMASKS uses gaussian weights to
generates a temporally averaged mask.  Both greyscale and colored versions
of the temporal average masks are exported as JPG files to the same
subdirectories containing the original raw masks.

*.  mains/plume/GENERATE_AVIS loops over the 10 tripod cameras.  For each
camera, it retrieves all colored mask jpeg files in temporal order.  This
program then forms an mpeg4 AVI movie from the colored jpeg files.  The 10
output AVI files are exported to finished_movie_subdir.

*.  mains/plume/DBVISIBILTY is a simplified version of DBVOLUME.  It reads
in calibration parameters for N <= 10 fixed tripod cameras from the sensors
table of the PLUME database.  DBVISIBILITY instantiates a
VolumetricCoincidenceProcessor volume whose lateral dimensions are
initially set by the cameras' positions.  DBVISIBILITY iterates over all
voxels within the VCP volume and projects each into all cameras' image
planes.  If the voxel falls inside some minimal number of cameras image
planes, it is marked with a p value proportional to that number.
DBVISIBILITY generates a TDP file for the point cloud associated with all
of the marked voxels.

.....................

*.  

============================================================================
BEAST code changes made on Weds, Jan 11, 2012:

*.  Added password member with default postgres value to database class
along with get method.  

*.  Added password argument to connection string in
gis_database::open_OGR_connection().  Also reset second TRUE argument to
FALSE in this method.  BEAST can now at least talk to TOC database again...

*.  Deleted mains/photosynth/Qt/packages/TOC_metadata.pkg from repository.
Now need to manually set this soft link on separate machines!

============================================================================
BEAST code changes made on Tues, Jan 3, 2012:

*.  mains/plume/DBVOLUME now exports package files corresponding to smoke
photos using camera metadata retrieved from plume database. 

*.  

============================================================================
BEAST code changes made on Thurs, Dec 21, 2011:

*.  imagefunc::resize_image() rescales the input image so that its new
width and height do not exceed new_max_width and new_max_height.  The
aspect ratio of the output image equals that of the input image.

*. mains/utility/IMAGERESIZE reads in a set of JPEG or PNG files within the
current subdirectory.  It generates a new set of image files whose pixel
width and height are guaranteed to not exceed 2400.  The aspect ratio of
each output image equals that of its input counterpart.

============================================================================
BEAST code changes made on Weds, Dec 21, 2011:

*.  clock::datenum_to_elapsed_secs() takes in double datenum which
represents the number of *days* since 1 January 0000.  It returns the
corresponding number of seconds elapsed since 1 Jan 1970 at midnight.
