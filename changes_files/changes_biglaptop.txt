===========================================================================
BIGLAPTOP code changes early on Thurs, Jan 9, 2014:

*.  mains/JAV/image_query is working again for JAV video clips.

*.  In several GIST and JAV main programs, we now set
video_frames_input_flag and sqrt_diff_over_sum_flag from values specified
in mains/gist/BoW_params.dat.

*.  Final photon checkin corresponds to pfiles1_9e.tgz.

===========================================================================
BIGLAPTOP code changes early on Mon, Jan 6, 2014:

*.  timefunc::print_elapsed_time() can now export results to ofstream
outstream.

*.  mains/gist/color_BoW_image_comparisons now records final 50,60,70,80,90
percentiles to scores.dat

============================================================================
BIGLAPTOP code changes made on Weds, Jan 1, 2014; Thurs, Jan 2, 2014; Fri,
Jan 3, 2014; Sat, Jan 4, 2014:

*.  mains/gist/GENERATE_BOW_COLOR_SCORES is a variant of
GENERATE_MATCH_SCORES specialized to work with HOG BOW and color features.
It first imports BoW [color] histograms calculated via program
COMPUTE_BOW_HISTOGRAMS [COMPUTE_COLOR_HISTOGRAMS] within an STL map.
GENERATE_BOW_COLOR_SCORES next imports relatively small numbers of pairs of
manually labeled matching & non-matching image filenames generated via
programs GENERATE_[NON]MATCHING_FILENAMES.  Repeated image pair filenames
are ignored.

Video clip and frame IDs are stored as independent variables within STL map
BoW_color_descriptor_scores_map.  Image overlaps for each HOG and color bin
are calculated and stored as dependent score vectors in
BoW_color_descriptor_scores_map.

Iterating over all entries in BoW_color_descriptor_scores_map,
GENERATE_BOW_COLOR_SCORES exports matching_images.dat and
nonmatching_images.dat text files which list n_HOG_bins+n+color_bins
overlap scores for matching and nonmatching image categories. These text
files become input for program SVM_GLOBAL_DESCRIPS.  It also outputs
matching_files.txt and nonmatching_files.txt which contain the names of
paired files whose scores are contained in matching_images.dat and
nonmatching_images.dat.

*.  mains/gist/COLOR_BOW_IMAGE_COMPARISONS imports a probabilistic binary
classifier decision function generated via SVM_GLOBAL_DESCRIPTORS.
It also imports HOG BoW + color histograms for input images.
Looping over all image pairs, COLOR_BOW_IMAGE_COMPARISONS first
computes a color overlap score between two images.  If the initial
color overlap score is less than a user-specified threshold, the
image pair is discarded.  Otherwise, COLOR_BOW_IMAGE_COMPARISONS
evaluates the decision function which uses all
n_HOG_bins+n_color_bins.  If the decision function's total overlap
score exceeds some user-specified threshold, the image pair is
declared to represent a match.  A montage for the pair of matching
images is then generated and stored within a subfolder of
matches_subdir labeled by matching score.

*.  imagefunc::add_text_to_image() overlays a caption onto the specified
input image and exports the annotated image to the specified output image
filename.  The caption's gross location is specified by input parameters
eastwest_location ("east", "west", "center") and northsouth_location
("north","south","center").  This method calls ImageMagick to perform the
text annotation and is more general than our older, deprecated
pngfunc::convert_textlines_to_PNG.

*.  Image query by example is starting to work well for Tidmarsh photos!

*.  In SignPostsGroup::retrieve_signposts_from_PostGIS_database(), replaced
select x(the_geom),y(the_geom) with select st_x(the_geom),st_y(the_geom).
NYC demo building annotations appear again under Postgis 2.X.


*.  In projects/config/common_all.pro, changed -lavcodec.a to
/usr/local/lib/libavcodec.a and similarly for 5 other FFMPEG libraries.
After making this change, we can compile and partially run bluegrass demo
under ubuntu 12.4.  

        /usr/local/lib/libavdevice.a \
        /usr/local/lib/libavfilter.a \
        /usr/local/lib/libavformat.a \
        /usr/local/lib/libavcodec.a \
        /usr/local/lib/libavutil.a \
        /usr/local/lib/libswscale.a \

============================================================================
BIGLAPTOP code changes made early on Tues, Dec 31, 2013:

*.  Extensively overhauled and simplified mains/gist/GENERATE_BOW_SCORES.

*.  Overhauled mains/gist/generate_[non]matching_filenames.cc.

.................


*.  Trying to overhaul mains/gist/BoW_image_comparisons.cc.  But current
results are definitely inconsistent with very good results generated on Dec
29 with old version of this program.


============================================================================
BIGLAPTOP code changes made on Sat, Dec 28, 2013; Sun, Dec 29, 2013; early
Mon, Dec 30, 2013:

*.  Trying to consolidate parameters within all HOG BoW codes so that they
are imported from a common input text file.

*.  Streamlined mains/JAV/compare_BOW_histograms.cc.

*.  mains/video/MONTAGEVIEW imports some number of image filenames as
command line arguments.  After downsizing each input image file, it
concatenates them together and forms a single output image.  If the command
line does not contain "NO_DISPLAY", MONTAGEVIEW pops open a window
containing the concatenated montage image.

*.  mains/JAV/IMAGE_QUERY asks the user to choose a video corpus.  It then
requests the clip and frame IDs for some video frame (which need not
necessarily correspond to a keyframe).  IMAGE_QUERY first pops open a
window displaying the query image.  It next computes a histogram for the
query image over the HOG BoW dictionary.  It then matches the query image's
histogram against histograms for every keyframe within the specified video
corpus.  IMAGE_QUERY generates a montage from all keyframes whose matching
scores with the input query image exceed some reasonable threshold value.
A second window is popped open which displays the matching results in
montage format.

*.  videofunc::force_size_image() takes in the filename for some image
along with output x and y pixel dimensions.  It executes an ImageMagick
command which rescales and crops the image so that the output image has
precisely the specified pixel dimensions.

*.  mains/imagesearch/STDSIZE_IMAGES scans through images within
bundler_IO_subdir/images.  It rescales and crops each image so that the new
version's pixel dimensions precisely equal the specified standard width and
height.  The standardized images are exported to
bundler_IO_subdir/standard_sized_images.

*.  Trying to generalize HOG BoW coarse image matching pipeline procedure
to handle 10K Tidmarsh images.

============================================================================
BIGLAPTOP code changes made on Fri, Dec 27, 2013:

*.  Trying to improve coarse image matching via HOG BOWs.

============================================================================
BIGLAPTOP code changes made on Weds, Dec 25, 2013; Thurs, Dec 26, 2013;
early Fri, Dec 27, 2013:

*.  mathfunc::unique_integer() takes in two ints i and j along with some
upper bound on all possible i values.  It returns a unique integer which
can replace (i,j) as a label.

*.  HOG BoW coarse matching among early Sep, w_transcript & BB 25 video
keyframes is starting to work!

*.  filefunc::export_floats() exports STL vector float_values to a binary
output file.

*.  Streamlined mains/JAV/compare_BoW_histograms.cc and
mains/gist/generate_BoW_scores which now exports outputs to [imports inputs
from] binary rather than text files.

============================================================================
BIGLAPTOP code changes made on Mon, Dec 23, 2013:

*.  Added using::cin to 4 programs in mains/dime.

============================================================================
BIGLAPTOP code changes made early on Sat, Dec 21, 2013:

*.  mains/JAV/COPY_JPG_FRAMES is a specialized utility we wrote in order to
rename video frames extracted from Boston Bombing video clips so that they
conform to our JAV naming conventions.  It generates an executable script
filled with cp commands that can be used to fill an appropirate
subdirectory of /data/ImageEngine/.

============================================================================
BIGLAPTOP code changes made early on Fri, Dec 20, 2013:

*.  Extended HOG BoW dictionary and coarse image matching to
n_HOG_bins=2048.  Some hope for testing on different image set from
training one.

============================================================================
BIGLAPTOP code changes made on Thurs, Dec 19, 2013:

*.  mains/JAV/build_HOG_dictionary.cc and compute_BoW_histograms.cc now
downsize all input images to standard pixel widths and heights in order to
compare apples to apples.

============================================================================
BIGLAPTOP code changes made on Sat, Dec 14, 2013; Sun, Dec 15, 2013; early
Mon, Dec 16, 2013:

*.  mains/JAV/BOW_IMAGE_COMPARISONS is a variant of TEST_IMAGE_COMPARISONS.
It imports a probabilistic binary classifier decision function generated
via SVM_GLOBAL_DESCRIPTORS.  It also imports BoW matching scores for pairs
of images.  If the decision function operating on an image pair's global
BoW matching scores exceeds some user-specified threshold, the image pair
is declared to represent a match.  A montage for the pair of matching
images is then generated and stored within matches_subdir.

*.  mains/JAV/BUILD_HOG_DICTIONARY is a superficial rewrite of Davis King's
quick-n-dirty code to generate a BoW dictionary from HOG features extracted
from an input set of images.  It partitions the HOG descriptor space with
randomly oriented planes.  "Voronoi cells" within this partitioned space
form HOG words.  BUILD_HOG_DICTIONARY exports a serialized version of the
random projection hash to a binary output file in BoW_histograms_subdir.

*.  mains/gist/GENERATE_BOW_SCORES is a variant GENERATE_MATCH_SCORES
specialized to work exclusively with HOG BOW features.  It first imports
relatively small numbers of pairs of manually identified matching &
non-matching image filenames generated via programs
GENERATE_[NON]MATCHING_FILENAMES.  An STL map is instantiated to hold
quadruples formed from the image pairs' clip and frame IDs.
GENERATE_BOW_SCORES next imports scores indicating BoW overlap for each HOG
word.  Dependent score vectors are filled for independent image pair
quadruples within the STL map. Repeated image pair filenames are ignored.

Iterating over all entries in the STL map, GENERATE_BOW_SCORES exports
matching_images.dat and nonmatching_images.dat text files which list
n_HOG_bins feature matching scores for matching and nonmatching image
categories.  These text files become input for program SVM_GLOBAL_DESCRIPS.
It also outputs matching_files.txt and nonmatching_files.txt which contain
the names of paired files whose scores are actually exported in
matching_images.dat and nonmatching_images.dat.

*.  mains/gist/GENERATE_EDGELIST imports image basenames from
bundler_IO_subdir/image_list.dat .  It next recovers coarse image matching
scores generated by program BOW_IMAGE_COMPARISONS.  After querying the user
to enter a minimum graph edge weight threshold, GENERATE_EDGELIST exports
an edge list which can be used to form an image search network.

*.  Coarse image matching on 20 w_transcript NewsWrap video clips via HOG
BoW with a Histogram Intersection Kernel SVM decision function is starting
to work pretty well !

============================================================================
BIGLAPTOP code changes made early on Fri, Dec 13, 2013:

*.  Trying to train BoW for w_transcripts video frames.

.........

*.  Still trying to train BoW for w_transcripts video frames.

============================================================================
BIGLAPTOP code changes made on Thurs, Dec 12, 2013:

*.  Added Davis' quick-n-dirty HOG BoW program to repository.

============================================================================
BIGLAPTOP code changes made on Weds, Dec 11, 2013:

*.  Trying to recover quasi-reasonable coarse image classification for JAV
news video datasets.  No luck so far.

============================================================================
BIGLAPTOP code changes made on Sun, Dec 8, 2013:

*.  Added mains/newyork/packages/bundler,bundler_corrected_photos to
repository.

============================================================================
BIGLAPTOP code changes made early on Weds, Dec 4, 2013:

*.  Fixed curr_x,y,z bug in mains/photosynth/mini_convert.cc .  Also
tenatively set georegistered_flag=true for camera_ptr.  And hardwired
georegistered_flag=true in mains/aerosynth/PLY2TDP.  After making these
changes, GEO demos all work OK.

============================================================================
BIGLAPTOP code changes made on Mon, Dec 2, 2013:

*.  In bunderfunc::extract_Z_ground(), we now compute Zground from
pmvs/model/pmvs_options.txt.tdp rather than thresholded_xyz_points.tdp.
Ground extraction in particular and GEO demo work OK again.

..............

*.  After getting lots of mapserver help from Michael Yee, LOST is working
on BIG laptop!

============================================================================
BIGLAPTOP code changes made on Thurs, Nov 28, 2013; Fri, Nov 29, 2013; Sat,
Nov 30, 2013; Sun, Dec 1, 2013:

*.  mains/JAV/HOG_DETECT is a nontrivial rewrite of Davis King's HOG
template-based object detector.  It first imports a set of image filenames
from some specified directory.  It also imports a previously trained HOG
template.  Using DLIB's parallel-for mechanism, HOG_DETECT then searches
for objects matching the HOG template within each input image.  Detected
object bounding boxes are exported to an output text file.

*.  mains/JAV/FLIP_LEFTFACING_IMAGES imports a set of images which are
assumed to all be "left facing" (e.g. profiles of people all looking
towards the left of the image plane).  It calls ImageMagick's convert flop
command in order to flip the image about the center vertical axis.  The
resulting output is "right-facing".

*.  mains/imagesearch/LINK_RENAME_IMAGES imports a set of raw image filenames
from a specified subdirectory.  It first alphabetically sorts the
input image filenames.  It next wraps the the filenames in double
quotes to shield subsequent link commands from white spaces.
After querying the user to enter the first image's ID,
LINK_RENAME_IMAGES generates an executable script which links the
input raw filenames to homogenized and ordered output filenames.

*.  mains/JAV/RESIZE_IMAGES imports a set of raw images from some specified
subdirectory.  It first downsizes all images so that they do not exceed
some reasonable pixel width and height.  RESIZE_IMAGES then upsamples the
homogenized images so that relatively small 2D objects have some
possibility for being detected via Davis King's HOG template training code.
RESIZE_IMAGES also checks for corrupted input image files.  If found, such
corrupted images are simply ignored.

*.  video/object_detector::combine_HOG_templates() takes in a set of
filenames which we assume correspond to equally sized HOG templates.
Following some sample code written by Davis King, we extract weights from
each input HOG template.  The weights are then fed into a combined HOG
template which is exported to a new output binary file.

*.  mains/JAV/COMBINE_HOG_DETECTORS imports a set of equally sized HOG
templates.  It combines and exports them into a single binary file.

*.  mains/JAV/DISPLAY_HOG_TEMPLATE queries the user to enter the filename
for some individual or combined HOG template file residing in
HOG_template_subdir.  It then calls dlib's draw_fhog command which pops
open a window displaying the HOG templates as a lattice of edgelets.

============================================================================
BIGLAPTOP code changes made early on Weds, Nov 27, 2013:

*.  Updated our Makefile so that we can now successfully compile and run
Davis' HOG object detector program within our source tree.

============================================================================
BIGLAPTOP code changes made on Sun, Nov 24, 2013:

*.  Added more notes to README.ubuntu about configuring gnome classic
running under ubuntu 12.4 on new machines.

============================================================================
BIGLAPTOP code changes made early on Fri, Nov 22, 2013:

*. Fixed bug in mains/gist/GENERATE_MATCH_SCORES.

*. Coarse image matching pipeline can now start to handle working with 11
features.

============================================================================
BIGLAPTOP code changes made early on Thurs, Nov 21, 2013:

*.  videofunc::draw_solid_squares() takes in a texture_rectangle along with
a set of square centers.  It recolors the pixels for each square according
to the specified color index.

*.  mains/JAV/TIEPOINT_FLOW now draws stationary as well as moving SURF
tiepoints.

============================================================================
BIGLAPTOP code changes made early on Weds, Nov 20, 2013:

*.  mains/gist/COMPARE_SEGMENT_HISTOGRAMS imports sets of cumulative
probability distribution functions generated by program
mains/JAV/SEGMENT_VIDEO_FRAMES.  Looping over all imported cumulative
distributions, it computes the maximum difference between pairs.  The
similarity between two cumulative distributions is taken to equal 1 - their
maximum difference.  The similarity scores are sorted in descending order
and exported to an output text file with the corresponding pair's image
filenames.

============================================================================
BIGLAPTOP code changes made early on Tues, Nov 19, 2013:

*.  mains/JAV/SEGMENT_VIDEO_FRAMES is now starting to compute MoI
eigenvalues and eigenvector rotation angle.

.................

*.  mains/JAV/SEGMENT_VIDEO_FRAMES also generates cumulative distribution
functions for the zeroth ("mass") and second ("moment of inertia") moments
of all nontrivially-sized parent regions.  The cumulative distribution
functions are exported metafile subdirectories of the segmentation subdir.


============================================================================
BIGLAPTOP code changes made on Sun, Nov 17, 2013; early Mon, Nov 18, 2013:

*.  Generalized mathfunc::median_value_and_quartile_width() to work with
RGB threevectors.

*.  Added DestroyNode() member function to union_find class.

*.  mains/JAV/SEGMENT_VIDEO_FRAMES imports video frames from a specified
subdirectory.  After downsizing each input frame, it sets up a lattice of
seed pixel locations.  SEGMENT_VIDEO_FRAMES then performs "color oozing" at
each seed location and generates a pixel flood region.  Different flood
regions whose median RGB colors are sufficiently similar are assigned to
the same equivalence class via a union_find datastructure.  Distinct flood
regions are colored and exported to an segment image file.

*.  union_find::get_children_nodes_corresponding_to_parent() iterates over
all nodes with the specified input parent ID.  It returns the childrens'
node IDs in an STL vector.

.......................

*.  mains/JAV/SEGMENT_VIDEO_FRAMES is now starting to compute prob dists
for fractional areas of parent regions.

============================================================================
BIGLAPTOP code changes made on Fri, Nov 8, 2013; Sat, Nov 9, 2013; Mon, Nov
11, 2013; Tues, Nov 12, 2013:

*.  mains/JAV/EXTRACT_SURF_FEATURES imports a set of image files.  It
extracts SURF features via calls to DLIB.  Serialized binary files
containing SURF features for each image are exported to a SURF_features
subdirectory.

*. mains/gist/COMPUTE_SURF_HISTOGRAMS imports SURF features extracted by
program EXTRACT_SURF_FEATURES from a set of input jpg images.  For each
image, 1D probability distributions are calculated for SURF interest
points' scales, angles and separation distances.  Probability densities and
cumulative functions are exported to metafile subdirectories of the input
SURF keys directory.

*.  mains/gist/COMPARE_SURF_HISTOGRAMS imports sets of cumulative
probability distribution functions generated by program
COMPUTE_SURF_HISTOGRAMS.  Looping over all imported cumulative
distributions, it computes the maximum difference between successive pairs.
The similarity between two cumulative distributions is taken to equal 1 -
their maximum difference.  The similarity scores are sorted in descending
order and exported to an output text file with the corresponding pair's
image filenames.

============================================================================
BIGLAPTOP code changes made on Tues, Nov 5, 2013:

*.  Added global color matching to mains/JAV/tiepoint_flow.cc

============================================================================
BIGLAPTOP code changes made on Sat, Nov 2, 2013; Sun, Nov 3, 2013; early
Mon, Nov 4, 2013:

*.  mains/JAV/SIFTMATCH_SUCCESSIVE_FRAMES imports a set of image files.  It
extracts SIFT/ASIFT features via calls to the fast SIFT (affine SIFT)
library.  SIFTMATCH_SUCCESSIVE_FRAMES performs tiepoint matching via
fundamental matrix estimation and RANSAC on the consolidated sets of image
features.  Successive image tiepoints and feature tracks labeled by unique
IDs are exported to output text files.

*.  In jsonfunc::generate_discrete_color_mapper_JSON_string(), we're trying
to generate a "SET_DISCRETE_COLOR_MAPPER" JSON string which follows the
schema specified by Michael Yee in November 2013.  Not working so far...

============================================================================
BIGLAPTOP code changes made early on Fri, Nov 1, 2013:

*.  mains/JAV/IDENTIFY_KEYFRAMES now exports SQL scripts which updates the
keyframes column in the videos table.  All video frames are assigned to
keyframe representatives.

============================================================================
BIGLAPTOP code changes made early on Thurs, Oct 31, 2013:

*.  videosdatabasefunc::get_keyframe_IDs() interrogates the videos table
within the IMAGERY database for entries which have non-null valued keyframe
IDs.  It returns the keyframe IDs along with their corresponding image IDs
in STL vectors.

*.  mains/JAV/IDENTIFY_KEYFRAMES is a minor variant of program
VIDEO_KEYFRAMES.  It is intended to work with a set of videos that have
already been entered into the IMAGERY database.  IDENTIFY_KEYFRAMES updates
the videos table in the IMAGERY database with keyframe IDs after they're
identified.

============================================================================
BIGLAPTOP code changes made on Tues, Oct 29, 2013 & early Weds, Oct 30,
2013:

*.  In mains/imagesearch/video_temporal_layout.cc, implemented Delsey's
suggestion to orient multiple video clips vertically rather than
horizontally for easier audio track text display in Michael's graph viewer.

============================================================================
BIGLAPTOP code changes made on Mon, Oct 28, 2013 & early Tues, Oct 29,
2013:

*.  mains/gist/COMPARE_XXX_HISTOGRAM programs can now compare just video
keyframes.

*.  coarse keyframe matching basically works for early Sep 2013 NewsWrap
clips

...............

*.  Eliminated all references to ellipses1/ subdir within mains/gist
programs.

*.  coarse keyframe matching is working so-so for early Sep and Oct
Newswrap.

*.  Added logic to Clock::YYYY_MM_DD_H_M_S() to handle dates with secs very
close to but slightly less than an integer value.

*.  Overhauled mains/imagesearch/update_rel_frame_times.cc

============================================================================
BIGLAPTOP code changes made on Sun, Oct 27, 2013:

*.  Refined video keyframe identification.  

*.  Modifed mains/gist/compare_color_histograms.cc to work with just video
keyframes.

============================================================================
BIGLAPTOP code changes made early on Fri, Oct 25, 2013:

*.  Streamlined mains/gist/COMPUTE,COMPARE_COLOR_HISTOGRAMS.cc

============================================================================
BIGLAPTOP code changes made late on Thurs, Oct 24, 2013:

*.  Fixed some bad string tokenization problems.

................

*.  mains/photosynth/GENERATE_CCS now exports text files containing image
URLs versus node IDs for each connected component. 

============================================================================
BIGLAPTOP code changes made late on Tues, Oct 22, 2013:

*. Refined parsing of file text.

*. Refined parsing lines of numbers.

..............

*.  Reasonable coarse matching results starting to emerge for Tidmarsh
imagery.

============================================================================
BIGLAPTOP code changes made late on Mon, Oct 21, 2013 & early Tues, Oct 22,
2013:

*.  Resize jpg images down to maximum 1000 pixel size before converting
them to png images in mains/JAV/PLOT_AFFINE_ELLIPSES.

*.  In contour::generate_interior_triangles(), we discovered the hard and
painful way that curr_Vertex can sometimes numerically equal prev_Vertex.
If so, we randomly perturb the 3 coordinates of curr_Vertex in order to
avoid overwriting the previous vertex within the vertices handler member of
*triangles_group_ptr.

..............

*.  mains/gist/COMPUTE_ELLIPSE_HISTOGRAMS now exports metafiles directly to
ellipses/metafile with correct names.  So several instances of this program
can now be run simultaneously.

..............

*.  small changes to GIST programs

============================================================================
BIGLAPTOP code changes made early on Sat, Oct 19, 2013:

*.  triangles_group::triangle_edge_lengths() iterates over all vertices
within *vertices_network_map_ptr.  It computes the distance between each
vertex in the network with its nearest neighbors.  The distances are
returned within an STL vector.  Note that the returned STL vector should
contain each triangle edge length twice!

*.  mains/gistCOMPUTE_ELLIPSE_HISTOGRAMS imports ellipse parameters
extracted by program PLOT_AFFINE_ELLIPSES from a set of input jpg images.
For each image, 1D probability distributions are calculated for the
ellipses' fractional areas, number density and center separation distances.
Probability densities and cumulative functions are exported to metafile
subdirectories of the input ellipses directories.

*.  mains/gist/COMPARE_ELLIPSE_HISTOGRAMS imports sets of cumulative
probability distribution functions generated by program
COMPUTE_ELLIPSE_HISTOGRAMS.  Looping over all imported cumulative
distributions, it computes the maximum difference between successive pairs.
The similarity between two cumulative distributions taken to equal 1 -
their maximum difference.  The similarity scores are sorted in descending
order and exported to an output text file with the corresponding pair's
image filenames.

============================================================================
BIGLAPTOP code changes made early on Fri, Oct 18, 2013:

*.  geometry_func::quadratic_form_to_ellipse_params() takes in coefficients
a,b,c which appear in the quadratic part of the general equation for an
ellipse:

 			 a X**2 + 2 b X Y + c Y**2 = 1

If the input coefficients do NOT define an ellipse, this boolean
method returns fals.e Otherwise, it returns the ellipse's major and
minor axis lengths along with the angle phi which the major axis
makes relative to +x_hat.

*.  geometry_func::ellipse_points() takes in quadratic parameters a,b,c for
an ellipse along with its center coordinates.  It fills and returns an STL
vector containing the specified number of points lying along the ellipse.


============================================================================
BIGLAPTOP code changes made early on Thurs, Oct 17, 2013:

*.  Can now display and pick 3D feature points corresponding to test image
pairs.

................

*.
FeaturesGroup::display_montage_corresponding_to_selected_3D_feature_point()
retrieves the most recently selected feature's 3D coordinates.  It performs
a brute-force search through member STL map *montage_map_ptr for this input
threevector.  If a corresponding pair of images is found, this method
generates their montage and displays it on the screen.

*.  mains/gist/VIEW_IMAGEPAIR_FEATURES imports a set of
"matching/nonmatching" training or test image pair 3D features.  Feature
points are colored to indicate training labels or test score function
values. A decision plane generated via SVM_GLOBAL_DESCRIPS is also
displayed in the 3D feature space.

When in INSERT_FEATURE mode, a user can select any feature.  The
corresponding image pair is displayed as a montage.

................

*.  Added -D DLIB_JPEG_SUPPORT & -D DLIB_PNG_SUPPORT to Makefile to enable
jpeg and png library support under dlib.

============================================================================
BIGLAPTOP code changes made on Tues, Oct 15, 2013; early Weds, Oct 16,
2013:

*.  mains/gist/LABELED_IMAGE_MONTAGER imports names of images output by
program GENERATE_MATCH_SCORES which were manually identified as matching
and nonmatching.  For each pair, a montage image is generated and moved
into subdirectories of labeled_images_subdir.  The montage's filename along
with an integer ID are saved text files within the matching and nonmatching
image subdirectories.

*.  Added set_nearest_worldspace_point() and get_nearest_worldspace_point()
methods to PointFinder class.

...............

*.  mains/OSG/GENERATE_TEST_POINTS exports an OSGA file containing 4
colored points located at (0,0,0), (10,0,0), (0,10,0) and (0,0,10).

*.  stringfunc::string_to_numbers() attempts to extract as many legimate
numbers from the input numberstring as it can reasonably parse.

*.  Added insert_single_feature_flag member to FeaturePickHandler class
along with set method.

============================================================================
BIGLAPTOP code changes made early on Sat, Oct 12, 2013; Sun, Oct 13, 2013;
Mon, Oct 14, 2013:

*.  texture_rectangle::pixel_RGB_mu_and_sigma() computes the mean and
standard deviation of all red, green and blue pixels within the current
texture rectangle.

*.  texture_rectangle::get_all_RGB_values() fills STL vectors with RGB
values as efficiently as possible.

*.  videofunc::image_pair_cross_correlation() takes in two texture
rectangles whose width and heights must be equal.  It computes and
returns their normalized cross correlation:

cross_correl=1/n_pixels sum_i,j { 
	[I1(i,j)-<I1>] [I2(i,j)-<I2>] }/(sigma1*sigma2) }

*.  mains/gist/GENERATE_NONMATCHING_FILENAMES scans over montage images
(generated by program TEST_IMAGE_COMPARISONS) within a specified input
subdirectory.  It extracts clip and frame IDs for nonmatching image pairs.
Full path filenames for nonmatching image pairs are then exported to an
output text file.

============================================================================
BIGLAPTOP code changes made early on Fri, Oct 11, 2013:

*.  Nonparametric dissimilarity measure seems to work well for color
matching.

.............

*.  Renamed mains/gist/compute[compare]_gist as
compute[compare]_gist_histograms.cc

============================================================================
BIGLAPTOP code changes made on Thurs, Oct 10, 2013:

*.  Nonparametric dissimilarity measure seems to work better than
conventional dotproducts for matching images based on their LBP features.

============================================================================
BIGLAPTOP code changes made early on Thurs, Oct 10, 2013:

*.  mains/gist/TEST_IMAGE_COMPARISONS.cc now exports image pair montages
into subdirs labeled by matching scores.

============================================================================
BIGLAPTOP code changes made on Weds, Oct 9, 2013:

*.  Annotate matched image montages with color, gist, texture and matching
scores.  

============================================================================
BIGLAPTOP code changes made on Tues, Oct 8, 2013:

*.  Trying to run global descriptor matching on Tidmarsh imagery.

*.  Running near_duplicates detection on Tidmarsh imagery.

============================================================================
BIGLAPTOP code changes made on Mon, Oct 7, 2013 & early Tues, Oct 8, 2013:

*.  mains/gist/COMPUTE_LBP_HISTOGRAMS is a minor rewrite of LBPTest.cpp
written by Navid Nourani-Vatani on 1/25/2013.  It subdivides each input
image into a small number of regions of interest.  Within each ROI,
COMPUTE_LBP_HISTOGRAMS calls Noruani-Vatani's LBP descriptor library and
generates a histogram.  The ROI histgrams are individually L2-normalized
and then concatenated together into a single large descriptor which is also
L2-normalized.  Concatenated LPB histograms are exported to output text
files.

*.  mains/gist/COMPARE_LBP_HISTOGRAMS imports a set of LBP histograms
generated by program COMPUTE_LBP_HISTOGRAMS.  Looping over all imported
histograms, it computes dotproducts between successive pairs.  The
dotproducts are sorted in descending order and exported to an output text
file with the corresponding pair's image filenames.

============================================================================
BIGLAPTOP code changes made on Sat, Oct 5, 2013; Sun, Oct 6, 2013:

*.  mains/gist/NEAR_DUPLICATES imports comparison scores for pairs of
images based upon their color histogram, gist descriptor and texture
histogram dotproducts.  It identifies image pairs which have color, GIST
and texture scores nearly equal to unity.  A montage of such nearly
identical images is generated and displayed.  The montage file is stored
within a near_duplicates subdir of JAV_subdir.

*.  mains/imagesearch/DRAW_FACE_CIRCLES imports face circle parameters
generated via program FINDFACES.  It superposes purple circles on images
containing detected faces.  The annotated pictures are exported to
faces_subdir.

*.  mains/gist/TRAIN_IMAGE_COMPARISONS imports comparison scores for pairs
of images based upon their color histogram dotproducts, gist descriptor
difference magnitudes and texture histogram dotproducts.  It first stores
these measures of image similarity within an STL map which depends upon
first and second clip IDS and frame IDs.  Iterating over a subset of the
entries within the STL map, TRAIN_IMAGE_COMPARISONS then displays a pair of
images and asks the user to label them as either matching or nonmatching.
The triple of global image descriptors is then exported to either a
matching or non-matching text file.  The labeled triple descriptors can
later be used to generate binary classified and/or rank SVM functions.

*.  mains/gist/SVM_GLOBAL_DESCRIPS first imports matching and non-matching
labels for pairs of images generated via program TRAIN_IMAGE_COMPARISONS.
It then uses Davis King's DLIB library to load the input samples along with
their positive and negative labels.  After the ordering of the input
samples is randomized, cross-correlation is performed in order to estimate
a reasonable value for a linear-SVM slack variable C.  DLIB then trains
binary decision and probabilistic decision functions. Serialized versions
of the binary and probabilistic decision functions are exported to output
binary files in learned_funcs_subdir.

*.  mains/gist/TEST_IMAGE_COMPARISONS imports a probabilistic binary
classifier decision function generated via SVM_GLOBAL_DESCRIPTORS.  It also
imports color histogram, GIST descriptor and texture histogram dotproducts
for pairs of images.  If the decision function operating on an image pair's
global descriptor dotproducts exceeds some user-specified threshold, the
image pair is declared to represent a match.  A montage for the pair of
matching images is then generated, displayed and stored within
matches_subdir.

============================================================================
BIGLAPTOP code changes made early on Fri, Oct 4, 2013:

*.  mains/gist/CLASSIFY_IMAGE_COMPARISONS imports comparison scores for
pairs of images based upon their color histogram dotproducts, gist
descriptor difference magnitudes and texture histogram dotproducts.  It
first stores these measures of image similarity within an STL map which
depends upon first and second clip IDS and frame IDs.  Iterating over a
subset of the entries within the STL map, CLASSIFY_IMAGE_COMPARISONS then
displays a pair of images and asks the user to label them as either
matching or nonmatching.  The triple of global image descriptors is then
exported to either a matching or non-matching text file.  The labeled
triple descriptors can later be used to generate binary classified and/or
rank SVM functions.

============================================================================
BIGLAPTOP code changes made early on Weds, Oct 2, 2013:

*.  image/graphicsfunc::twopass_cc_labeling() implements the "two-pass"
algorithm presented in the connected components labeling wikipage.

============================================================================
BIGLAPTOP code changes made early on Thurs, Sep 26, 2013:

*.  Added tires to TEL model.

============================================================================
BIGLAPTOP code changes made on Saturday, Sep 21, 2013:

*.  Continuing to build 3D TEL model.  We now require most model edges to
align with n_hat, a_hat or z_hat direction vectors.

============================================================================
BIGLAPTOP code changes made early on Thurs, Sep 19, 2013:

*.  mains/korea/RELATIVE_POSE imports manually selected tiepoint image
plane coordinates for 2 images.  We also hardwire the images' focal
parameters derived via program F_FROM_VANISHING_POINTS.  The first camera
is assumed to have a canonical world position and pose.  The second camera
is assumed to reside at a conventional unit distance from the first.  But
we search over two angles phi and theta which describe the second camera's
position relative to the first.  We also search of the second camera's
relative az, el and roll compared to the first.  A score function
consisting of the median distance between closest points of approach for
corresponding backprojected rays is evaluated to find the best 5-parameter
solution for the second camera's relative position and pose.

============================================================================
BIGLAPTOP code changes made on Weds, Sep 18, 2013:

*.  In mains/geo/triangulate.cc, eliminated /home/cho/software in favor of
~/software.

============================================================================
BIGLAPTOP code changes made on Mon, Sep 16, 2013:

*.  Added README.MobileMonitors to repository

*.  Updated suggested GEO demo passes in geo_pass_scripts.cc 

============================================================================
BIGLAPTOP code changes made on Sat, Sep 14, 2013; Sun, Sep 15, 2013:

*.  Tried to streamline GEO demo pipeline.

============================================================================
BIGLAPTOP code changes made on Fri, Sep 13, 2013:

*.  Starting to experiment again with orthorectifying reconstructed FLIR
video frames.

============================================================================
BIGLAPTOP code changes made on Weds, Sep 11, 2013:

*.  mains/photosynth/DENSECLOUD executes a series of steps needed in order to
convert bundler output into a format which can be ingested into Furukawa's
PMVS multi-view stereo system software.  The densely reconstructed point
cloud is exported to dense_cloud.osga within bundler_IO_subdir.

*.  Added dense cloud formation step into GEO demo flow.

============================================================================
BIGLAPTOP code changes made on Tues, Sep 10, 2013:

*. Increased default 2D crosshair size in mains/geo/VIDEO_PROPAGATOR.

*.  Added threeDrays_map in FeaturesGroup class to store 3D ray color index
as function of photo and feature IDs.

*.  bundlerfunc::extract_Zground() imports a thresholded XYZ point cloud
generated by bundler which we assume is georegistered.  It forms the
cloud's Z distribution and searches for peaks.  The lowest peak is assumed
to correspond to a flat, ground plane.  The Z value for the ground plane is
returned by this method.

*.  mains/geo/VIDEO_PROPAGATOR now reports height-above-ground for 3D rays'
intersection point.

============================================================================
BIGLAPTOP code changes made on Mon, Sep 9, 2013:

*.  In FeaturesGroup::backproject_selected_photo_features_as_3D_rays(),
we now color 3D rays according to color_index=photo_ID%7.

============================================================================
BIGLAPTOP code changes made on Sat, Sep 7, 2013; Sun, Sep 8, 2013:

*.  mains/gist/COMPUTE_TEXTURE_HISTOGRAMS loops over all images within some
set of subdirectories.  For each input image, it computes gradient
magnitude and phases for separate R, G and B color channels.  The results
are separated into 45, 90, 135 and 180 orientation angle bins as well as
logarithmic fractional magnitude bins.  Binning according to coarse image
plane gridding is performed as well.  Concatenated texture histograms are
exported to output text files.


*.  mains/gist/HISTCOMPARE imports a set of texture histograms generated by
program COMPUTE_TEXTURE_HISTOGRAMS.  Looping over all imported histograms,
it computes dotproducts between successive pairs.  The dotproducts are
sorted in descending order and exported to an output text file with the
corresponding pair's image filenames.

*.  In akm class, boolean load_SIFT_descriptor() member functions now all
return false if the number of input descriptors equals 0.

*.  mains/JAV/GENERATE_MATCH_SCRIPT queries the user to enter
bundler_IO_subdir.  It then scans the filenames for all images within
bundler_IO_subdir/images/ .  GENERATE_MATCH_SCRIPT then exports an
executable script for program MATCH_SUCCESSIVE_FRAMES.

*.  mains/JAV/MATCH_SUCCESSIVE_FRAMES imports a set of image files.  It
first retrieves color histograms which are assumed to have been
precalculated for all the input images.  MATCH_SUCCESSIVE_FRAMES computes
color histogram dotproducts for successive image pairs.  It further
calculates image 4x4 image sector color histograms.  Median sector
dotproducts between neighboring image pairs are also stored.

This program next extracts SIFT/ASIFT features via calls to the fast SIFT
(affine SIFT) library.  Consolidated SIFT & ASIFT interest points and
descriptors are exported to key files following Lowe's
conventions. MATCH_SUCCESSIVE_FRAMES performs tiepoint matching via
fundamental matrix estimation and RANSAC on the consolidated sets of image
features.  Successive image tiepoints and feature tracks labeled by unique
IDs are exported to output text files.

Empirically derived feature thresholds are used to define video shot
boundaries.  Shot boundary detections are exported to an output text file.

============================================================================
BIGLAPTOP code changes made on Thurs, Sep 5, 2013:

*.  Added earth_mover_distance code to src/optimum subdir.

============================================================================
BIGLAPTOP code changes made on Tues, Sep 3, 2013:

*.  Edge histogram detector is starting to work.  But we suspect working
with line segment detection might be much better for image search purposes.

============================================================================
BIGLAPTOP code changes made on Sat, Aug 31, 2013; Sun, Sep 1, 2013; Mon,
Sep 2, 2013:

*.  mains/imagevocab/DESCRIPTORS_ENTROPY loops over a subset of binarized
SIFT keyfiles.  It computes their descriptors' entropies as defined by Wei
Dong in his Princeton Ph.D. thesis "High-dimensional similarity search for
large datasets".  This program generates and plots a descriptor entropy
distribution.  We observe that this distribution is qualitiatively similar
to the one presented by Dong in fig 6.3 on page 144 of his thesis.

*.  Streamlined and debugged descriptor::entropy() member function

*.  Added new mains subdir mains/JAV (joint audio visual).

*.  gistfunc::compute_sector_color_histogram() takes in integer dices
row_ID and column_ID which must range over the interval [0,3].  It computes
and returns the color histogram within the 1/16th sector of the input image
specified by these input indices.

*.  mains/JAV/SHOT_BOUNDARIES takes in a temporal series of video frames.
GIST descriptors for each video frame are imported.  Each image is also
subdivided into 4x4 sectors within which color histograms are calculated.
Dotproducts between the sectors' current and previous color histograms are
formed, and the median of the 16 dotproducts is returned at each time step.
A shot boundary between two adjacent video frames is declared some
combination of the median dotproduct and change in GIST descriptor
magnitude exceeds an empirically determined threshold function value.

============================================================================
BIGLAPTOP code changes made on Fri, Aug 30, 2013:

*.  As of Fri morning, we're having no luck with generating SIFT word
histograms via random hashing for 5K+ random samples of our 100K+ image
corpus which yield reasonable TFIDF dotproducts.  

*.  akm::compute_image_words() now computes and returns number of distinct
SIFT words for an input image.

============================================================================
BIGLAPTOP code changes made on Thurs, Aug 29, 2013:

*.  In program mains/imagevocab/MYHASH.cc, we're trying again to generate
histograms for each image based upon random hashing.

============================================================================
BIGLAPTOP code changes made on Weds, Aug 28, 2013:

*.  In mains/geo/VISUALIZE_FLIR_METADATA, we now explicitly check that
image JPEG files actually exist before writing out their hardware package
files.

============================================================================
BIGLAPTOP code changes made on Mon, Aug 26, 2013:

*.  mains/imagevocab/PARSE_CLUSTER_CENTROIDS imports a binary file
generated by Wei Dong's out-of-core kmeans clustering program.  It extracts
the number of clusters and their 128-dimensional centroid vectors.

...................

*.  mains/geo/SEPARATED_PACKAGES now exports script for running
VIDEO_PROPAGATOR.

============================================================================
BIGLAPTOP code changes made on Sat, Aug 24, 2013; Sun, Aug 25, 2013:

*.  Added export_to_dense[sparse]_text[binary]_format() methods to
genvector class which call their genmatrix counterparts.

*.  descriptor::entropy() computes the entropy for a SIFT descriptors as
defined by Wei Dong in his 2011 Princeton Ph.D. thesis "High-dimensional
similarity search for large datasets".  See page 144 of
Dong_princeton_0181D_10018.pdf

*.  In
sift_detector::identify_candidate_FLANN_feature_matches_for_image_pair(),
we now rejecting a putative tiepoint pair if either of its descriptors has
a low entropy as defined by Wei Dong in his Princeton Ph.D. thesis.

*.  Intentionally tried to streamline GEO demo programs.

*.  mains/imagevocab/CONCATENATE_BINARY_KEYS imports the inverse square
root of the SIFT descriptor covariance matrix calculated by program
DESCRIPTORS_COVAR.  It next imports binarized SIFT descriptors output by
program BINARIZE_SIFT_DESCRIPTORS.  Looping over some specified number of
all the binarized descriptors, this program whitens them via the inverse
root covariance matrix and exports the results to binary files containing
floats.  We wrote this CONCATENATE_BINARY_KEYS in order to generate binary
input for Wei Dong's out-of-core kmeans program.

============================================================================
BIGLAPTOP code changes made on Mon, Aug 19, 2013:

*.  Updated mains/imagevocab/cell_freq so that it now exports text file
with voronoi cell occupancy numbers as functions of cell ID.

============================================================================
BIGLAPTOP code changes made on Sat, Aug 17, 2013; Sun, Aug 18, 2013:

*.  filefunc::ExportUnsignedChars() writes n_bytes=size unsigned chars from
array data[] to the output binary file specified by filename.

*.  mains/imagesearch/BINARIZE_SIFT_DESCRIPTORS imports all sift keyfiles
from some specified subdirectory.  All 128-dimensional descriptors from a
key file are converted into unsigned char bytes.  They are exported to a
binary file whose byte size = 128*n_features in key file.  The original
text key file is then deleted, and the binary file is compressed.
Empirically, we observe that this binarization procedure cuts down disk
space usage by at least a factor of 4.

*.  Overloaded sift_detector::parse_Lowe_descriptors() parses a SIFT keys
file generated by Lowe's binary or libsiftfast.  It extracts all
descriptors from the input keys file and exports them as unsigned chars
(bytes) to a binary output file.

============================================================================
BIGLAPTOP code changes made on Mon, Aug 12, 2013:

*.  GEO summer demo seems to work OK.

*.  Replaced geolocation member with geolocation_ptr member in camera
class.  Replace get_geolocation() with get_geolocation_ptr().

*.  Added camera_longitude and camera_latitude member vars to PassInfo
class along with set/get methods.

*.  camera::write_camera_package_file() now exports camera lon,lat
geocoords if they're defined.

============================================================================
BIGLAPTOP code changes made on Sat, Aug 10, 2013; Sun, Aug 11, 2013

*.  In gistfunc::compute_gist_descriptor(), we now use jpegtopnm utility
rather than ImageMagick's convert in order to generate PPM files from JPEG
files.  LEAR GIST seems to be handle former better than latter.

*.  mains/imagesearch/COUNT_CCS imports a user-specified edge list for some
SIFT, GIST, color, etc graph.  It also queries the user to enter an edge
weight threshold.  COUNT_CCS scans through the edge list and enters each
node into a map_unionfind data structure.  Nodes connected by an edge are
linked within the map_unionfind.  COUNT_CCS exports a list of connected
components sorted by the number of nodes they contain to an output text
file.

*.  mains/imagesearch/QUANTIZE_COLORS loops over all images within an
images directory.  It exports their color histograms to text files within a
color_histograms subdirectory of the images directory.

*.  gistfunc::GIST_descriptor_matrix() takes in a subdirectory which is
assumed to contain a set of GIST text files corresponding to the images
within input STL vector image_filenames.  It instantiates and returns
*GIST_matrix_ptr whose rows are filled with GIST descriptors.

*.  mains/gist/GIST_COLOR_GRAPH imports a set of thumbnails from a
specified subdirectory of /data/ImageEngine.  It imports previously
computed GIST descriptors and color histograms for each input image.
GIST_COLOR_GRAPH subsequently computes edge weights between all image
nodes.  We require that two images' color and GIST contents be reasonably
similar before a graph edge between them is formed.  This program exports
an edge list which represents a combined GIST-color graph for the imagery
corpus.

============================================================================
BIGLAPTOP code changes made on Thurs, Aug 8, 2013:

*.  In genmatrix::homogeneous_soln(genvector& X), report nontrivial soln
found if (fabs(X.get(i) > 1E-8) for some i.

============================================================================
BIGLAPTOP code changes made on Weds, Aug 7, 2013:

*.  Starting to add tieline homography generation into homography class.

============================================================================
BIGLAPTOP code changes made on Tues, Aug 6, 2013:

*.  In genmatrix::homogeneous_soln(), we now check whether solution is
trivial.  If so, this boolean method returns false.

============================================================================
BIGLAPTOP code changes made on Sun, Aug 4, 2013:

*.  polyhedron::generate_surface_of_revolution() takes in a set of (R,Z)
pairs which defines some 2D curve in 3D world-space.  It spins this curve
about the +z_hat axis to form a surface of revolution.  A quasi-circular
polygon is formed from each (R,Z) input pair.  Edges are then added between
corresponding vertices from adjacent Z-plane polygons.  The revolution
surface is triangulated so that it can be easily displayed as an OSG
Polyhedron object.

*.  Added tip,base member threevectors to polyhedron class along with get
methods for surfaces of revolution.

*.  Added new mains/korea subdir to repository.

============================================================================
BIGLAPTOP code changes made early on Thurs, Aug 1, 2013:

*.  Experimenting with quantizing colors for image thumbnails in
mains/imagesearch/quantize_colors.cc

============================================================================
BIGLAPTOP code changes made on Weds, July 31, 2013:

*.  mains/geo/GEO_PASS_SCRIPTS queries the user to enter a particular GEO
pass (e.g. 20120105_1402).  It first purges any previously-exiting
bundler_IO_subdir corresponding to the specified GEO pass.
GEO_PASS_SCRIPTS then unpacks a "minimal" tarball containing just raw FLIR
video frames plus an excised camera metadata text file.  Finally, it
generates run_generate_peter_inputs, run_visualize_FLIR_metadata and
run_crop_analog_frames scripts for the specified GEO pass.

....................

*.  Following Davis King's suggestion, we've added a sleep command into
mains/geo/flowdiag's infinite while loop.

============================================================================
BIGLAPTOP code changes made on Fri, July 26, 2013 - Tues, July 30, 2013

*.  Affine transformation check on tiepoint inliers seems to be working!

*.  GEO1 demo working with only SIFT (and no AFFINE SIFT) matching seems to
work quite well with intentionally random FLANN seeding in less than 2
minutes!  Reconstruction of 20120105_1402 seems to be insensitive to FLANN
non-thread-safeness and to starting image output by SEPARATED_PACKAGES.

*.  bundlerfunc::median_left_right_residual_distance() computes residual
distances between transformed left points and their right point
counterparts.  It returns the median of these residual distances.
   
*.  Overloaded pngfunc::add_text_to_PNG_image() to incorporate multiple
horizontal lines of text at specified starting pixel locations to an input
PNG file.

*.  mains/geo/FLOWDIAGS is a specialized utility which we wrote for GEO
demonstration purposes.  It listens on an ActiveMQ channel for
"DISPLAY_NEXT_FLOW_DIAGRAM" messages.  When received, FLOWDIAGS retrieves a
pre-generated GEO diagram and annotates it with elapsed times corresponding
to different stages of the algorithm flow.  The annotated diagrams are
subsequently displayed in the current screen's upper left corner.

============================================================================
BIGLAPTOP code changes made on Mon, July 22, 2013:

*.  Updated config/common.pro to incorporate opt/gdal and opt/geos
libraries and header files.

============================================================================
BIGLAPTOP code changes made on Sun, July 14, 2013:

*.  Starting to test GEO pipeline on multiple passes.

============================================================================
BIGLAPTOP code changes made on Sat, July 13, 2013:

*.  Program mains/photosynth/BUNDLER_PHOTOS now exports TDP/OSGA files
which display reconstructed camera positions.

*.  In mains/geo/VIDEO_PROPAGATOR, 3D rays are now colored according to
their number.

*.  GEO algorithm chain finally yielding good 3D reconstructions for
20120105_1402 when both forward and backward matching is performed!

============================================================================
BIGLAPTOP code changes made early on Fri, July 12, 2013:

*.  Renamed [min_]n_features as [min_]n_candidate_tiepoints in several
sift_detector methods.

============================================================================
BIGLAPTOP code changes made early on Thurs, Jul 11, 2013:

*.  Updated Makefile_projects so that dlib library links correctly under
ubuntu 12.4

============================================================================
BIGLAPTOP code changes made on Weds, July 10, 2013:

*.  sift_detector::compute_fundamental_matrix_via_RANSAC() now calls
dlib::random_subset_selector() rather than our deprecated ran_threader
class.

============================================================================
BIGLAPTOP code changes made on Sun, July 7, 2013:

*.  sift_detector class dependence upon FLANN library is now thread safe.

*.  Eliminated member var max_RANSAC_cost from sift_detector class for
threading purposes.

*.  Created new datastructures/map_union_find.cc class which works with
double-valued rather than int-valued node IDs.

*.  sift_detector::get_node_ID() takes in integer index i labeling an image
and integer index F_ID labeling a feature for image I.  It returns a double
which serves as an ID for a node within a map_union_find object.

*.  sift_detector::load_node_IDs() takes in integer index i labeling an
image.  It retrieves all features which have been extracted for this image
and computes their corresponding map_union_find node IDs.  This method
loads those node IDs into *map_union_find_ptr.

*.  sift_detector::link_matching_node_IDs() takes in image IDs i and j
along with an STL vector containing inlier tiepoint pairs.  For each
tiepoint pair, this method computes map_union_find node IDs from the image
and feature labels.  It then links the nodes corresponding to these IDs
within input *map_union_find_ptr.  It also resets the descriptor's ID for
the root node corresponding to each tiepoint pair.

============================================================================
BIGLAPTOP code changes made on Weds, Jul 4, 2013:

*.  Created new math/ran_threader class based upon dlib rand() object.



