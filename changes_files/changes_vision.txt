============================================================================
VISION code changes made on Weds, Jun 23, 2010:

*.  Started exporting grand child descendants of all grandparents plus
their immediate neighbors for Noah to parallelize reconstruction.

============================================================================
VISION code changes made on Sun, Jun 13, 2010:

*.  ISDS demos and standard pgms almost work OK as of Sun, Jun 13 at 9 am
on VISION laptop (pfiles6_13b.tgz).  Problem with new stringfunc tokenizer
for Bluegrass demo LOI SignPost labels.


============================================================================
VISION code changes made early on Tues, Jun 8, 2010

*.  Added mains/photosynth/README.sigma_demo to repository

============================================================================
VISION code changes made on Sat, May 29, 2010, Sun, May 30, 2010 & Mon, May
31, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Sat, May 29 at 9:30
am on VISION laptop (pfiles5_29a.tgz)

*.  Deleted deprecated mains/photosynth/GENERATE_GRAPH_JSON.cc from
repository.

*.  Replaced photogroup::fill_image_filenames_and_sizes() with
photogroup::import_image_filenames() and existing
photogroup::import_image_sizes().

*.  Eliminated photogroup::import[export]_image_info().

*.  database::select_data() takes in a single SQL select command.  It
returns Genarray<string>* field_array_ptr containing the data output
response to the input query.

*.  videofunc::generate_photogroup_from_database() takes in
*postgis_database_ptr which is assumed to contain a "data_network" database
with a "photo" table.  It extracts all rows and columns from this database
table.  After sorting the extracted rows according to photo_ID, this
method dynamically generates a photogroup and fills it with image
filenames and photo pixel sizes.

------

*.  graphfunc::generate_graph_hierarchy_from_database() takes in
*postgis_database_ptr which is assumed to contain a "data_network"
database with "node" and "link" tables.  It extracts all rows and columns
from these database tables.  This method dynamically generates a
graph_hierarchy and populates it with graphs reconstructed from the
database information.

*.  mains/photosynth/NEW_SIFT_MATCHES first recovers the cameras which see
XYZ points within Noah's raw reconstructed point cloud from
/bundler_IO_subdir/RawXYZID_vs_cameraIDs.dat for the MIT2317 photo set.  It
next reads in a set of raw XYZ points onto which Zach matches an n+1st
photo.  NEW_SIFT_MATCHES concatenates these two lists to generate an
edgelist for the n+1st image that specifies the nodes among the original n
photos with which it has SIFT feature overlap.

*.  Added string URL member to photograph class along with set/get methods.

*.  In jsonfunc::output_data_GraphML(), changed gx,gy >= 0 conditional to
gx,gy > 0.5*NEGATIVEINFINITY to allow negative graph coords for n+1st node.

*.  graph::node_std_dev_from_COM() loops over all nodes within the current
graph.  It returns the standard U and V deviation from the nodes'
center-of-mass weighted by the nodes' relative sizes.

*.  Eliminated several obsolete member functions from photogroup class:
write_photo_graph_json_file(), output_node_GraphML(),
output_data_GraphML(),

--------

*.  mains/photosynth/GRAPH_NEW_NODE displays the topology of an n+1st node
within the graph for n previously matched images.  It first generates the
photogroup for the n images from the contents of the photo table wtihin the
data_network database.  GRAPH_NEW_NODE then reads in the name and pixel
size of the n+1st photo from files in bundler/individual_photo/.  After
reconstructing the previously calculated graph hierarchy from the contents
of node and link tables within data_network database, this program adds the
n+1st node to the child graph.  The new node's position in the child graph
is based upon those of the nodes with which it has SIFT overlap.  Finally,
GRAPH_NEW_NODE generates a JSON file for the modified child graph which can
be displayed via Michael Yee's graph viewers.

*.  Following Ubuntu10.4 software syncing, ISDS demos and standard pgms
almost seem to work OK as of Tues, Jun 1 at 10:20 am on VISION laptop
(pfiles6_1a.tgz).  NYC 1K demo is badly messed up just as on ROBOT laptop.

============================================================================
VISION code changes made on Weds, May 26, 2010:

*. Eliminated CentersGroup, CenterKeyHandler and CenterPickHandler from
VIEWCITIES.

........................

*.  Eliminated all references to webservices classes and directory within
Makefile.

........................

*.  On VISION, need to restore cluge in
stringfunc::decompose_string_into_substrings() in order for Bluegrass and
ISAT demos to work.

*.  ISDS demos and standard pgms seem to work OK as of Weds, May 26 at 1:54
pm on VISION laptop (pfiles5_26c.tgz)

........................

*.  Movie::generate_ESB_car_tracks() reads in the comma-separated value
contents of ESB_tracks_filename, It instantiates a set of car tracks and
returns them within the output dynamically generated STL vector.

============================================================================
VISION code changes made early on Thurs, May 20, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Thurs, May 20 at
8:24 am on VISION laptop (pfiles5_20a.tgz)

============================================================================
VISION code changes made on Sun, May 16, 2010 & early Mon, May 17, 2010:

*.  Created new gis_databases_group class within src/postgres.  

*.  postgis_database_group now inherits from gis_database_group.

*.  ISDS demos and standard pgms seem to work OK as of Mon, May 17 at 8 am 
on VISION laptop (pfiles5_17a.tgz)

============================================================================
VISION code changes made early on Fri, May 14, 2010:

*.  Added identical copy of gis_database::parse_multiline_string to
postgis_database.  

*.  ISDS demos and standard pgms seem to work OK as of Fri, May 14 at 7:40
am on VISION laptop (pfiles5_14b.tgz).  

============================================================================
VISION code changes made early on Thurs, May 13, 2010:

*.  geofunc::raise_polyline_above_ellipsoid() takes in an OGR LineString
along with an Ellipsoid model.  It computes and returns a new set of
LineString vertex altitudes so that the entire LineString lies above the
Ellipsoid's surface.

*.  GISfunc::generate_GIS_Cylinder() instantiates an OSG Cylinder whose
symmetry axis is radially aligned with the local earth radial direction.

*.  Temporarily added osg/osgGIS/GISfuncs.cc and osg/osgGIS/gis_database.cc
to repository.  Trying to separate out as much as possible OSG dependence
from postgis database classes.

*.  Rearranged order of libraries within Makefile.

============================================================================
VISION code changes made early on Weds, May 12, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Weds, May 12 at 6:30
am on VISION laptop (pfiles5_12b.tgz).  This follows fairly extensive
refactoring involving new postgis_databases_group class along with
eliminating MyApplicationUsage class.

*.  Added image_suffix member to SnapImageDrawCallback class along with get
method.  Set image_suffix value = png within
SnapImageDrawCallback()::init_member_objs().

*.  Added image_suffix member to MyViewerEventHandler class.  Set its value
equal to SnapImageDrawCallback_ptr->get_image_suffix().  

*.  Renamed MyViewerEventHandler::retrieve_movie_frame_png_file() as
retrieve_movie_frame_file().

................

*.  ISDS demos and standard pgms seem to work OK as of Weds, May 12 at 1:15
pm on VISION laptop (pfiles5_12d.tgz).  This follows more refactoring
involving new postgis_databases_group and LOSServer classes.

============================================================================
VISION code changes made early on Tues, May 11, 2010:

*.  Globally eliminated all calls to outdated MyApplicationUsage class
throughout OSG classes.

*.  Moved Geometrical::broadcast_track_statevector() into
track::broadcast_statevector().

*.  mains/rasr/GPSDEVICE now broadcasts current track position to GPS
messenger.

============================================================================
VISION code changes made on Mon, May 10, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Mon, May 10 at 6:40
pm on VISION laptop (pfiles5_10a.tgz).

============================================================================
VISION code changes made on Sun, May 9, 2010:

*.  Moved serial_device class out of src/robots into src/messenger.

*.  Added astro_geo/GPS_datastream class to repository.

*.  mains/rasr/GPSDEVICE is a high-level program which continuously reads
data from a serial port connected to an external GPS unit.  GPSDEVICE
displays the current time, geoposition and number of visible satellites.

============================================================================
VISION code changes made on Thurs, May 6, 2010:

*.  Movie::import_next_to_latest_photo() now returns true/false if
importation was [not] successful.

============================================================================
VISION code changes made on Weds, May 5, 2010:

*.  filefunc::latest_file_in_subdir() takes in a subdirectory and searches
for all files ending with the specified suffix.  After sorting the matching
files according to their access times, this method returns the name of the
most recently accessed file.

*.  Added watch_subdirectory member to MoviesGroup class along with set
method.

*.  filefunc::deletefile() now returns bool true if file is actually
deleted.

============================================================================
VISION code changes made on Mon, May 3, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Mon, May 3 at 4:45
pm on VISION laptop (pfiles5_3d.tgz).

============================================================================
VISION code changes made on Sat, May 1, 2010, Sun, May 2, 2010 & early Mon,
May 3, 2010:

*.  Moved multiple graph cluster layout member functions
(e.g. adjust_child_node_posns_from_cluster_COMs()) out of graph class into
graphfuncs namespace.

============================================================================
VISION code changes made early on Thurs, Apr 29, 2010:

*.  Added representative_child_ID member to node class along with set/get
methods.

*.  graph_hierarchy::initial_parent_node_positions() calculates graph
coordinates for all nodes within input *parent_graph_ptr based upon
averages of their children node's (gx,gy) coordinates.

============================================================================
VISION code changes made early on Weds, Apr 28, 2010:

*.  Wrote graph_hierarchy member funcs which simplify retrieval of graph
descendants at arbitrary levels within the hierarchy.

============================================================================
VISION code changes made early on Tues, Apr 27, 2010:

*.  graphfunc::parse_mcl_cone_file() parses the input "cone" graph
hierarchy file generated by MCLCM.  It instantiates a graph object for each
level within the hierarchy.  This method generates nodes within level l and
stores the IDs of their children nodes within level l-1.

*.  Created new graph_hierarchy class within src/graphs.

============================================================================
VISION code changes made on Sun, Apr 25, 2010:

*.  colorfunc::RGB_to_CSV() takes in an RGB triple and returns a
comma-separated value string containing the red, green and blue components
as integers.  We wrote this utility method in April 2010 for postgres
database insertion purposes.

*.  photogroup::write_SQL_insert_photo_commands() loops over all photos
within the current photogroup.  It writes SQL insert commands to the
specified SQL_filename which are needed to populate the photo table of the
data_network postgis database.

*.  ISDS demos and standard pgms seem to work OK as of Sun, Apr 25 at 10 pm
on VISION laptop (pfiles4_25d.tgz)

============================================================================
VISION code changes made on Fri, Apr 23, 2010:

*.  Program mains/rasr/WAGONWHEEL is a variant of program NEW_FOV.  It's a
testing lab for viewing 360 panoramas as 3D quasi-cylinders.

*.  Program mains/photosynth/EXTRACT_TIMESTAMPS is a little utility which
attempts to pull out time stamps from the original MIT2317 photos and
eventually populate the photo table within the data_network database with
this information.

============================================================================
VISION code changes made on Weds, Apr 21, 2010 & Thurs, Apr 22, 2010:

*.  BUNDLER_PHOTOGRAPHS now outputs focal parameter to image_info.dat ;
Starting to create GENERATE_SQL in mains/photosynth

============================================================================
VISION code changes made on Mon, Apr 19, 2010

*.  ISDS demos and standard pgms seem to work OK as of Mon, Apr 19 at 5:04 
pm on VISION laptop (pfiles4_19a.tgz)

*.  bundlerfunc::read_in_pointcloud_and_photos() takes in the name of some
subdirectory of mains/photosynth/bundler/ along with an input PassesGroup.
It fills and returns strings bundler_IO_subdir, image_sizes_filename and
xyz_points_filenmae.  This method also reads in a reconstructed point cloud
which is assumed to either an OSGA or TDP file with prefix
thresholded_xyz_points.  It also reads in packages for reconstructed photos
and generates a new pass for each one.

*.  QTVIEWBUNDLER is now ready to receive name of selected photo set from
Jennifer's thin client.

============================================================================
VISION code changes made on Mon, Apr 12, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Mon, Apr 12 at 12:04
pm on VISION laptop (pfiles4_12a.tgz)

============================================================================
VISION code changes made on Tues, Apr 6, 2010:

*.  Fixed parents_photogroup_ptr dangling error in generate_graph_JSON.

============================================================================
VISION code changes made on Mon, Apr 5, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Mon, Apr 5 at 12:26
pm on VISION laptop (pfiles4_5a.tgz).

============================================================================
VISION code changes made early on Fri, Mar 19, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Fri, Mar 19 at 7:38
am on VISION laptop (pfiles3_19a.tgz).  Retired old photos3D and photos2D
demo programs which are very out-of-date and no longer maintainable.  Added
newyork/run_1K_demo as more modern test program.

============================================================================
VISION code changes made early on Mon, Mar 8, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Mon, Mar 8 at 8:47
am on VISION laptop (pfiles3_8a.tgz)

============================================================================
VISION code changes made on Weds, Mar 3, 2010 & Thurs, Mar 4, 2010:

*.  Deleted mains/photosynth/packages.  This subdir was NOT in the SVN
repository.

*.  BUNDLER_CONVERT now writes camera IDs vs an STL vector of XYZIDs to
cameraID_vs_XYZIDS.dat.

============================================================================
VISION code changes made early on Fri, Feb 26, 2010:

*.  Renamed OBSFRUSTAGROUP::get_OBSFRUSTUM_camera_ptr() as
get_OBSFRUSTUM_photo_camera_ptr().  Only call this method from PhotoTour
classes.

*.  ISDS demos and standard pgms seem to work OK as of Fri, Feb 26 at 9:44
am on VISION laptop (pfiles2_26b.tgz).

============================================================================
VISION code changes made on Sat, Feb 20, 2010 & Sun, Feb 21, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Sat, Feb 20, 2010 at
3:05 pm on VISION laptop (pfiles2_20a.tgz).

*.  In polyline::edge_direction(double frac), incorporate special end point
case checks on frac's value. 

*.  OBSFRUSTAGROUP::get_OBSFRUSTUM_camera_ptr() takes in *OBSFRUSTUM_ptr which
is assumed to hold a static photograph.  If so, this method returns a
pointer to the photo's camera.  Otherwise, it returns NULL.

*.  PhotoTour::construct_camera_path() takes in *input_polyline_ptr which
contains a desired path through a field of photos.  After resampling the
polyline, this method performs quadtree searches for reconstructed camera
positions lying close to the input path.  Candidate cameras must point in
basically the same direction as local polyline edge directions.  Their
absolute elevations and rolls must also be relatively close to zero.  Each
new candidate camera must also lie sufficiently far ahead in the previous
selected camera's forward hemisphere.  This method fills STL vector member
ordered_OBSFRUSTUM_IDs with a set of reconstructed cameras which hopefully
yield a virtual tour fairly close to the desired input path.

*.  PhotoTour::conduct_virtual_tour() checks if the AnimationController's
framenumber has increased.  If so, it instructs the virtual camera to
enable cross fading and to fly to the next OBSFRUSTUM labeled by STL vector
member ordered_OBSFRUSTUM_IDs.  When the virtual tour reaches its end, it
loops back to its beginning.

============================================================================
VISION code changes made on Tues, Feb 16, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Tues, Feb 16 at 3:23
pm on VISION laptop (pfiles2_16a.tgz).

============================================================================
VISION code changes made on Sat, Feb 13, 2010, Sun, Feb 14, 2010 and Mon,
Feb 15, 2010:

*.  graph::remove_graph_edge_ptr() searches graph_edges_map for the input
graph_edge_ptr.  If it is found, this method erases that entry from the STL
map.

*.  graph::create_clone() loops over all nodes and edges within the current
graph and copies their contents onto a new dynamically-generated graph.
The new graph is returned by this method.

*.  graph::edge_with_minimal_centrality() iterates over all graph edges
within the current graph's graph_edges_map.  It returns a pointer to the
edge with the minimal centrality.

*.  graph::get_edge_ID() takes in IDs for two nodes.  If the nodes' share
an edge, this method returns its integer ID.  Otherwise, -1 is returned.

*.  graph::generate_graph_from_specified_adjacency_matrix() takes in input
adjacency matrix *adj_matrix_ptr.  It instantiates a graph whose nodes and
edges are based upon *adj_matrix_ptr.

*.  graph::node_separation_degree() takes in the ID for some starting node
within a connected graph.  It first forms a new adjacency matrix whose
binary entries equal 1 to indicate edge connectivity between neighboring
nodes or 0 otherwise.  It then instantiates a temporary graph based upon
the binary adjacency matrix.  After running Dijkstra's algorithm, it
returns an STL vector containing integer step distances for each node in
the graph from the input initial node.

*.  Renamed cluster_ID member of node class as parent_ID.

*.  graph::transfer_parent_IDs_to_children_nodes is assumed to act on a
child graph whose clusters_map has been pre-filled with parent cluster
information.  Looping over each cluster within the member STL map, this
method sets the child nodes' parent IDs equal to the cluster number.

*.  graph::export_cluster_info() outputs the contents of STL map member
clusters_map to the specified output filename.

*.  graph::generate_clusters_map_from_graph_nodes() loops over all nodes
within the current graph.  We assume that all nodes have been previously
assigned valid parent IDs.  This method refills STL map member clusters_map
with node & parent node ID information.

============================================================================
VISION code changes made early on Tues, Feb 9, 2010:

*.  Cleaned up and commented several member functions of graph class.

*.  CH video no longer appears within bluegrass demo!  Neither HAFB video
nor San Clemente texture appear inside of earth program!

............

*.  After reinstating the overly complicated version of
EarthRegionsGroup::generate_SurfaceTexture_EarthRegion(), standard set of
ISDS demos and pgms appear to work OK as 11:23 am on Tues, Feb 9, 2010
on VISION (pfiles2_9e.tgz)

============================================================================
VISION code changes made on Sat, Feb 6, 2010 & Sun, Feb 7, 2010:

*.  Added color_ID member to node class along with set/get methods.

*.  mathfunc::prime_factors() now takes in single integer and returns STL
vector of its prime factors.

*.  graph::output_DIMACS_edgelist_file() generates a text file
containing graph edge information of the form "node_i node_j".  It
follows the DIMACS conventions discussed in "Clique and Coloring
Problems Graph Format", May 08, 1993).  This DIMACS formatted
output file can be read in by Andrea Arbore's nRLF graph vertex
coloring program.  

*.  graph::read_Arbore_vertex_coloring() parses the output file generated
by Arbore's graph vertex coloring algorithm.  Each node's color_ID is set
based upon the contents of the input file.  The graph's total number of
distinct vertex colors is returned by this method.

*.  graph::compute_cluster_color() takes in a node which is assumed to have
a color_ID assigned based upon some reasonable graph vertex coloring
scheme.  The node is also assumed to have a valid cluster_ID assignment.
Cluster_IDs are generally assumed to significantly exceed
n_distinct_colors.  This method performs a "zig-zag" assignment of hues,
saturations and values in order to maximally assign disgtinguishable colors
to the first 4*n_distinct_color nodes.

*.  Added cluster_photogroup_ptr member to photogroup class along with get
method.

*.  photogroup::generate_cluster_photogroup() instantiates member
*cluster_photogroup_ptr and copies metadata from *this into the new
photogroup.  It generates the cluster photogroup's super nodes using
precalculated information stored in clusters_map.  This method next forms
super edges by integrating weights for all edges leaving each super node.
The pointer cluster_photogroup_ptr is returned.

*.  graph::find_nearby_nodes() takes in *curr_node_ptr along with a radius
measured in the UV graph plane.  It uses *nodes_kdtree_ptr to rapidly find
all graph nodes located within radius of *curr_node_ptr's UV position.
This method returns pointers to all nearby nodes within output STL vector
nearby_node_ptrs.

*.  graph::generate_nodes_kdtree() loops over all nodes within the current
graph.  It instantiates and fills member *nodes_ktree_ptr with (U,V,ID)
information for each of the graph's nodes.

*.  graph::inherit_cluster_colors() loops over all nodes within the current
graph.  It extracts the cluster ID for each node and computes the coloring
for the cluster.  This method then transfers the cluster's color to the
nodes.  It also sets member variable n_distinct_colors equal to
n_distinct_colors for input *cluster_graph_ptr.



============================================================================
VISION code changes made on Sun, Jan 31, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Sun, Jan 31 at 7:15 
am on VISION laptop (pfiles1_31a.tgz)

*.  Split off common member variables and functions from PhotoServer into
new BasicServer class.  After upcoming LOST delivery, we'll have LOSServer
inherit from BasicServer as well.

*.  Screen capture and movie generation now seem to work within
QTVIEWBUNDLER.

*.  In OBSFRUSTAGROUP::fly_to_entered_OBSFRUSTUM(), now set
Movie_ID=get_selected_OBSFRUSTUM_photo_ID() rather than assuming
get_selected_Graphical_ID().

*.  In  OBSFRUSTAGROUP::parse_next_message_in_queue(), set OBSFRUSTUM_ID =
get_selected_photo_OBSFRUSTUM_ID() rather than input photo_ID.  Alpha
blending for Kermit now seems to work OK.

*.  Separated off reset_view_to_home() member in CustomManipulator class.

*.  osgfunc::generate_rot_scale_and_trans() performs a rotation by matrix R
about the specified rotation_origin, then scales by input factor scale
about rotation_origin, and finally translates by input vector trans.

*.  Added member dynamic_Grid_ID to LatLongGridsGroup with set method and
default zero value.  In LatLongGridsGroup::update_display(), we now set
LatLongGrid_ptr = get_Grid_ptr(dynamic_Grid_ID) rather than hardwiring
zeroth Grid.

*.  In LatLongGrid::compute_long_lat_param_ranges(), basically increased
minimal delta_theta from 0.0005 degs to 0.005 degs and decreased
ndigits_after_decimal from 4 to 3.


============================================================================
VISION code changes made early on Fri, Jan 29, 2010:

*.  Separated off SignPostsGroup::generate_PostGIS_SignPosts() from
retrieve_signposts_from_Cambridge_database().  This method instantiates a
new set of SignPosts based upon information retrieved from a PostGIS
database and stored within input STL vectors.

============================================================================
VISION code changes made on Sat, Jan 23, 2010 and Mon, Jan 25, 2010:

*.  Deleted mains/OSG/GTS from repository.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Jan 25 at 5:20
pm on VISION laptop (pfiles1_25b.tgz).

============================================================================
VISION code changes made early on Fri, Jan 22, 2010:

*.  Created new src/bundler subdir along with empty bundlerfuncs namespace.

*.  bundlerfunc::scale_translate_rotate_bundler_XYZ() transforms input
bundler_xyz by the input scaling, translation and rotation parameters.  We
wrote this method in order to georegister reconstructed BUNDLER point
clouds with ladar imagery.

============================================================================
VISION code changes made on Weds, Jan 20, 2010:

*.  Reset mdim=ndim=19 in LOSMODELSGROUP::initialize_skymaps().

============================================================================
VISION code changes made on Tues, Jan 19, 2010:

*.  Added README.orange_disks and README.movies to repository.

*.  ISDS demos and standard pgms seem to work OK as of Tues, Jan 19
at 4 pm on VISION laptop (pfiles1_19a.tgz).  Dynamic lat-lon grid is
messed up in photo3D demo program.  

============================================================================
VISION code changes made Sat, Jan 16, 2010, Sun, Jan 17, 2010 & Mon, Jan
18, 2010;

*.  In triangulate_func::Triangulate(), no longer exit when old C method
fails to complete triangulation.  Instead, this method now returns whatever
triangle list it has generated.

*.  contour::robust_locate_origin() searches for convex vertices within
*this.  When it finds one, this method forms the triangle from the
convex vertex, the preceding edge's v1 vertex and the subsequent
edge's v2 vertex.  It explicitly tests whether the triangle's
center lies within *this.  If so, this method sets the contour's
origin to the triangle's COM.  Otherwise, it continues on to the
next convex vertex in the contour.

*.  contour::generate_consolidated_contour() consolidates edges whose
direction angles differ by less than input threshold opening angle
edge_angle_deviation.  It then forms a new set of vertices from the
consolidated edges.  This method returns a contour from the reduced number
of vertices.

*.  Overloaded linesegment::max_direction_overlap takes in starting
symmetry direction vector w_hat and angle delta_theta measured in radians.
It generates 2*PI/delta_theta bins corresponding to angles w_hat,
w_hat+delta_theta, w_hat+2*delta_theta, etc.  This method computes the
dotproduct of each angular bin with the current linesegment's direction
vector.  It returns the direction vector fmax_hat which has the largest
overlap with the linesegment's direction vector e_hat.

*.  contour::align_edges_with_sym_dirs() takes in starting symmetry
direction vector w_hat along with angle delta_theta.  It rotates each edge
about its midpoint so that it's aligned with the maximum overlap direction
vector defined by w_hat, w_hat+delta_theta, w_hat+2*delta_theta,etc...

*.  Updated contour::docopy().

*.  In Polyhedron::generate_triangle_mesh() & update_triangle_mesh(), changed
indices IndexArray from osg::UByteArray to osg::UIntArray.  Triangle meshes
can now hold 2**32 rather than 2**8=256 triangles!

*.  Separated off photograph::reset_camera_parameters() from
photogroup::read_photographs().  This method takes in a pinhole camera
model's intrinsic and extrinsic parameters.  It resets all these parameters
within the current photograph's camera object.  It also recomputes the 3x4
projection matrix as well as the camera's horiz & vertical fields-of-view.

*, Final version of
OBSFRUSTAGROUP::generate_still_imagery_frusta_for_photogroup() takes in
global_camera_translation as well as global azimuth, elevation and roll
rotation angles (along with a rotation origin).  As of January 2010, this
method can rotate the cameras of every OBSFRUSTUM about rotation_origin
within *this about +z_hat by global_daz (measured in radians).  It then
translates each camera by global_camera_translation.  We built in this
extra flexibility in order to qualitatively register the RASR hallway
panorama sequence with the G76 robot ladar map.

*.  mains/rasr/VIEWRASR is a specialized variant of VIEWPOINTS which
superposes abstracted floorplan contours (distilled from raw G76 2D ladar
map data) on some OSGA background.  We wrote this program for RASR map
viewer development and display purposes.

============================================================================
VISION code changes made Tues, Jan 12, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Tues, Jan 12
at 9  am on VISION laptop (pfiles1_12a.tgz).  Dynamic lat-lon grid is
messed up in photo3D demo program.  

============================================================================
VISION code changes made Thur, Jan 7, 2010:

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Jan 7
at 9  am on VISION laptop (pfiles1_7a.tgz).  Dynamic lat-lon grid is
messed up in photo3*D demo program.  

============================================================================
VISION code changes made early on Thurs, Dec 17, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Dec 17 at
7:30 am on VISION laptop (pfiles12_17a.tgz).  Dynamic lat-lon grid is
messed up in photo3D demo program.  

============================================================================
VISION code changes made early on Weds, Dec 16, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Weds, Dec 16 at 7:45
am on VISION laptop (pfiles12_16a.tgz).  Dynamic lat-lon grid is messed up
in photo3D demo program.  Couldn't test Bluegrass demo due to missing
disk#5.

============================================================================
VISION code changes made early on Sat, Dec 12, 2009 & Sun, Dec 13, 2009:

*.  In TilesGroup::update_avg_LOS_tiles(), nviews_ztwoDarray_ptr and
avgLOS_ptwoDarray_ptr both point to ztwoDarrays dynamically instantiated
within RasterParser::open_image_file().  In order to avoid segmentation
fault, we do NOT pre-delete ztwoDarray_ptr within this method.  So we must
delete both pointers here.  To avoid a RasterParser::ztwoDarray_ptr from
becoming a dangling pointer (which will lead to a segmentation fault in
RasterParser's destructor which explicitly deletes ztwoDarray_ptr), we must
reset RasterParser::ztwoDarray_ptr to NULL:

*.  On Dec 11, 2009, we discovered the hard and painful way that the delete
ztwoDarray_ptr line in raster_parser::open_image_file() caused a
segmentation fault when this method was called from
TilesGroup::update_avg_LOS_tiles().  For speed purposes, we set TWO
pointers equal to this class' ztwoDarray_ptr.  But in this case, the
TilesGroup class must become responsible for explicitly deleting the
pointers after they're no longer needed.  So predelete_ztwoDarray_flag =
false for this special case.  Otherwise, we generally do want to delete
ztwoDarray_ptr prior to instantiating a new ztwoDarray.

*.  mains/afghanistan/GENERATE_FUSE_SCRIPT is a specialized program written
to produce an executable script for running program FUSE_DTED_TRUEARTH.

============================================================================
VISION code changes made early on Tues, Dec 8, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Tues, Dec 8 at 6:23
am on VISION laptop (pfiles12_8a.tgz).  Dynamic lat-lon grid is messed up
in photo3D demo program.  

============================================================================
VISION code changes made on Sat, Dec 5, 2009, Sun, Dec 6, 2009 &
early on Mon, Dec 7, 2009:

*.  Program BUNDLER_CONVERT parses and transforms Noah Snavely's BUNDLER
program ascii output.  It can read in a set of global rotation and scaling
parameters needed to transform Noah's relatively reconstructed XYZ points
into georegistered coordinates.  After reading in the reconstructed XYZ
points, it identifies outlier points and thresholds them away.  This
program writes out the thresholded XYZ points to
"thresholded_xyz_points.dat".  It also exports to "sorted_camera_views.dat"
the XYZID-UV tiepoint pairs as a function of sorted thresholded point ID.
BUNDLER_CONVERT writes out the adjacency matrix for the photos' graph as an
edge list to "edgelist.dat".  It also exports the reconstructed points
common to pairs of photos to "photoids_xyzids.dat".  Finally, this program
generates a TDP file for the thresholded XYZ points which contains RGB
color information.

*.  Added xyz_pnts_filename, photoids_xyzids_filename, edgelist_filename
and common_planes_filename members to PassesGroup class.  Added get methods
as well.

*.  Program BUNDLER_PHOTOS reads in reconstructed XYZ points and cameras
from files generated by BUNDLER_CONVERT.  It converts the cameras from
Noah's bundler coordinate system into georegistered coordisnates.
BUNDLER_PHOTOS also fits imageplanes to XYZ points visible to each camera.
Package files for each camera are written.  This program also fits planes
to XYZ points common to pairs of cameras.  Output common planes are written
to text file "common_planes.dat".

*.  Added image_planes_map_ptr & common_planes_map_ptr members to photogroup
class.

*.  photogroup::import_common_photo_planes() stores pre-calculated
common image planes for pairs of photos within STL map
common_planes_map.

*.  Eliminated OBSFRUSTUM::imageplane_location_in_worldspace().

*.  Added photogroup_ptr member to OBSFRUSTAGROUP.

*.  photogroup::get_image_plane() takes in integer i labeling a
pre-calculated image plane for some reconstructed camera.  It searches STL
member *image_planes_map_ptr for a pre-defined imageplane.  If one exists,
this method returns a pointer to the requested plane.  Otherwise, it
returns NULL.

*.  photogroup::get_common_image_plane() takes in integers i and j labeling
some pair of reconstructed cameras.  It searches STL member
*common_planes_map_ptr for a pre-defined common imageplane for these two
cameras.  If one exists, this method returns a pointer to the requested
plane.  Otherwise, it returns NULL.

*.  Added top[bottom]_left[right]_XYZ members along with get methods to
Movie class.

============================================================================
VISION code changes made early on Fri, Dec 4, 2009:

*.  Starting to make some sense of projection matrices for Shanghai_05_grid
example within NEW_FOV.  

============================================================================
VISION code changes made on Tues, Dec 1, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Tues, Dec 1 at 3:45
pm on VISION laptop (pfiles12_1a.tgz).  Dynamic lat-lon grid is messed up
in photo3D demo program.  

============================================================================
VISION code changes made on Fri, Nov 27, 2009, Sat Nov 28, 2009, and early
Mon, Nov 30, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Fri, Nov 27, at 10
am on VISION laptop (pfiles11_22a.tgz).  Dynamic lat-lon grid is messed up
in photo3D demo program.  

*.  Added mains/photosynth/SORT_CAMERA_VIEWS.cc to repository.

*.  Privatized G99VD::generate_geometry().  

*.  Added TexMat_refptr member to G99VD class along with get method.

*.  Overloaded version of G99VD::reset_texture_coords() resets the 4
extremal coordinate entries of *texturecoords_refptr based upon the
4 input THREEVECTORS.  

*. Added transpose_matrix() method to osgfunc namespace.

*.  sift_detector::identify_inliers() now takes max_sqrd_delta as an input
argument rather than having this param hardwired to 0.005.

*.  Program mains/mapping/PTIF2TDP is a specialized variant of TIF2TDP
which we hacked together in Nov 2009.  It takes in a ZP tile generated by
Ross Anderson for his draping of Boston EO imagery onto an ALIRT height
surface.  This program outputs a P-map in both TIF and TDP file formats.

*.  Fixed memory leaks in DTED2TDP.

============================================================================
VISION code changes made on Sun, Nov 22, 2009 & early Mon, Nov 23, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Sun, Nov 22 at 7:09
am on VISION laptop (pfiles11_22a.tgz)

*.  Renamed mains/photosynth/WRITE_PACKAGES as WRITE_VIEWBUNDLER_SCRIPT

============================================================================
VISION code changes made on Sun, Nov 15, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Sun, Nov 15 at 5:22
pm on VISION laptop (pfiles11_15a.tgz)

*.  Added get_root_ptr() member to Terrain_Manipulator class.

*.  Tried implementing Ross Anderson's idea for forcing entire scene graphs
to be written to output OSG files.  In
HiresDataVisitor::apply(osg::PagedLOD), we try to reset paged filenames to
be blank.  But we still cannot export an entire scenegraph to an OSG file.
Instead, we still only get the coarsest level-of-detail to be saved.

============================================================================
VISION code changes made on Weds, Nov 11, 2009:

*.  Overloaded texture_rectangle::generate_thumbnail() to take in specified
xdim and ydim arguments.

*.  Overloaded photograph::generate_thumbnail() to take in max_pixel_dim
argument.

============================================================================
VISION code changes made on Sun, Nov 8, 2009:

*.  In movers_group::issue_add_track_message(), explicitly check if
n_points==n_velocities.  If not, don't attempt to export velocity info.
Bluegrass demo appears to work OK after making this bug fix.

*.  ISDS demos and standard pgms seem to work OK as of Sun, Nov 8 at 9:19
am on VISION laptop (pfiles11_8a.tgz)

============================================================================
VISION code changes made on Sat, Oct 31, 2009 & Sun, Nov 1, 2009:

*.  imagefunc::convert_image_to_pgm() takes in some standard image file,
strips off its suffix, and adds a new pgm suffix.  After issuing a unix
system call to ImageMagick's Convert utility, this method returns the name
of the pgm image filename.  We wrote this method in Oct 2009 in order to
experiment with Lowe's binary executable of his SIFT feature extraction.

*.  Program MOSAIC reads in feature text files generated by program
TIEPOINTS and fills a cumulative FeaturesGroup with feature coordinate
measurements.  It then calls optimizer member function
compute_renormalized_homographies() which calculates overlapping photo
homographies.  Photographs are displayed as warped tiles on the Z=0 plane
within XYZ space.

*.  Program CROP_FRAMES is a quick-n-dirty utility which we wrote in
order to cut SAFIRE video frames down to just their genuine photo
content parts.


============================================================================
VISION code changes made early on Fri, Oct 23, 2009:

*. When time-averaged raytracing results are displayed, LineSegmentsGroup
holding individual ground target rays is masked.  So we unmask this OSG
group when time dependence is restored in LOSServer::play_movie().

*.  Individual ground targets are now raytraced with ds=0.25 *
raytrace_cellsize = 250/4 meters.

============================================================================
VISION code changes made early on Thurs, Oct 22, 2009:

*.  In LineSegmentsGroup::initialize_new_LineSegment(), 
we empirically found that initialize_Graphical() call ends up masking ESB
video OBSFRUSTUM in NYC demo.  So we've commented out this line.

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Oct 22, at
9:32 am on VISION laptop (pfiles10_22c.tgz)


============================================================================
VISION code changes made on Sun, Oct 11, 2009 & Mon, Oct 12, 2009:

*.  Moved min[max]_raytrace_range and raytrace_cellsize out of MODELSGROUP
into LOSMODELSGROUP along with setter methods.

*.  Renamed track::get_n_track_points() as track::size().

*.  track::pushback_time() takes in candidate time curr_t.  If
curr_t does not already exist within *time_map_ptr, this method
pushes it back onto STL vector t and adds it to *time_map_ptr.
Otherwise, this boolean member function returns false.

*.  Moved compute_altitude_dependent_alpha() out of MODELSGROUP into
GeometricalsGroup.

*.  Moved adjust_ROI_Polyhedra_alphas() out of MODELSGROUP into
PolyhedraGroup.

*.  Eliminated redundant CM_3D_ptr member of OBSFRUSTAGROUP in favor of
GeometricalsGroup::CM_3D_refptr along with get_Terrain_Manipulator_ptr()
method.

*.  Moved set_altitude_dependent_OBSFRUSTA_volume_alpha() out of
MODELSGROUP class into OBSFRUSTAGROUP.  Eliminated call to this method from
MODELSGROUP::update_display().  Now only call this method from
LOSMODELSGROUP::update_display().

*.  ISDS demos and standard pgms seem to work OK as of Mon, Oct 12 at 11:38
am on VISION laptop (pfiles10_12e.tgz)

*.  Added min[max]_alpha_altitude members to PolyhedraGroup class along
with set methods.

*.  Volume alpha for ROI Polyhedra in QTEOCITIES is now altitude dependent.

============================================================================
VISION code changes made early on Fri, Oct 9, 2009:

*.  MovieKeyHandler constructors no longer take Movie_ptr input.

*.  Added TextureSector::set_center_altitude().

*.  Added altitude member to PassInfo along with set/get methods.  We now
search for this input param within PassesGroup.

============================================================================
VISION code changes made early on Thurs, Oct 8, 2009:

*.  Added virtual set_color() member to LineSegments class.

*.  Added geom_refptr member to LineSegments class.

*.  Coloring of rays from aircraft to ground targets in QTLOS is finally
working!

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Oct 8 at 8:40
am on VISION laptop (pfiles10_8c.tgz)

============================================================================
VISION code changes made on Sat, Oct 3, 2009 & Sun, Oct 4, 2009:

*.  Overloaded featurefuncs::ooze_rooftop_pixels() was written in Oct 2009
for automatically constructing 3D bboxes around NYC skyscrapers.  It
instantiates a mask within *p_roof_binary_twoDarray_ptr and sets its
world-space coordinate system to be centered around input rooftop_posn with
XY extents fixed by max_radius.  Assuming that the center pixel within
*p_roof_binary_twoDarray_ptr corresponds to a building's rooftop, this
method brute-force iterates over all pixels within the mask and computes
which are connected to rooftop-classified pixels and have heights greater
than a height threshold fraction of rooftop_posn.get(2).  This method
returns within *p_roof_binary_twoDarray_ptr a mask for all tall pixels
connected to the initial rooftop_posn pixel.

*.  featurefunc::construct_rooftop_binary_mask() takes in the approximate
posn for some NYC skyscraper rooftop center as well as some height map
within *ztwoDarray_ptr.  After performing an oozing operation, this method
computes a binary mask for all pixels connected to the rooftop_posn pixel
with heights about a certain fractional threshold.  It then computes the
mask's XY angular orientation theta in the XY plane from its moment of
inertia eigenvalues and eigenvectors.

*.  urbanfunc::construct_3D_bldg_bbox() takes in a binary mask for an NYC
skyscraper rooftop.  After rotating the mask so that it's aligned with the
XY axes, this method computes an XY parallelogram for the building's
footprint.  It then forms and returns a polyhedron bbox from the footprint
plus the input max_roof_z value.

*.  OBSFRUSTUM::calculate_imageplane_score() first computes the bounding
box within the OBSFRUSTUM's image plane that encloses the projected UV
coordinates for a polyhedron's surface points.  After renormalizing this 2D
area by the total UV area of the OBSFRUSTUM's image, this method computes
the number of pixels within the 2D bbox.  It multiplies this pixel count by
the input number of visible polyhedron surface points to yield a total
score which quantifies how well a NYC skyscraper can be seen within the
imageplane.

*.  OBSFRUSTAGROUP::compute_photo_views_of_polyhedra_bboxes() loops over
all members of *PolyhedraGroup_ptr.  For each polyhedron, it generates a
surface point cloud and visualizes those points via an Arrow vector field.
It then projects each polyhedron into each OBSFRUSTUM within *this and
calculates an imageplane visibility score.  The visibility scores are
sorted and stored within the corresponding photographs.

*.  OBSFRUSTAGROUP::fly_to_entered_OBSFRUSTUM() takes in the ID for some
OBSFRUSTUM derived from either doubleclicking or by manually entering.  It
resets the selected_Graphical_ID equal to the input ID.  This method then
flies the virtual camera to the position and orientation of the selected
OBSFRUSTUM's camera.

*.  Added photogroup_ptr member to OBSFRUSTAKeyHandler class along with set
method.

*.  In texture_rectangle::import_photo_from_file(), we try to force the
current image to be deallocated before reading in a new image.  But our
attempted fix does NOT appear to solve the memory leak problem...

*.  Added bounding_box::update_bounds(const threevector& curr_XYZ);

*.  Empirically determined reasonable score function within
OBSFRUSTUM::calculate_imageplane_score().

*.  ISDS demos and standard pgms seem to work OK as of Mon, Oct 5, at 11:28
am on VISION laptop (pfiles10_5a.tgz)

============================================================================
VISION code changes made early on Weds, Sep 30, 2009:

*.  Modified LOSServer to take in Clear_Flightpath and flightpath direction
signals now sent from QTLOS thin client.

*.  Added signposts_map_ptr member to SignPostsGroup class.

*.  SignPostsGroup::gazetteer() queries the user to enter the label for
some SignPost.  It then performs a search of *signposts_map_ptr for the
input label.  This method returns a pointer to the retrieved SignPost if it
exists and NULL otherwise.

*.  Separated off face::compute_face_poly() from
face::compute_area_COM_and_normal().


============================================================================
VISION code changes made early on Sun, Sep 27, 2009 & early, Mon, Sep 28,
2009:

*.  Restored MoviesGroup & MoviesKeyHandler to LOS.  Starting to restore
functionality to view textures in LOS.  

*.  LOSMODELSGROUP::generate_SAM_threatmap() instantiates
*threatmap_twoDarray_ptr with a size set by the threatmap's lat-long
extents. Looping over 1deg x 1deg lat-long tiles, it subdivides each tile
into 250 m x 250 m cells.  For each cell, this method tests whether the
distance between the cell's ground height and the aircraft's altitude is
less than the input SAM range.  If so, it computes the opening angle of a
cone centered about the cell within which the SAM could hit an aircraft
flying at the specified altitude.  It increments the threat count within
all lattice sites of the aerial threat map covered by the cone.

*.  LOSMODELSGROUP::visualize_SAM_threatmap() computes relative threat
values within the aerial *threatmap_twoDarray_ptr.  It then instantiates a
texture_rectangle with the same dimensions as the threatmap and copies the
latter's data into the former.  This method assigns the texture rectangle
to a Movie whose geometry vertices are stretched to cover the same lat-long
extents in the sky as threatmap.

*.  TilesGroup::load_single_DTED_tile_into_ztwoDarray() computes the
extremal easting and northing extents of a 1 deg x 1 deg lat-long DTED
tile.  It then instantiates twoDarray *DTED_ztwoDarray_ptr with spacing set
by input delta_x,y parameters.  This method reads DTED data from an input
geotif file into *DTED_ztwoDarray_ptr and returns the twoDarray.

*.  Restored polyhedron::generate_box() to calling generate_box(V) rather
than generate_box_with_rectangular_faces(V) for bluegrass demo Activity
Region boxes to appear correctly.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Sep 28 at 8:45
am on VISION laptop (pfiles9_28b.tgz).

============================================================================
VISION code changes made on Sat, Sep 19, 2009 & Sun, Sep 20, 2009:

*.  Trying again to subclass LOSMODELSGROUP off from MODELSGROUP.  Created
LOSMODEL, LOSMODELPickHandler and LOSMODELSKeyHandler classes as well.

*.  Moved all skymap methods out of MODELSGROUP into LOSMODELSGROUP.

*.  ISDS demos and standard pgms seem to mostly work OK as of Sun, Sep 20
at 3 pm on VISION laptop (pfiles9_20d.tgz).

============================================================================
VISION code changes made early on Thurs, Sep 17, 2009:

*.  Added get_ArrowsGroup_ptr() to MODELSGROUP.

============================================================================
VISION code changes made early on Weds, Sep 16, 2009:

*.  Added ArrowsGroup into QTLOS.  

*.  Added tomcat_subdir member to MyViewerEventHandler, MODELSGROUP and
TILESGROUP classes along with set method.  Set this subdir explicitly in
QTLOS to webapps/LOST/ rather than hardwiring webapps/pathplanning value
into classes.

*.  Try reverting to old version of
stringfunc::decompose_string_into_substrings().

============================================================================
VISION code changes made early on Tues, Sep 15, 2009:

*.  Bluegrass site numbers are missing!  Otherwise, ISDS demos and standard
pgms seem to mostly work OK as of Tues, Sep 15 at 7:30 am on VISION laptop
(pfiles9_15a.tgz).

============================================================================
VISION code changes made on Sun, Sep 13, 2009 & early, Mon Sep 14, 2009:

*.  In PolyLine::add_flow_direction_arrows(), set arrow_center_posn
relative to grid_origin.  Arrow heads now appear as they should on
bluegrass tracks and UAV paths.

*.  Replaced antiquated, baroque
stringfunc::decompose_string_into_substrings() with tokenizer code taken
from web.


============================================================================
VISION code changes made early on Fri, Sep 11, 2009:

*.  Eliminated sym links to several JPEGS in mains/newyork/images within
mains/newyork.

============================================================================
VISION code changes made eary on Thurs, Sept 10, 2009:

*. ISDS demos and standard pgms seem to mostly work OK as of Thurs, Sep 10  at
7:20 am on VISION laptop (pfiles9_10a.tgz).  But arrows no longer show up on
polylines!

============================================================================
VISION code changes made Weds, Sep 9, 2009:

*.  Adjusted params in SignPostsGroup::set_altitude_dependent_size() to
yield better SignPost sizes in LOS program.

*.  MODELSGROUP::export_flowfield_geocoords() loops over all non-zero
magnitude Arrow members of *ArrowsGroup_ptr.  It writes to output text file
the longitude,latitude and UTM geocoordinates for arrow bases and tips.  We
wrote this method in Sep 2009 for thin-client display and MIT path
computation purposes in the LOST project.

============================================================================
VISION code changes made Tues, Sep 8, 2009:

*.  Moved CM_3D_ptr out of SignPostsGroup into GeometricalsGroup along with
set/get methods.

*.  In LOS program, no longer pass movies_group as parameter to
EarthRegionsGroup constructor.  Eliminated MoviesGroup and MoviesKeyHandler
from LOS program.

*.  In GraphicalsGroup destructor, no longer explicitly call
graphical_coutner_ptrs_vector.clear() which is already performed in
destroy_all_Graphicals().

*.  In MODELSGROUP::write_out_skymap(), extract Movie_ptr from
MODEL_ptr->get_OBSFRUSTAGORUP_ptr()->get_MoviesGroup_ptr()->get_Movie_ptr(0)
and not from EarthRegionsGroup_ptr->get_EarthRegion_video_chip(r=1).

*.  Can now compute 19x19 lattice visibilities in approx 1 minute and
display them as a vector flow field in LOS.  

============================================================================
VISION code changes made on Sat, Sep 5, 2009, Sun, Sep 6, 2009 & Mon, Sep
7, 2009:

*.  TilesGroup::load_all_DTED_tiles() first computes the extremal X and Y
coordinates from the input ground target_posns.  It then extracts the lower
left and upper right geocoordinates for a bounding box surrounding the
ground targets by at least 2 degrees in longitude and latitude.
*DTED_ztwoDarray_ptr is instantiated to hold the entire bounding box's
worth of height data which are read in from geotif files.  This method
returns DTED_ztwoDarray_ptr.

We wrote this member function in Sept 2009 in order to significantly speed
up raytracing of individual ground targets for skymap generation purpose.
This method enables reading in terrain height data just once for an entire
skymap computation.

*.  OBSFRUSTUM::raytrace_ground_targets() takes in a set of ground target
positions.  It first instantiates the current OBSFRUSTUM's zplane trapezoid
and marks terrain points inside the trapezoid within *DTED_ptwoDarray_ptr.
This method then raytraces each ground target lying inside the zplane
trapezoid and computes the number of ground targets visibile to the aerial
sensor.  

*.  MODELSGROUP::generate_skymaps() first instantiates
*skymap_twoDarray_ptr to hold ground target visibility probabilities for
cells within a 2D region of the sky.  It loads in terrain height data from
geotif tiles surrounding the ground targets by at least two degs in
latitude and longitude.  This method then loops over aircraft headings and
computes separate skymaps for each angular heading.  Skymaps are written to
output PNG files.

*.  Private member function MODELSGROUP::initialize_skymaps() first reads
in the positions for manually selected ground targets within STL vector
target_posns.  After computing the targets' COM, this method instantiates a
skymap twoDarray whose box size is set by input parameter
skymap_size_in_kms.

*.  Private member function initialize_skymaps() first reads in the
positions for manually selected ground targets stored in
GroundTarget_SignPostsGroup_ptr and transfers them to STL vector
target_posns.  After computing the targets' COM, this method instantiates a
skymap twoDarray whose box size is set by input parameter
skymap_size_in_kms.

*.  Private member function MODELSGROUP::load_heightfields() first
instantiates *DTED_ztwoDarray_ptr to be sufficiently large to hold all
height data needed for skymap generation purposes.  It then loads DTED tile
height data into *DTED_ztwoDarray_ptr.  This method also instantiates and
fills *reduced_DTED_ztwoDarray_ptr in order to speed up raytracing
computations.  Finally, this method instantiates *DTED_ptwoDarray_ptr to
hold angularly visible zone information.

*.  Private member function MODELSGROUP::write_out_skymap() exports the
current skymap within *skymap_twoDarray_ptr to an output PNG file.

*.  Private member function MODELSGROUP::accumulate_skymap_flowfield()
takes in the aircraft's current heading angle theta along with the current
ground target visibility field within *skymap_twoDarray_ptr.  For each cell
within the skymap, this method computes the X and Y coordinates of the
current visibility probability flow and adds them to
*skymap_X[Y]sum_twoDarray_ptr.

*.  Private member MODELSGROUP::compute_average_skymap_flowfield() takes in
aggregated skymap flowfield X and Y components.  It converts them to
magnitude and phase in each sky cell and returns the results in
*skymap_twoDarray_ptr and *skymap_phase_twoDarray_ptr.

*.  Eliminated redundant get_reference_origin() methods from PolyLine since
they already exist in Geometrical base class.

*.  Added private initialize_new_Cone() to ConesGroup class.

*.  Created new Arrow and ArrowsGroup classes.

*. ISDS demos and standard pgms seem to mostly work OK as of Tues, Sep 8 at
8:20 am on VISION laptop (pfiles9_8a.tgz).  But arrows no longer show up on
polylines!

============================================================================
VISION code changes made early on Fri, Sep 4, 2009:

*.  Updated all .pro files.  Qt main programs now compile and link
correctly.

*.  All QTLOS raytracing results come back as null!!!

*. ISDS demos and standard pgms seem to mostly work OK as of Fri, Sep 4
at 9:20 am on VISION laptop (pfiles9_4b.tgz).  But raytracing in QTLOS is
not working!

...................

*.  Fixed d_length = ds/sqrt(1-sqr(e_hat.get(2))) in
OBSFRUSTUM::trace_individual_ray().  Raytracing in QTLOS appears to work OK
again.

...................

*.  Started to resurrect sky map computation in LOS codes.

============================================================================
VISION code changes made early on Weds, Sep 2, 2009:

*.  Updated OBSFRUSTUM::trace_individual_ray() used for sky map generation.

============================================================================
VISION code changes made on Sun, Aug 30, 2009:

*.  Generalized photogroup::output_dataGraphML() to take in U,V coords for
*photograph_ptr.

*.  Added graph_Uposn[Vposn] member vars to photograph class along with set
& get methods

============================================================================
VISION code changes made early on Fri, Aug 28, 2009:

*.  Starting to reconfigure GRAPHJSON to handle 30K MIT graph.

============================================================================
VISION code changes made early on Thurs, Aug 27, 2009:

*.  In G99VD::initialize_member_objs(), explicitly set
hide_backface_flag=false.  UAV video chip in Bluegrass demo now appears
again when ; key is pushed.

============================================================================
VISION code changes made early on Weds, Aug 26, 2009:

*.  Reset window height specifically for Dell M6300/M6400 laptop in
ViewerManager::initialize_dual_windows(),

*. ISDS demos and standard pgms seem to mostly work OK as of Weds, Aug 26
at 8 am on VISION laptop (pfiles8_26c.tgz).  But no longer see UAV video
chip in Bluegrass demo when ; button is pushed.

============================================================================
VISION code changes made early on Tues, Aug 25, 2009:

*.  binaryimagefunc::binary_filter() takes in binary twoDarray
*zbinary_twoDarray_ptr and iterates over all of its pixels.  It
counts the number of unit-valued neighbors within an nx_size x
ny_size window around each pixel.  If the intensity sum ratio to
the number of window pixels exceeds input intensity_frac_threshold,
this method resets the central pixel's binary value to unity.

*.  In Aug 2009, we empirically discovered some noise voxels within the NYC
ladar map.  These voxels generate erroneous noise columns within the nyc
geotif height map.  Raytracing occlusion by such noise columns leads to
false non-sky columns appearing within 2D photo sky classifications.

We really should eliminate the noise voxels within the NYC ladar map.  But
as a quick work-around, we perform simple binary filtering in
MoviesGroup::identify_sky_pixels() to search for non-sky pixels surrounded
by many sky pixels in the horizontal directions.  This method reclassifies
such non-sky pixels as sky.

============================================================================
VISION code changes made on Mon, Aug 24, 2009:

*.  In camera::initialize_member_objects(), initialize
FOV_u=FOV_v=-1*PI/180

*.  In ObsFrustaGroup::flyto_camera_location(int ID), added lines

   CM_3D_ptr->set_initial_camera_posn(camera_world_posn);
   CM_3D_ptr->set_initial_camera_rotation(*Rcamera_ptr);

Zooming out from ObsFrusta in VIEWCITIES works OK after this change was made.

*.  In CustomAnimationPathManipulator::initialize_member_objects(), 
added 

   set_initial_FOV_u(WindowManager_ptr->get_lens_horizontal_FOV());
   set_initial_FOV_v(WindowManager_ptr->get_lens_vertical_FOV());
   set_final_FOV_u(WindowManager_ptr->get_lens_horizontal_FOV());
   set_final_FOV_v(WindowManager_ptr->get_lens_vertical_FOV());

Flying to Baghdad in JUSTEARTH,EARTH seems to work OK after this change was
made.

*. ISDS demos and standard pgms seem to mostly work OK as of Mon, Aug 24 at
6:20 pm on VISION laptop (pfiles8_24c.tgz).  But no longer see UAV video
chip in Bluegrass demo when ; button is pushed.

============================================================================
VISION code changes made early on Sat, Aug 22, 2009 & Sun, Aug 23, 2009:

*.  Added destroy_point(int Point_ID) to PointsGroup class.

*.  In FeaturesGroup::backproject_selected_photo_features_into_3D(), delete
2D feature from * this if no 3D counterpart to the 2D feature can be found.

*.  Added DTED_ztwoDarray_ptr member to MoviesGroup class along with set &
get methods.  Also added reduced_DTED_ztwoDarray_ptr member along with
compute_reduced_ztwoDarray_ptr() method.

*.  MoviesGroup::identify_sky_pixels() requires that *photogroup_ptr and
*DTED_ztwoDarray_ptr have been predefined and computes
*reduced_DTED_ztwoDarray_ptr if it's not already predefined.  This method
retrieves the Movie corresponding to the selected photo and its texture
rectangle.  It then loops over every pixel in the select photo and
raytraces the pixels into the 3D scene.  If the pixel is not occluded by
any 3D scene object, we assume the pixel corresponds to sky and maximally
reset its red color coordinate.

In Aug 2009, we empirically found that this raytracing approach to sky
detection work remarkably well for the ~500 georegistered NYC skyline
photos reconstructed by Noah Snavely's photosynth algorithms.

*.  MoviesGroup::identify_ocean_pixels() requires that photogroup_ptr and
*DTED_ztwoDarray_ptr have been predefined and computes
*reduced_DTED_ztwoDarray_ptr if it's not already predefined.  This method
retrieves the Movie corresponding to the selected photo and its texture
rectangle.  It then loops over every pixel in the select photo and
raytraces the pixels into the 3D scene.  If the pixel is occluded and the
occlusion point lies at 0 meters above sea level, we assume the pixel
corresponds to ocean and maximally reset its blue color coordinate.

In Aug 2009, we empirically found that this raytracing approach to ocean
detection work remarkably well for the ~500 georegistered NYC skyline
photos reconstructed by Noah Snavely's photosynth algorithms.

============================================================================
VISION code changes made early on Thurs, Aug 20, 2009:

*.  Added pointing_direction threevector member to ArmySymbol class along
with set & get methods.

============================================================================
VISION code changes made early on Weds, Aug 19, 2009:

*. ISDS demos and standard pgms seem to work OK as of Weds, Aug 19 at 6:50 am
on VISION laptop (pfiles8_19a.tgz).  

*.  In GraphicalPickHandler::find_closest_Graphical_nearby_mouse_posn(),
added set Graphical_screenspace_posn.put(2,0) if ndims==3. Also, set floor
value on the scale s.  If s becomes too small, it's nearly impossible to
pick a Graphical.  So force s to be at least as large as 0.5.

*.  Added allow_only_az_rotation_flag bool member to Terrain_Manipulator
along with default false value and set method.  Set to true in GSTREETS.

*.  Added WindowManager_ptr member to OBSFRUSTAGROUP along with set
method.  Eliminated WindowManager_ptr from OBSFRUSTAKeyHandler class.

*.  Added get_FOV_u[v]() members to camera class.

*.  Started to incorporate auto resizing of virtual camera's angular field
of view in OBSFRUSTAGROUP::flyto_camera_location().

============================================================================
VISION code changes made on Tues, Aug 18, 2009:

*.  Made some temporary changes and permanent alterations for generating
new PROPAGATOR movie showing off occlusion capability.

============================================================================
VISION code changes made on Sunday, Aug 16, 2009 & early on Mon, Aug 17,
2009:

*. ISDS demos and standard pgms seem to work OK as of Sun, Aug 16 at 10:20
am on VISION laptop (pfiles8_16a.tgz).  Bluegrass demo can be run again off
500 Gig Fat32 disk #5.  Blinking color for car trails is no longer white.

*.  Separated off TilesGroup::read_geotif_subtile_height_data() from 
 read_geotif_subtiles_overlapping_polygon().

*. camera::trace_individual_ray() takes in a ray's direction vector e_hat,
minimum ground height min_Z_ground, maximum raytrace range
max_raytrace_range and ray trace step size ds.  If the ray intercepts the
ground or flies underneath some local patch of *DTED_ztwoDarray_ptr, we
assume the ray is occluded at its impact point and this boolean method
returns true.  Otherwise, if the ray reaches max_raytrace_range without
being occluded, this method returns false.

*. Added minimum_ground_height, maximum_raytrace_range and
raytrace_stepsize members to FeaturesGroup along with set methods and
reasonable default values.

*.  FeaturesGroup::update_feature_label() generates a string containing a
3D feature's longitude and latitude coords if input
display_geocoords_flag==true.  Otherwise, the label contains the range
between the camera and the 3D feature as well as the feature's altitude.
Separated this method off from
FeaturesGroup::backproject_selected_photo_features_into_3D().

*.  Overloaded camera::trace_individual_ray() takes an input ground target
point as the starting location for a ray and traces it backwards towards
the camera's world position.  If the ray ever flies underneath a local
ground patch, we assume the ground target point is occluded.  This boolean
method returns true if the target point is occluded.

*.  Starting to successfully backproject 2D photo features onto 3D
walls and raytrace 3D points back onto other image planes with occlusion
taken into account!

============================================================================
VISION code changes made early on Weds, Aug 12, 2009:

*.  Added multicolor_frusta_flag bool argument to all
generate_still_imagery_frusta_for_photogroup() members of OBSFRUSTAGROUP.
Set this flag to false in GSTREETS.

*.  Renamed some .txt [.dat] suffixes on large newyork/bundler files to
_txt [_dat] in order to cut down on pfiles tarball sizes.

============================================================================
VISION code changes made early on Tues, Aug 11, 2009:

*.  Hacked together photosynth/CROP_PAN which chops apart panoramas
generated by AutoPanPro into evenly spaced panels.

*.  Program FADE is a variant of program FOV .  It's a testing lab for
transitioning between two different photos in two different panorama
mosaics which are pointed in similar directions.

============================================================================
VISION code changes made on Sat, Aug 8, 2009 & Sun,Aug 9, 2009:

*. ISDS demos and standard pgms seem to work OK as of Sat, Aug 8 at 10:30
am on VISION laptop (pfiles8_8c.tgz).  Can't test bluegrass demo due to
disk malfunction.

*.  In G99VideoDisplay class, replaced texture_rectangle_ptr with STL
vector texture_rectangle_ptrs.  Eliminated redundant call to
reset_texture_coords() within G99VD::fill_drawable_geom().

*.  Moved alpha blending methods out of Movie class into G99VideoDisplay.
Eliminated alpha member variable.  

*.  Privatized member var vertices_refptr in G99VideoDisplay class.
Eliminated geom_refptr in favor of private STL vector geom_refptrs.

*.  OBSFRUSTAGROUP::generate_second_image_plane() takes in the ID for some
existing OBSFRUSTUM along with the filename for some photo.  This method
generates a second Movie and adds it to the OBSFRUSTUM's PAT.  It places
the second movie slightly further downrange within the OBSFRUSTUM compared
to the first image plane.

*.  Fixed serious error in
Terrain_Manipulator::initialize_member_objects().  Deleted bad 'double' in
front of min_camera_height_above_grid=5.


============================================================================
VISION code changes made on Tues, Aug 4, 2009:

*.  Added cross_fading_flag member to OBSFRUSTAGROUP along with set method.

*.  Added second image_refptr and TextureRectangle_refptr members to
texture_rectangle class 

============================================================================
VISION code changes made on Sat, July 25, 2009, Sun, July 26, 2009 & early
Mon, July 27, 2009:

*.  Thick client now receives and displays labels for point targets in
QTLOS program

*.  3D pointcloud coloring reset to height colormap when raytracing results
are purged.

*.  Eliminated hardwiring of az_extent,el_extent & roll angles in
MODELSGROUP::generate_LiMIT_MODEL_for_flight_PolyLine().  Pass these params
into LOS program via explicit set commands in main.

*.  Can now enter 90 degree depression angle for OBSFRUSTUM in QTLOS.

*.  LOSServer::generate_JSON_flight_distance_and_time_string() returns the
flight path distance in kilometers and total flight time in hours, minutes
and seconds.

*.  Update total flight time and number of animation frames whenever new
flight path is entered or restored from Derby database.

*.  Raytracing progress bar now indicates how much of computation for the
ENTIRE orbit has been performed.  

*.  230 GByte VFAT lacie drive may have died.  Can't access bluegrass data
on this disk as of 7/27/09!

*. ISDS demos and standard pgms seem to work OK as of Mon, July 27 at 7:15 am
on VISION laptop (pfiles7_27a.tgz).  Can't test bluegrass demo due to disk
malfunction.  

============================================================================
VISION code changes made on early Weds, July 22, 2009:

*.  Scale in PAT for Pyramid equals NEGATIVEINFINITY when timestep changed
from 20 to 7!

*.  We discovered the painful and hard way that Pyramids corresponding to
OBSFRUSTA which are regenerated after the time step is decreased in QTLOS
would equal NEGATIVEINFINITY.  So we explicitly set the scale to unity in
Pyramid::build_current_pyramid() to prevent this catastrophic behavior!

============================================================================
VISION code changes made on early Tues, July 21, 2009:

*.  Created new sensorparams.js file in webapps/pathplanning/scripts
subdir.  Thick client error messages now appear as thin client alerts.

============================================================================
VISION code changes made on Sun, July 19, 2009 & early Mon, July 20, 2009:

*. ISDS demos and standard pgms seem to work OK as of Sun, July 19 at 9:25
am on VISION laptop (pfiles7_19a.tgz).

*.  LOSServer::display_ImageNumberHUD() turns on/off the movie number,
state and world_time flags.

*.  Turn off ImageNumberHUD when displaying time-averaged LOS results in
QTLOS.

*.  Added getCircularPathList() function in flightpath.js

*.  Tried to globally replace longitude,latitude with latitude,longitude in
LOS_controls html and javascript files.

*.  Started to implement photo Graph building via GraphML JSON commands.
But Michael's latest GraphExplorer runs out of memory if we attempt to
build a graph with more than 10 nodes.  

*.  Added Capture current viewer screen button on Movies tab in LOS
controls html file.  Currently hardwire subdir
/home/cho/Desktop/movies_and_screen_shots/ into LOSServer.cc for name of
capture PNG.

..............................

*.  

============================================================================
VISION code changes made on Fri, Jul 10, 2009:

*. ISDS demos and standard pgms seem to work OK as of Fri, Jul 10 at 8:45 am
on VISION laptop (pfiles7_9c.tgz). 

============================================================================
VISION code changes made on Thurs, July 9, 2009:

*.  Explicitly check for correct number of web browser inputs in ROI,
ground target, circular path, timestep, etc.

============================================================================
VISION code changes made on Weds, July 8, 2009:

*.  Set DiamondTouchTable_flag=true in QTCITIES.

*.  In LOSServer::set_aircraft_parameters(), reset UAV MODEL's track when
altitude is adjusted.

============================================================================
VISION code changes made on Tues, July 7, 2009:

*.  Experiment with hardwiring earthpass_ID=cloudpass_ID in LOS/QTLOS.

*.  Added PointFinder_ptr member to LOSServer class along with set method.

============================================================================
VISION code changes made on Sun, Jun 21, 2009 - Mon, July 6 2009:

*.  In OBSFRUSTAGROUP::reset_frustum_colors_based_on_Zcolormap(), comment
out OBSFRUSTUM.set_selected_color(permanent_color).  Restore
OBSFRUSTUM.set_selected_color(red).

*.  Added LiMIT_FOV_OBSFRUSTUM_flag bool member to MODELSGROUP class with
default false value.  Set to true in
MODELSGROUP::set_LiMIT_FOV_OBSFRUSTUM_colors().  Only perform altitude
dependent OBSFRUSTUM volume alpha adjustment if this flag equals true (for
line-of-sight program).

*.  Derived rough estimates for global params needed to align 1012 NYC
point cloud with ladar data.

*.  Starting to extract and display RGB color info from Noah's
reconstructions.

*.  Inserted Noah's 1000 reconstructed photos into NYC ladar cloud with
reasonable success.  

*.  Added several member functions to plane class for RANSAC construction
of planes from noisy input threevectors.

*.  Started to generate graph for 1000 NYC photo set.

*.  Tried to eliminate ALLOW_SELF_MESSAGES from QTCITIES & PLANNER.
Introduced new DISALLOW_SELF_MESSAGES into BUNDLECITIES.  But picking of
OBSFRUSTUM in BUNDLECITIES causes Michael's graph tool to send a message
back to BUNDLECITIES which prevents virtual camera from zooming into
OBSFRUSTUM.  Instead, it jumps to posn over OBSFRUSTUM's apex...

*.  Added active_control_flag [flying_maneuver_finished_flag] bool member
to Terrain_Manipulator class with default true [false] value along with
set/get methods.

*.  Added virtual reset_Manipulator_control() to Terrain_Manipulator along
with dummy method in Custom3DManipulator class.

*.  Selection of thumbnail in Michael's graph tool is starting to cause
successful jumps within bundlecities.  But orientation of virtual camera is
still not nadir.  Need to also reset all OBSFRUSTA coloring to white when
virtual camera zooms into selected photo and stop blinking.

*.  Added print_msg_flag=false bool argument to
Messenger::sendTextMessage().  Privatized
Messenger::print_sent_message_contents().

*.  In Messenger::sendTextMessage(). explicitly delete message after it's
sent by the Producer.

*.  Graphbundler program is failing after it transmits ~20K+ messages.  For
reasons we don't understand, activeMQ just stops sending messages at some
point!

*.  On 6/29/09, we realized that commenting out the expensive call to
set_image_dimensions() leads to catastrophic misalignment in NEW_FOV and
BUNDLECIITES!  So we have to live with this slow call!

*.  Added commented out lines in
OBSFRUSTAGROUP::generate_still_imagery_frusta_for_photogroup() to perform
sanity check on camera's altitude.

*. ISDS demos and standard pgms seem to work OK as of Mon, Jun 29 at 8:50
pm on VISION laptop (pfiles6_29d.tgz).  Cannot check bluegrass demo since
we don't have its disk in Maui.

Weds, July 1:

*.  photogroup::export_image_sizes() loops over all images within the
current photogroup and writes their xdim,ydim sizes to an output text file.
In subsequent runs, programs can read this output file rather than calling
the slow photograph::set_image_dimensions() method.

*.  Adjusted hardwired node and edge color thresholds in
photogroup::issue_add_vertex[edge]_message() for NYC 1K set.

*.  photogroup::import_image_sizes() reads in precalculated image sizes in
order to speed up photograph instantiation by avoiding having to perform
expensive OSG file input.

Thurs, July 2:

*.  Added photogroup_ptr member to MoviesGroup class along with set method.

*.  Movie::reset_displayed_photograph() takes in the filename for some
photo.  It overwrites the current Movie's texture with the new photo which
can differ in size.

Fri, July 3:

*.  Program PROPAGATOR is a variant of program BUNDLECITIES.  It pops open
a 3D window displaying the NYC ladar cloud and georegistered OBSFRUSTA.  It
also opens a 2D window in which the photo for the most recently selected
OBSFRUSTUM is displayed.  This program should eventually enable
communications between the 3D and 2D views.  PROPAGATOR is beginning to
tranfer SignPosts from 3D into selected photos.

*.  GeometricalsGroup::import_package_params(
int framenumber,double& frustum_sidelength,genmatrix& P) now returns
false if package file does not contain a 3x4 projection matrix.

*.  Added photogroup_ptr member to SignPostsGroup class along with set
method.

*.  Added selected_photo_ID member to photogroup class along with set/get
methods.

Sun, July 5:

*.  Fixed sizing of selected photo display in 2D window in PROPAGATOR.

*.  Image plane signposts within allowed U,V interval are now displayed in
PROPAGATOR.

*.  In Terrain_Manipulator::flight_slew_rate(), increase slew_rate by 1.5
so that flying into OBSFRUSTA won't take so long.

*.  Converted NYC height tdp files into geotif files with 1 meter GSD for
raytracing purposes.

Mon, July 6:

*.  Privatized GraphicalPickHandler::find_closest_Graphical_nearby_mouse_posn()

*. ISDS demos and standard pgms seem to work OK as of Mon, July 6 at 10:38
am on VISION laptop (pfiles7_6b.tgz).  

============================================================================
VISION code changes made early on Fri, Jun 19, 2009:

*. ISDS demos and standard pgms basically work OK as of Fri, Jun 19 at 7 am
on VISION laptop (pfiles6_19a.tgz).  UAV obsfrusta are colored white rather
than same colors as UAV flight paths.  And UAV picking in Bluegrass demo is
still difficult.

============================================================================
VISION code changes made early on Thurs, Jun 18, 2009:

*. Added disable_key[pick]handlers_flag members with default false values
to Decorations class along with set methods.  Set these bool flags to true
in QTLOS in order to minimize chances of accidental user mode change.

============================================================================
VISION code changes made early on Weds, Jun 17, 2009:

*.  Figured out reasonable window size and position values for browser and
OSG windows on linux laptop.

*.  Initialize ROI_PolyhedraGroup_ptr to NULL inside MODELSGROUP.  

*.  No longer autohide colorbar in LOS/QTLOS pgms.

============================================================================
VISION code changes made early on Tues, Jun 16, 2009:

*.  In SignPostsGroup class, added CM_3D_refptr member along with set/get
methods.

*.  SignPostsGroup::set_altitude_dependent_size() retrieves the current
altitude of the virtual camera.  It resets the size for the SignPosts
within *this as a linear function of the altitude.

============================================================================
VISION code changes made on Sun, Jun 14, 2009:

*.  MODELSGROUP::set_altitude_dependent_OBSFRUSTA_volume_alpha() retrieves
the current altitude of the virtual camera.  It resets the alpha for the
OBSFRUSTA within input OBSFRUSTUM_ptrs as a linear function of the
altitude.

*.  TilesGroup::individual_latlong_tiles_intercepting_ground_bbox()
reconstructs the corner geopoints for the input ground bounding box.  If
the bbox's corners do not lie within the wedge defined by input vertex0 and
angular interval [theta_min,theta_max], this method returns an empty STL
vector.  Otherwise, it searches over a longitude-latitude grid defined by
[min_long,max_long] & [min_lat,max_lat] and returns those cells within the
output STL vector intercepting the ground bbox.

*.  In OBSFRUSTUM::raytrace_occluded_ground_region(), only read in those
geotif tiles which immediately surround a specified ground bbox.  If the
bbox doesn't lie within the current OBSFRUSTUM, simply return an occlusion
percentage of zero and don't bother performing expensive raytracing.

*.  Defined new darkpurple color in colorfuncs namespace.

*.  Polyhedron::reset_volume_alpha() holds fixed the RGB value of the
Polyhedron's volume coloring but resets its alpha value.

*.  Flight path is cyan, ROI Polyhedron is pink and LiMIT FOV OBSFRUSTA are
white.  Volume alphas for last two fade away as virtual camera zooms in
towards earth.

*.  In CustomAnimationPathManipulator::handleFrame(), now call
reset_CM_posn_and_orientation() for every frame and not just after
animation path has been completed.  But reset camera's final position for
just final frame.

*.  Eliminated all genmatrix(3,3) for rotation in Terrain_Manipulator
class.

============================================================================
VISION code changes made early on Fri, Jun 12, 2009:

*. ISDS demos and standard pgms work OK as of Fri, Jun 12 at 6:45 am on
VISION laptop (pfiles6_12a.tgz).  UAV instantiation following deletion in
Baghdad demo is definitely flawed.  UAV picking in Bluegrass demo is still
very difficult.

*.  Reworked circular flight path entry part of webpage so that long/lat &
MGRS coordinates can be entered.

============================================================================
VISION code changes made early on Tues, Jun 9, 2009:

*.  Rearranged tab entries in Michael's webform.

*.  Added circular flight path entry into Michael's webform.  

*.  Added ground box entry into Michael's webform.

*.  Added ground_bbox_ptr member to MODELSGROUP class along with set/get
methods.

============================================================================
VISION code changes made on Sat, June 6, 2009 & Sun, Jun 7, 2009:

*.  Added get_LOS_intersection_geopoint() to LatLongGrid class.

*.  Added north_hat member threevector to LatLongGrid class along with get
method.

*.  LatLongGrid::compute_north_direction() fills member threevector
north_hat with the north direction vector computed at the LOS's
intersection geopoint in UTM coordinates.

*.  Created osg/CompassHUD class which displays projected 2D north and
east directions via a pair of arrow heads which spin whenever the
Terrain_Manipulator is rotated.


*.  Custom3DManipulator::compute_approx_projected_north_hat() assumes that
world-space x_hat and y_hat represent decent approximations to the true
east and north direction vector.  (This should be true for relatively small
longitude-latitude patches on the earth.)  It projects x_hat and y_hat onto
the virtual camera's U_hat, V_hat and W_hat basis. This method computes the
average of the azimuthal directions corresponding to n_hat and e_hat + 90
degs.  When the 3D map is viewed from a nadir orientation, these two angles
are equal.  But when perspective effects become large as the viewing angle
deviates signficantly from nadir, these two angles can substantially
differ.  This method returns the average of the two angles as a reasonable
estimate for north_hat's azimuthal angle.

*.  Eliminated all references to Grid class within
CustomAnimationPathManipulator class.

*.  MODELSGROUP::generate_circular_PolyLine_Path() takes in center
longitude,latitude geocoords as well as an orbit radius.  It generates a
circular PolyLine member of *Path_PolyLinesGroup_ptr.

*.  Added ground_bbox_ptr bounding_box* member to OBSFRUSTUM along with set
method.

============================================================================
VISION code changes made early on Thurs, June 4, 2009:

*. In OBSFRUSTAGROUP::generate_SignPost_at_imageplane_location(), added
SignPost_ptr->set_color(), SignPost_ptr->set_permanent_color() and
SignPost_ptr->set_selected_color() calls.

*. ISDS demos and standard pgms work OK as of Thurs, Jun 4 at 7:30 am on
VISION laptop (pfiles6_4b.tgz).  UAV instantiation following deletion in
Baghdad demo is definitely flawed.  UAV picking in Bluegrass demo is still
difficult.
 
*.  ImageServer::broadcast_iPhone_metadata() publishes iPhone timing and
position information to the ActiveMQ messenger of the ImageServer class.

============================================================================
VISION code changes made early on Tues, Jun 2 2009:

*.  LOSServer::set_ground_target_parameters() can now parse output coming
from Michael Yee's May 31 webpage.

*.  Moved several lines out of SignPostsGroup::generate_new_SignPost() into
new initialize_new_SignPost() method.  SignPostsGroup class structure now
more closely mirrors that of CylindersGroup.

*.  Eliminated SignPostsGroup::generate_SignPost_geode().  

*.  Deletion of SignPosts with Michael's tool now works.  But instantiation
of SignPosts in JUSTEARTH no longer works.

*.  In LatLongGrid::angular_separation_between_lines(), added
delta_theta_0.05 conditional.

*.  MyViewerEventHandler::generate_AVI_movie() now moves completed
movie.avi to Desktop folder.

============================================================================
VISION code changes made on Sun, May 31, 2009 and early on Mon, June 1,
2009:

*.  basic_math::bool is_int(double x,double TINY=1E-10) now takes TINY as
input argument.

*.  mathfunc::ndigits_after_decimal_point() takes in x and strips off its
integer part.  It then counts the number of powers of 10 needed to convert
its fractional remainder into a whole number.

*.  Fixed precision problem in
LatLongGrid::draw_longitude[latitude]_lines().  Dynamic grid lines now
appear to be properly labeled.

*.  mathfunc::ndigits_before_decimal_point() takes in x and strips off its
fractional part.  It then decomposes the digits within the integer part of
x and returns the number of digits.

*.  Created new ColorbarHUD class.

*.  Added explicit call to
PointCloudsGroup_ptr->update_dynamic_Grid_color() in 'c' case of 
PointCloudKeyHandler::handle().

*. Added STL vector<twovector> Grid_corner_screen_coords member to
Terrain_Manipulator class along with get method.
Terrain_Manipulator::compute_Grid_corner_screen_coords() updates member STL
vector Grid_corner_screen_coords.

*.  Terrain_Manipulator::check_Grid_overlap_with_colorbar() checks whether
any of the screen x values for the Grid's 9 'corners' exceeds max_grid_x.
If so, this method masks *ColorbarHUD_ptr.  If not, *ColorbarHUD_ptr is
unmasked.

============================================================================
VISION code changes made early on Fri, May 29, 2009:

*.  Added long_initial_UAV_track_flag to MODELSGROUP along with set
method and default false value.  Set to true in program PLANNER.

*. ISDS demos and standard pgms work OK as of Fri, May 29 at 7:30 am on
VISION laptop (pfiles5_29b.tgz).  UAV instantiation following deletion in
Baghdad demo is definitely flawed.  UAV picking in Bluegrass demo is still
difficult.

============================================================================
VISION code changes made early on Thurs, May 28, 2009:

*.  In camera::write_camera_package_file(), first check that focal
parameters are negative.  If not, do not write out package file.


============================================================================
VISION code changes made early on Weds, May 27, 2009:

*.  Fixed mains/OSG/predator.cc s.t. it now compiles.

*.  libosgModels now depends upon libosgOrganization.  But former precedes
latter!  Must be fixed in near future...

============================================================================
VISION code changes made on Sat, May 23, 2009, Sun, May 24, Monday, May 25
& early Tuesday, May 26:

*.  TESTTEXTURE modified to work acceptably.

*.  TESTPYRAMIDS and SATDRAPE are badly broken.

*.  Coloring of fused HAFB data in program FUSION is broken.

*.  Aside from serious problem in program FUSION noted above, ISDS demos
and extended pgms seem to work OK as of Sun, May 24 at 7:25 am on VISION
laptop (pfiles5_24a.tgz)

*.  Reset AnimationController frame to 0 when raytracing results are
cleared or flight path is deleted.

*.  LatLongGrid::destroy_dymamic_grid_lines() is a high-level method which
purges all longitude and latitude PolyLines and STL map entries.

*.  Overloaded LatLongGrid::destroy_dynamic_grid_lines() iterates over
input *map_ptr. It destroys every PolyLine within input
*PolyLinesGroup_ptr.  This method also removes all PolyLine entries from
STL map member *map_ptr.

*.  All dynamic grid coloring now correctly changes from grey to purple
(and vice-versa) in program LOS.

*.  Added get_Clock_ptr() method to Operations class.  No longer
instantiate global clock within LOS program.

*.  Operations::set_current_master_clock_time_duration_and_step() takes in
the duration for a simulation.  It sets the master clock's starting time to
the current UTC and its stopping time to the starting time + simulation
duration.  This method also sets the master clock's time step per master
frame.

*.  Replaced p_ID member of ColorGeodeVisitor class with p_ID_start &
p_ID_stop.  Coloring of dual-lobed raytraced regions works again.

*.  Added PointCloudsGroup::get_dependent_coloring_var();

*.  PointCloudsGroup::update_dynamic_Grid_color() resets the dynamic Grid's
color from grey to purple if the current colormap number == 6 (greyscale
background).  Otherwise, this method resets the dynamic Grid color back to
grey.

*.  Added Operations_ptr member to MODELSGROUP class along with
constructor.

*.  LOS simulation duration now set by flight pathlength rather than
by some hardwired limit.  Eliminated duration entry from LOS_controls.html.

*.  RACETRACK_SENDER now broadcasts aircraft posn in UTM rather than
long/lat coords.

*.  Added text_size_prefactor member var to LatLongGrid class along with
set method.  For Program LOS, use text_size_prefactor=1E-3.  For all other
programs, adopt default value of 5E-4.

*.  EarthRegionsGroup::initialize_RTPS_mover_Cylinders() pre-instantiates
n_cylinders Cylinders for the real-time persistent surveillance project.
Since Cylinder generation is time consuming, we prefer to pre-instantiate
some reasonable number at the time the main program starts up.  Then these
cylinders will already be in place to respond to ActiveMQ messages
indicating where they should be positioned within the Milwaukee map.  This
method also instantiates a new track within
*(EarthRegion_ptr->get_dynamic_tracks_group_ptr()) corresponding to each
Cylinder as well as a vehicle within movers_group_ptr if
associate_tracks_with_movers_flag==true.

*.  Deleted CylindersGroup::generate_RTPS_Cylinders().  

*.  Double clicking on moving cylinder in QTEOCITIES locks virtual camera
to its instantaneous location.

*.  In MODELSGROUP::parse_next_message_in_queue(), minimize fictitious UAV
path so that it's not visible within RTPS viewer output.

*.  Program mains/aerialEO/NFOV_SENDER simulates the narrow field-of-view
camera system broadcasting its instantaneous ground location via ActiveMQ
messages once per second.

*.  Added NFOV_lookpoint_messenger to EOCITIES.

============================================================================
VISION code changes made on Thurs, May 21, 2009 & early on Fri, May 22:

*. In OBSFRUSTUM::extract_viewfrustum_components(), calculate angles
theta_min < theta_max of triangular wedge's sides relative to XY coordinate
system.  theta_max-theta_min should equal OBSFRUSTUM's azimuthal extent.

*.  TwoDarray::fast_XY_to_Z() takes in x and y values which are assumed to
lie inside the current TwoDarray.  It returns the Z value corresponding to
the input XY coordinates.  In order to minimize execution time, this method
does not perform any bounds checking.

*.  OBSFRUSTUM::trace_segment() checks whether the curr ray segment lies
above the maximal ground height.  If so, this boolean method returns false
(indicating that the ray is not occluded by the ground terrain) and sets
prev_i_start=prev_i_stop=-1 (indicating that the next ray to be traced has
no a priori likely location where it will be occluded).  Otherwise, this
method checks whether the curr ray segment lies above the local ground
height.  If so, it returns true indicating that the ray is occluded by the
ground terrain.

*. compositefunc::extremal_pixel_value() takes in coordinates (px,py) for
some pixel within input *ztwoDarray_ptr.  It also takes in an m x n block
(where m and n are assumed to be odd).  This method performs a brute force
search of all pixels of *ztwoDarray_ptr within the m x n neighborhood of
(px,py).  It returns the Z of the maximal[minimal]-valued pixel in the
neighborhood.

*.  compositefunc::extremal_subsample_twoDarray() takes in *ztwoDarray_ptr and
*znew_twoDarray_ptr.  The latter is assumed to be smaller in size than the
former.  This method first sets xlo, xhi, deltax, ylo, yhi, deltay such
that the extreme x and y edge values of the 2 twoDarrays match (i.e. xmin,
xmax, ymin, ymax which differ from xlo, xhi, ylo and yhi by 0.5*deltax and
0.5*deltay).  This method next runs an mxn block across *ztwoDarray_ptr
where m,n are set by the ratio of the smaller to larger twoDarrays' delta_x
and delta_y values.  The maximal [minimal] pixel values within the blocks
are stored within *znew_twoDarray_ptr if input extremal_sentinel=2 [0].

*.  In OBSFRUSTUM::raytrace_occluded_ground_regions(), loop over points
inside z-plane trapezoid and find maximal terrain values within 1-degree
angular sectors.

*.  Added virtual void update_grid_text_color() dummy method to Grid
class.  Grid labels & tick marks now properly change color.

*.  Added raytracing cell size field under Visualization controls part of
webpage interface.

============================================================================
VISION code changes made early on Weds, May 20, 2009:

*.  Pass max_raytrace_range into OBSFRUSTUM::trace_individual_ray().
Immediately return from this method if apex to ground point distance
exceeds max_raytrace_range.

============================================================================
VISION code changes made early on Tues, May 19, 2009:

*.  Moved maximum[minimum]_allowed_vert_FOV() methods out of MODEL class
into OBSFRUSTUM.

*.  In MODELSGROUP::generate_Predator_Model_for_flight_PolyLine(), set
predator OBSFRUSTUM az/el extents along with roll & pitch angles.
Orientation of predator OBSFRUSTRA in bluegrass demo is OK again.

*.  ISDS demos and standard pgms work OK as of Tues, May 19 at
9:30 am on VISION laptop (pfiles5_19d.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  UAV picking in Bluegrass
demo is very difficult.

============================================================================
VISION code changes made early on Mon, May 18, 2009:

*.  Added ground target controls into LOS_controls.html and LOSServer.cc.
Can now enter long/lat coords for some targets in webpage.

*.  Added refresh_flag to LatLongGrid::draw_longitude[latitude]_lines().
Have not yet implemented logic to force purple coloring to be displayed
whenever greyscale background map is displayed in los/qtlos main programs.

*. In SignPostsGroup class, generalized generate_new_SignPost_on_earth() 
to take in specified_UTM_zonenumber argument.


============================================================================
VISION code changes made on Sun, May 17, 2009:

*.  Eliminated LOSServer::set_AnimationController_ptr() in favor of
set_Operations_ptr().  

*.  Doubled size of dynamic latlong grid text labels.  Added option to
increase initial thickness of latlong grid lines.  Eliminated unnecessary
decimal after integer latlong values.

*.  TilesGroup::purge_tile_files() purges the contents of LOS geotiff files
left over from the previous running of the line-of-sight analysis main
program.

*.  Can now purge flight path and previous LOS analysis results by hitting
crude radio button on LOS webpage.  Also added radio button for displaying
cumulative LOS results.

============================================================================
VISION code changes made on Fri, May 15, 2009:

*.  ISDS demos and standard pgms basically work OK as of Fri, May 15 at
7:04 pm on VISION laptop (pfiles5_15a.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  UAV picking in Bluegrass
demo is again impossible.  Dynamic OBSFRUSTA orientation and extents are
still too difficult to set reliably.  Connectivity to Michael Yee's KTSP
java program is not working!

============================================================================
VISION code changes made early on Weds, May 13, 2009:

*.  ISDS demos and standard pgms basically work OK as of Weds, May 13 at
5:45 pm on VISION laptop (pfiles5_13d.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  UAV picking in Bluegrass
demo is again impossible.  Dynamic OBSFRUSTUA orientation and extents are
still too difficult to set reliably.

============================================================================
VISION code changes made early on Tues, May 12, 2009:

*.  Added Grid_ptr member to PointCloud class along with set method.
Starting to add functionality to change grid color from grey to purple
whenever greyscale cloud is displayed.

*.  Eliminated geode_refptr member of Grid class. Recall Grid inherits from
Geometrical which already has a geode_refptr member.

*.  PointCloudsGroup::reload_all_colors() loops over all PointClouds and
calls their reload_colormap_array() methods.  It also resets the
LatLongGrid's color from grey to purple if background pointcloud appears on
greyscale colormap.

============================================================================
VISION code changes made on Mon, May 11, 2009:

*.  Updated Makefile_w_sift and Makefile_sans_sift

============================================================================
VISION code changes made on Sun, May 10, 2009 & early Mon, May 11, 2009:

*.  Calling TextureSector::compute_corner_XYZs() from
TextureSectorsGroup::generate_TextureSector_geode() messes up San Clemente
texture display in EARTH program.  Temporarily commented out this call.
Come back to this problem later...

*.  ISDS demos and standard pgms seem to work OK as of Sun, May 10 at 6:25
am on VISION laptop (pfiles5_10b.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  AND UAV picking in
Bluegrass demo is again impossible.

*.  In MODEL class, promoted members
OBSFRUSTUM_alpha,OBSFRUSTUM_beta,OBSFRUSTUM_roll,OBSFRUSTUM_pitch from
doubles to vectors of doubles.  Changed all their set functions to
push_back methods.  These vectors can now hold parameters for multiple sets
of OBSFRUSTA attached to a single MODEL.

*.  Changed OBSFRUSTUM* MODEL::compute_dyamic_OBSFRUSTUM(... , int
OBSFRUSTUM_ID) to vector<OBSFRUSTUM*> MODEL::compute_dynamic_OBSFRUSTA().

*.  Can start to display WFOV & NFOV OBSFRUSTA emanating from single
aircraft platform.

*.  OBSFRUSTAGROUP::find_Movies_in_OSGsubPAT() loops over all OBSFRUSTA
within *this.  It pushes back each OBSFRUSTUM's Movie pointer onto an STL
vector.  This method returns the STL vector of Movie pointers.

*.  In MovieKeyHandler::handle(), changed
Movie_ptr=MoviesGroup_ptr->get_Movie_ptr(0) to get_selected_Movie_ptr().

*.  Alpha blending appears to work OK again for BUNDLECITIES.

*.  Updated hard-coded lat-long limits in TilesGroup::init_member_objects().

============================================================================
VISION code changes made early on Fri, May 8, 2009:

*.  Started implementing Ross' version of ImageServer and ImageClient.
Ross' code runs pretty fast.  Our code runs horribly slow.

============================================================================
VISION code changes made early on Weds, May 6, 2009:

*.  Added 2D video display viewer to mains/aerialEO/Qt/imageclienttest.cc.
When image client requests an image from the image server, it now displays
the received image within the viewer.

============================================================================
VISION code changes made early on Tues, May 5, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Tues, May 5 at
7:50 am on VISION laptop (pfiles5_5a.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  AND UAV picking in
Bluegrass demo is still very difficult.

*.  SignPostsGroup::broadcast_aimpoint() issues an ActiveMQ message with
the XY coordinates for the last entered aimpoint SignPost.

============================================================================
VISION code changes made on Sat, May 2, 2009, Sun, May 3, 2009 & early Mon,
May 4, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Sat, May 2 at 11 am
on VISION laptop (pfiles5_2a.tgz).  UAV instantiation following deletion in
Baghdad demo is definitely flawed.  And UAV picking in Bluegrass demo is
still difficult.

*.  In PickHandler::handle(), we explicitly enable Polyhedron dragging if
current mode = MANIPULATE_POLYHEDRON.

*.  Added SIA controls to BG2 buttons.  

*.  Can now toggle between tall and short cylinder sizes for ground truth
cars.

*.  Added tall_BG2_size_flag bool member to CylindersGroup class along with
set method.  BG2ButtonServer::increase[decrease]_Cylinders_size() calls set
method with true [false] value.

*.  CylindersGroup::set_tall_Cylinder_size() rescales all Cylinders' X, Y
and Z coordinates along with their text sizes so that they can easily be
seen within the Milwaukee map.  set_short_Cylinder_size() undoes these
magnifications and returns the Cylinders to sizes reasonably appropriate
for tracking cars when the virtual camera has zoomed in to the city block
level.

*.  Renamed mains/aerialEO/Qt/BG2buttons.html as RTSPbuttons.html.  Tried
to globally replace BG2 with RTPS in all classes.

*.  Added bool propagate_all_tracks_flag member to EarthRegionsGroup with
default true value along with set method.  Set this flag to false in
QTEOCITIES.

*.  Polyline::get_polyline_ptr() now calls
PolyLine::get_or_set_polyline_ptr().

*.  PolyLine::compute_bbox() computes and saves the XYZ bounding box
enclosing the current PolyLine object.

*.  In PolyLine::initialize_member_objects(), changed blinking color from
white to black.

*.  EarthRegion::check_Cylinder_ROI_intersections() loops over all
Cylinders within input *CylindersGroup_ptr and extracts their current
positions.  It checks whether each Cylinder lies inside any ROI polyline.
If so, this method blinks the ROI polyline.

*.  Renamed SignPostsGroup::set_color() as set_colors().  Split off most of
SignPostsGroup::set_colors() into update_colors().  Call update_colors() in
SignPostPickHandler::release().  

============================================================================
VISION code changes made early on Fri, May 1, 2009:

*.  Added include_sender_and_timestamp_info_flag bool member to Messenger
class with default construct true value.  Set this input flag to false for
EOCITIES messengers to minimize communications overhead.

============================================================================
VISION code changes made early on Thurs, April 30, 2009:

*.  Started to create new program mains/aerialEO/Qt/cars.cc which will
eventually broadcast modified Bluegrass truth tracks for display within
EOCITIES.

============================================================================
VISION code changes made on Mon, April 27, 2009:

*.  Added mains/aerial_EO/racetrack_sender.cc to repository.

============================================================================
VISION code changes made on Sat, April 25, Sun, April 26, 2009 & Mon, April
27, 2009:

*.  Created mains/aerialEO subdir and added to repository.

*.  Renamed LatLongGrid::get_grid_color() as get_dynamic_grid_color().
If flat_grid_flag==true in this method, it returns get_curr_color() rather
than a hardwired color.

*.  mains/aerialEO/RACETRACK_SENDER simulates Massivs system broadcasting
its instantaneous position via ActiveMQ messages once per second.

*.  Added INSERT_POLYHEDRON & MANIPULATE_POLYHEDRON modes into
ModeController.  

*.  Moved most of EarthRegion::generate_bbox() into
PolyhedraGroup::generate_bbox().

*.  Created new PolyhedronPickHandler class.  Added
PolyhedronPickHandler_ptr member to Decorations class along with get
methods.

*.  EOCITIES can now display 3D (0.5 km)**2 ROI bboxes selected by user.

*.  LatLongGrid::update_grid_text_color() sets the color of the axes' and
ticks' labels to the current dynamic grid color.

*.  bool vertices_handler::reset_vertex_posn() now returns false if it does
not successfully reset the vertex posn.

*.  Added README/README.powerpoint to repository.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Apr 27 at
1:20 pm on VISION laptop (pfiles4_27l.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  AND UAV picking in
Bluegrass demo is still unacceptably difficult.

[ *.  Added geometric_mean_text_size_flag member to PolyhedraGroup with
default false value along with set method.  If true,
PolyhedraGroup::generate_bbox() takes text size proportional to geometric
mean of X and Y text_posn coordinates.  Wrote this ugly hack for bluegrass
demo Activity Region labeling purposes. ]

============================================================================
VISION code changes made early on Fri, April 24:

*.  Added instantiate_MODELPickHandler_flag with default true value
argument to Decorations::add_MODELS() and
instantiate_MODEL_key_and_pick_handlers() member functions.  Set this bool
to false in LOS program to avoid virtual camera from becoming locked onto
MODEL when user tries to select its OBSFRUSTUM.

============================================================================
VISION code changes made on Thurs, April 23:

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Apr 23 at
1:20 pm on VISION laptop (pfiles4_23a.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  AND UAV picking in
Bluegrass demo is still unacceptably difficult.

============================================================================
VISION code changes made on Sat, April 18, 2009, Sun, April 19, 2009 & Mon,
April 20, 2009:

*.  Blinking color for OBSFRUSTA in BUNDLECITIES is now set to red.  Also
set selected Graphical number to -1 when photo is picked in Michael Yee's
social network tool.

*.  Moved thumbnail filename generation method out of photograph class into
videofuncs namespace.  

*.  OBSFRUSTAGROUP::load_hires_or_lores_photo() retrieves the Movie
corresponding to the selected OBSFRUSTUM.  If input hires_flag==true, this
method fills the Movie's texture rectangle with the photo corresponding to
the Movie's full resolution file name.  Otherwise, the texture rectangle is
filled with the Movie's thumbnail version.  We wrote this method in April
2009 in order to dynamically load [unload] full resolution photos whenever
a user zooms into [out from] a selected OBSFRUSTUM.

*.  Added erase_other_OBSFRUSTA_flag member to OBSFRUSTAGROUP class along
with set/get methods.  Set this bool flag to true in BUNDLECITIES.

*.  Yellow volume color for CH OBSFRUSTUM no longer appears in Bluegrass
demo.  OBSFRUSTA in Planner, Raytrace, NEW_FOV and PHOTOS_2D demos now
appears white rather than their usual colors.  Otherwise, ISDS demos and
standard pgms seem to work OK as of Sun, Apr 19 at 11:15 am on VISION
laptop (pfiles4_19d.tgz).  UAV instantiation following deletion in Baghdad
demo is definitely flawed.  UAV picking in Bluegrass demo possible but very
difficult.

*.  In MODEL::compute_dynamic_OBSFRUSTUM(), reconstruct OBSFRUSTUM using
improved estimate for ground height coming from PointCloud data only if 
compute_zface_height_flag member==true.  Set this bool flag in program LOS,
but keep its default false value in bluegrass demo.  Emulated UAV video
coming from CH imagery now floats again above Lubbock pt cloud.

*.  Added instantiate_OBSFRUSTUMPickHandler_flag member to MODELSGROUP
class along with set method.  Set this bool flag to true in program LOS.
But keep its default false value in QTCITIES in order to simplify
UAV MODEL picking in Bluegrass demo.

*.  Added enable_OBSFRUSTA_blinking_flag member to OBSFRUSTAGROUP along
with set method.  Set this bool to true in BUNDLECITIES.  But its default
false value preserves OBSFRUSTA coloring in QTCITIES, PLANNER, RAYTRACE,
NEW_FOV & PHOTOS_2D.

*.  Wrote mains/newyork/RENAME_PHOTOS which generates a script file that
creates soft links between Noah's BUNDLER input photos to number photo
filenames of the form photo_XXXX.jpg.

*. In camera::docopy(), added UV_corner.clear() and
UV_corner_world_ray.clear() commands.  Memory usage no longer grows without
bound in program LADARSYNTH.

*.  Program LADARSYNTH performs a brute-force search over a 7-dimensional
parameter space to find the scale factor, global translation and global
rotation needed to georegister Noah Snavely's relatively registered photo
set generated by his BUNDLER program.  We hardwire reasonable initial
guesses for all these parameters within this program.  Looping over all the
parameters, LADARSYNTH computes the squared projection error between 3D
features manually selected in the NYC point cloud and 2D tiepoint
counterparts also manually selected in some number of Noah's photos.  After
multiple iterations of this looping are performed, LADARSYNTH returns a
decent estimate for the 7 global parameter values.

*.  Added most_recently_selected_ID member to GraphicalsGroup along with
get method.  Set most_recently_selected_ID in set_selected_Graphical_ID()
provided selected_Graphical_ID != -1.  Use most_recently_selected_ID rather
than selected_Graphical_ID in OBSFRUSTAGROUP::load_hires_or_lores_photo()
to avoid seg fault.

*. OBSFRUSTAGROUP::issue_select_vertex_message() broadcasts the ID of the
most recently selected OBSFRUSTUM ID provided it does not equal -1.  This
method enables BUNDLECITIES to communicate with Michael Yee's social
network tool for photos.

============================================================================
VISION code changes made on Tues, April 14, 2009 & Thurs, April 16, 2009:

*.  texture_rectangle::import_photo_from_file() takes in the name for some
JPEG, PNG, TIF, etc image.  It uses an OSG plugin to load the contents of
the image file into *image_refptr.  This method resets various image
parameters such as pixel width, height and number of images.

*.  Added TextureRectangle_refptr member to texture_rectangle class along
with get method.  Added texture_rectangle::set_TextureRectangle_image().

*.  Eliminated small method texture_rectangle::initialize_texture() and
moved its contents into G99VideoDisplay::initialize_texture_rectangle().

*.  In texture_rectangle::convert_color_image_to_greyscale(), changed call
from get[set]_pixel_RGB_values(pu,pv,R,G,B) to
get[set]_pixel_RGB_values(pu,pv,image_refptr->data(),R,G,B);

*.  texture_rectangle::generate_thumbnail() takes in the filename for some
photo and uses ImageMagick's convert program to subsample it so that it
takes up less memory.

*.  photograph::get_thumbnail_filename() appends thumbnails/ to the
current photo's subdirectory and preprends "thumbnail_" to the
photo's filename.

*.  photogroup::generate_thumbnails() loops over all photographs within the
current photogroup.  It temporarily instantiates a texture_rectangle and
calls this class' generate_thumbnail() member function.  The output
thumbnail file is written to a thumbnails/ subdirectory of the photographs'
directory.  And each thumbnail file has a thumbnail_ prepended to its name.

*.  In OBSFRUSTAGROUP::generate_still_imagery_frusta_for_photogroup(), load
thumbnail rather than full resolution versions of photographs into
OBSFRUSTUM's Movie if input argument thumbnails_flag==true.  But set
movie's filename to high-resolution photo even if thumbnails_flag==true so
that full photo can be later loaded on demand.

============================================================================
VISION code changes made on Sun, April 12, 2009 & early Mon, April 13, 2009:

*.  Eliminated unused ColorMap_ptr member of G99VideoDisplay class.  

*.  No longer automatically generate ColorMap_ptr & Registry_refptr in
texture_rectangle::allocate_member_objects().  Instead create these objects
when they're actually needed.

*.  Added bool member vars display_ViewingPyramid_flag and
display_ViewingPyramidAboveZplane_flag along with set/get methods to
OBSFRUSTUM class.

*.  In OBSFRUSTUM class, moved automatic instantiation of
 *viewing_pyramid_ptr and viewing_pyramid_above_zplane_ptr into 
instantiate_OSG_Pyramids().  Pyramid construction now depends upon
display_ViewingPyramid[AboveZplane]_flag bool values.

*.  mains/newyork/BUNDLECITIES is a variant of mains/sift/PANCITIES which
is tailored for importing and displaying OBSFRUSTA for Noah's reconstructed
photos.

*.  Streamlined OBSFRUSTA generation so that BUNDLECITIES can now generates
hundreds of OBSFRUSTA reasonably quickly.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Apr 13 at 7:20
am on VISION laptop (pfiles4_13c.tgz).  UAV instantiation following deletion
in Baghdad demo is definitely flawed.  UAV picking in Bluegrass demo
possible but very difficult.

============================================================================
VISION code changes made on Sat, April 11, 2009:

*.  photogroup::issue_add_vertex_message() now scales size of photo nodes
by factors proportional to log of their total number of SIFT feature
matches.

*.  photogroup::generate_bundler_photographs() reads in the filenames for
Noah's reconstructed photos.  It instantiates a photograph for each bundler
image.

*.  photogroup::read_photograph_covariance_traces() parses Noah's
text file containing covariance matrix and trace information for
each photo reconstructed by BUNDLER.

============================================================================
VISION code changes made on Weds, Apr 8, 2009 and Fri, Apr 10, 2009:

*.  Added display_ViewingPyramidAboveZplane_flag to several member
functions in OBSFRUSTUM and OBSFRUSTAGROUP classes.  Nice to have option of
showing only ViewingPyramids and NOT ViewingPyramidsAboveZplane when
viewing Noah's photos inside of 3D NYC map.

*.  ISDS demos and standard pgms seem to work OK as of Fri, Apr 10 at 12:12
pm on VISION laptop (pfiles4_10a.tgz).  UAV instantiation following deletion
in Baghdad demo is definitely flawed.  UAV picking in Bluegrass demo
possible but very difficult.

..................

*.  Program GRAPHBUNDLER reads in the SIFT adjacency matrix generated by
Noah Snavely's bundler program which establishes links between two photos
if they share SIFT features in common.  GRAPHBUNDLER issues a series of
ADD_EDGE calls to Michael Yee's GraphExplorer tool.  Michael's tool can
therefore be used to visualize Noah's graphs.

============================================================================
VISION code changes made on Sat, Apr 4, 2009 & Mon, Apr 6, 2009

*.  In camera class, eliminated get_world_rotation() in favor of
get_Rcamera_ptr().

*.  In camera class, eliminated get_avg_UV_corner_world_ray() in favor of
get_What(). 

*.  ISDS demos and standard pgms seem to work OK as of Sat, Apr 4 at 11:33 am
on VISION laptop (pfiles4_4b.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  UAV picking in Bluegrass
demo possible but very difficult.

*.  Added member vars
bundler_to_world_scalefactor[az][el][roll][translation] to photogroup class
along with set/get methods.

============================================================================
VISION code changes made early on Thurs, Apr 2, 2009:

*.  Added compute_skymap_flag bool member to MODELSGROUP class.

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Apr 2 at 6:39
am on VISION laptop (pfiles4_2a.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  UAV picking in Bluegrass
demo possible but very difficult.

============================================================================
VISION code changes made early on Sunday, Mar 29, 2009 & early Monday, Mar
30, 2009:

*.  camera::convert_bundler_to_world_coords() takes in extrinsic rotation
and translation camera parameters extracted form Noah Snavely's BUNDLER
program output.  It also takes in a scale factor, global translation and
global rotation which are used to convert Noah's relative camera parameters
to absolute world coordinates.  This method resets the current camera's
world position and az, el, roll member variables so that the camera can be
placed directly into ladar maps in UTM world coordinates.

*.  camera::write_camera_package_file() outputs the current camera's
intrinsic and extrinsic parameters to a package file which can subsequently
be read in to form an OBSFRUSTUM by program TESTCITIES, PANCITIES, etc.

*.  camera::get_R_noah_to_peter_ptr() returns the rotation matrix which
converts from Noah's coord system to Peter's where world point clouds are
aligned with Z_hat in the standard way.

*.  In FeaturesGroup::write_feature_html_file(), commented out line

//     if (obs_pass_numbers.size()==1) p=obs_pass_numbers.front();

*.  In Genarray::docopy(), added missing call to Tensor<A>::docopy(g).
This bug was a critical error!

*. photogroup::reconstruct_bundler_cameras() parses the output camera files
generated by Noah Snavely's BUNDLER program.  For each photo within input
file image_list_filename, this method recovers the intrinsic and extrinsic
camera parameters generated by Noah's program.  It dynamically instantiates
a new photograph for each camera and sets its world rotation and position
based upon Noah's input parameters.

*.  In photograph::parse_timestamp_metadata(), check size of STL vector
time_strings.  Return if size==0.
  

============================================================================
VISION code changes made early on Friday, Mar 27, 2009:

*.  Added TilesGroup pointer members to MODELSGROUP and OBSFRUSTUM classes
along with set methods.

*.  Moved all tile raytracing methods out of geofuncs namespace into
new osg/osgEarth/TilesGroup class.

*.  As of 6:40 am on Fri, Mar 27, we believe linking order of classes in
Makefile is OK again.

*.  Tried to remove worst inefficiencies from
ColorGeodeVisitor::color_geometry_vertices().

============================================================================
VISION code changes made early on Thurs, Mar 26, 2009:

*.  Added GroundTargets_SignPostsGroup in program afghanistan/LOS.

*. SignPostPickHandler::instantiate_SignPost() now calls
SignPostsGroup_ptr->generate_new_SignPost(common_SignPost_size,1).
Inserted SignPosts therefore have current common SignPost size rather than
previous default unity value.

*.  In GeometricalsGroup class, added colorfunc::Color
permanent_colorfunc_color,selected_colorfunc_color members along with get
methods.  Eventually want to be able to specify colors for Geometricals to
be created in the future.

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Mar 26 at
7:04 am on VISION laptop (pfiles3_26a.tgz).  UAV instantiation following
deletion in Baghdad demo is definitely flawed.  UAV picking in Bluegrass
demo possible but very difficult.

============================================================================
VISION code changes made early on Weds, Mar 25, 2009:

*.  Eliminated unimportant dependence of MyViewerEventHandler class upon
ndims and ModeController.  Commented out all of Boven's ancient help
functionality in MyViewerEventHandler.  

*.  Added MyViewerEventHandler::set_CustomManipulator_ptr().

*. Private ViewerManager::instantiate_MyViewerEventHandler() replaces
previous public version which takes arguments.  No longer need to call
prior version from many OSG main programs.  

============================================================================
VISION code changes made early on Tues, Mar 24:

*. geofunc::update_avg_LOS_tiles() takes in a set of tiles whose lower
left corner geocoordinates correspond to integer longitude,latitude
pairs.  Looping over each tile, this method reads in
number-of-views normalization and average LOS occlusion information
from input geotif files if they exist into twoDarrays
*nviews_ztwoDarray_ptr and *avgLOS_ptwoDarray_ptr.  It then updates
each pixel's value within these twoDarrays based upon corresponding
entries within *DTED_ptwoDarray_ptr.  The updated contents of
*nviews_ztwoDarray_ptr and *avgLOS_ptwoDarray_ptr are written back
to the geotif files for each tile.

*.  In OBSFRUSTUM::raytrace_occluded_ground_region(), set ray step size
d_length=ds/sqrt(1-sqr(e_hat.get(2))).  Also corrected ray's starting
position which yields noticeable improvement in raytracing results viewed
from aircraft's perspective.

*.  Perform sanity check on aircraft posn within
MODEL::compute_dynamic_OBSFRUSTUM() to make sure end of flightpath has not
bee reached.

*.  filefunc::files_in_subdir() takes in a subdirectory and returns an STL
vector containing the names of all files within that subdirectory.

*.  filefunc::purge_files_in_subdir() loops over all files within the input
subdirectory whose names have size greater than 1 with nontrivial and
non-matching prefixes and suffixes.  It deletes all such files from the
subdirectory.  This method should obviously be used with care!

============================================================================
VISION code changes made on Sat, Mar 21, 2009, Sun, Mar 22, 2009 & early,
Mon, Mar 23:

*.  Moved LODTREE & ROSS_TILE out of mains/OSG into mains/mapping.

*.  Generalized mapping/EOTIF2TDP to handle input height maps in addition
to color RGB imagery.

*.  OBSFRUSTUM::export_DTED_ptwoDarray_contents() generates an output
geotiff file containing the current frame's *DTED_ptwoDarray_ptr
contents.

*.  Added PointCloudsGroup::set_dependent_coloring_var(int var).

*.  In MODEL::compute_dynamic_OBSFRUSTUM(), automatically reset ColorMap to
display probabilities and force ColorGeodeVisitor to reload latest p
values.

*.  OBSFRUSTUM::import_DTED_ptwoDarray_contents() reads in a DTED LOS
geotif file corresponding to the current frame number.  After converting
the quantized 2-byte integers back to the continuous range [-1.0, +1.0], it
reinstantiates and fills member twoDarray *DTED_ptwoDarray_ptr with the
reconstructed probabilities.

*.  OBSFRUSTUM::estimate_z_ground() now takes bool compute_avg_flag input
param.  If true, it returns the average rather than median ground sample
value.

*.  face::get_polygon() returns a polygon formed from the face's vertex
positions.

*.  ISDS demos seem to work OK as of Sun, Mar 22 at 10:28 am on VISION
laptop (pfiles3_22d.tgz).  Code state seems OK after many hours of
unsuccessful experimentation with Ross' coloring scheme.  Not sure if
predator picking works in bluegrass demo.  And dynamic lat-long labels can
get too large in NYC demo.

*.  In MyNodeInfo class, renamed getOrCreateMyInfoForNode() to avoid
conflicting with Ross' getOrCreateInfoForNode() in his NodeInfo class.

*.  Following Ross' SetupGraphVisitor, we add
commonUpdate[Cull]Callback_refptr members and addUpdate[Cull]Callback()
methods to our ColorGeodeVisitor class.

*.  Separated out Ross' UpdateColormapCallback class from his Colormap class
into its own .cc and .h files.

*.  Copied some member functions form Ross' Colormap class into our
ColorMap class.

*.  Moved ColorGeodeVisitor class from osg/osg3D into osg/osgSceneGraph.

*.  Changed type of _setupVisitor2 member of MyDatabasePager class from
MyNodeVisitor to ColorGeodeVisitor.  

*.  Privatized AnimationController::time_to_display_new_frame().

*.  Eliminated calls to timefunc::initialize_timeofday_clock() in
SignPostsGroup::initialize_member_objects() and PickHandler constructor.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Mar 23 at 7 am
on VISION laptop (pfiles3_23c.tgz).  UAV instantiation following deletion
in Baghdad demo is definitely flawed.  UAV picking in Bluegrass demo
possible but very difficult.

============================================================================
VISION code changes made early on Fri, Mar 20:

*.  Updated .pro files in mains/bluegrass/AVS 

*.  Eliminated SKS database calls in VIEWCITIES and EARTH.

.......................................

*.  ISDS demos and standard pgms seem to work OK as of Fri, Mar 20 at 2:10 
pm on VISION laptop (pfiles3_20f.tgz).  Not sure if predator picking works
in bluegrass demo.   And dynamic lat-long labels were too large in one
running of NYC demo.

============================================================================
VISION code changes made early on Thurs, Mar 19:

*.  Added OBSFRUSTUM::get_DTED_ptwoDarray_ptr() method.

*.  Added ColorGeodeVisitor_ptr member to MODELSGROUP class along with set
method.

*. MODEL::compute_dynamic_OBSFRUSTUM() now returns OBSFRUSTUM's pointer
rather than boolean indicating success/failure.

*.  Raytracing for program LOS is starting to work!

============================================================================
VISION code changes made on Weds, Mar 18:

*. Created Qt subdirectory of mains/afghanistan.

*. Created new LOSServer class in Qt/web subdir.

============================================================================
VISION code changes made on Tues, Mar 17, 2009 & early Weds, Mar 18:

*.  Updated Makefile_w_sift and Makefile_sans_sift.

...................................

*.  Added retrieve_XYZs_inside_bbox application index in HiresDataVisitor
class.  Added bbox_ptr bounding_box member to HiresDataVisitor class along
with get method.

*.  Old ladarimage::initialize_image_parameters(
 twoDarray*& ztwoDarray_orig_ptr,twoDarray*& ptwoDarray_orig_ptr,
 double deltax,double deltay,double xlo=0,double ylo=0) calls new
ladarimage::initialize_image_parameters(
 twoDarray*& ztwoDarray_orig_ptr,
 double deltax,double deltay,double xlo=0,double ylo=0);

*.  Wrote xyzpfunc::fill_image_with_z_values() variant of
fill_image_with_z_and_p_values().

*.  retrieve_XYZs_inside_bbox application for HiresDataVisitor now tests
whether a geode's bounding sphere intercepts the class' specified bbox.  If
not, it doesn't waste time testing the geode's individual vertices to see
whether they lie inside the bbox.

*.  Created new mains/mapping subdir and copied several general utilities
for interconverting TDP, XYZP, DTED, GEOTIF, etc files.

============================================================================
VISION code changes made on Mon, Mar 16 and early Tues, Mar 17, 2009:

*.  Starting to find correct conversion between Noah Snavely's relative
camera parameters and global extrinsics needed to embed his reconstructed
Manhattan photos inside NYC ladar map.

*.  Program PHOTO_GEOREGISTER computes the global extrinsic parameters
needed to embed Noah Snavely's reconstructed photos within the NYC ladar
map.  It writes output package files containing the pinhole model
parameters needed to visualize the reconstructed photos as OBSFRUSTA.

============================================================================
VISION code changes made early on Sun, Mar 15:

*.  Program nyc/BUNDLER_CONVERT is a quick-and-dirty utility to parse and
transform Noah Snavely's BUNDLER program ascii output into an XYZP file.
We hardwire global scaling, translation and rotation information into this
program generated by program BUNDLER_GEOREGISTER which georegisters raw
bundler XYZ points.

*.  Program nyc/BUNDLER_GEOREGISTER reads in a set of features manually
selected from Noah Snavely's raw bundler XYZ output and a counterpart
feature set selected from our georegistered NYC ladar map.  This program
computes the absolute scale, translation and rotation needed to map the
former sparse point cloud onto the latter.

*.  In camera class, eliminated set_video_ptr() in favor of new
set_UV_corners() member function.

*.  In photograph constructor, we discovered to our horror that exif
metadata sometimes can report INCORRECT pixel dimensions for photographs.
So we now use OSG to determine the size of all input photos.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Mar 16 at 7:11
am on VISION laptop (pfiles3_16b.tgz)

============================================================================
VISION code changes made early on Sat, Mar 14:

*.  SignPostPickHandler::doubleclick() now allows for 2D as well as 3D
SignPost picking.

*.  Instantiate 2D imageplane SignPosts group and pick handler within main
program VIDEO.  Pass their pointers into SignPostsGroup via set methods.

*.  Can now pick 2D imageplane signposts within program VIDEO and have
their labels' contents sent as ActiveMQ message via Michael Yee's Process
Launcher program.

============================================================================
VISION code changes made early on Fri, Mar 13:

*.  ISDS demos and standard pgms seem to work OK as of Fri, Mar 13 at 6:15
am on VISION laptop (pfiles3_13a.tgz)

...................

*.  Added enumerated type AircraftModelType to MODELSGROUP along with set
method.

============================================================================
VISION code changes made early on Thurs, Mar 12:

*.  Added scale_factor argument to MODELSGROUP::add_flight_path_arrows().

============================================================================
VISION code changes made early on Weds, Mar 11:

*.  Earth::retrieve_borders_from_PostGIS_database() &
retrieve_cities_from_PostGIS_database() now take min/max long & lat
arguments.

*. Overloaded Earth::retrieve_borders_from_PostGIS_database() to allow
color info to be passed as input argument.

*.  Added country_name_color and city_color members to postgis_database
class along with set methods.

*.  mains/afghanistan/LOS now displays country borders and names.

*.  Country and city names are dynamically controlled by
Terrain_Manipulator's height above LatLongGrid.

...............

*.  Michael Yee's new ProcessLauncher code works with NYC demo.  Hard coded
URL in SignPostsGroup::issue_invocation_message().

...............

*.  Suppress dynamic grid labeling in program sift/PANCITIES.

============================================================================
VISION code changes made on Tues, Mar 10, 2009:

*.  Added drawable_group_refptr member to Grid class along with get method.

*.  Refactored Grid::initialize_member_objects() into two new drawing
member functions generate_drawable_geode() and fill_drawable_geode().

*.  Dynamic grids are starting to work in TESTCITIES!

*.  ISDS demos and extended pgms seem to work OK as of Tues, Mar 10 at 1:24
pm on VISION laptop (pfiles3_10i.tgz)

..................................

*.  Dynamic grids enabled by default in TESTCITIES, LOS and other mapping
programs.

============================================================================
VISION code changes made on Sun, Mar 8, 2009 & early Mon, Mar 9, 2009:

*.  In Pass class, added new dted PassType along with dt0, dt1 and dt2
InputFileTypes

*.  Added get_min[max]_z() member funcs to raster_parser class.

*.  Created new mains/afghanistan subdirectory.  

*. Program afghanistan/DTED2TDP takes in a level 0, 1 or 2 dted height map
and generates a corresponding point cloud in TDP output format.

*.  Flipped contents of large_hue_value_sans_white colormap and call it
reverse_large_hue_value_sans_white.txt Reds [purples] correspond to high
[low] end of reversed colormap scale.

*.  Added LatLongGrid_ptr member to Earth class.  Moved all dynamic
latlonggrid generation members and methods out of Earth class into
LatLongGrid class.

============================================================================
VISION code changes made on Fri, Mar 6 2009:

*.  Last overloaded version of PassesGroup::generate_new_pass() now takes
specified_ID as integer argument.  If this param >= 0, it is used to label
the PassInfo assigned to the new pass.

*.  EarthRegionsGroup::generate_empty_EarthRegion() generates an
EarthRegion which has no associated 3D or 2D input imagery data.  It also
forms a LatLongGrid based upon bbox coords passed as input package file
arguments.

*.  Program PLANNER no longer depends upon point cloud data input.  

============================================================================
VISION code changes made on Sunday, Mar 1 2009, Weds, Mar 4, 2009 & early
Thurs, Mar 5, 2009:

*. Display 3D point cloud in program mains/sift/PICKER.cc on a LatLongGrid.

*.  Added EarthRegionsGroup_ptr member to FeaturesGroup class along with
set method.

*.  Added display_geocoords_flag member to FeaturesGroup along with set
method.  If this flag==true, program PICKER displays features' long,lat
coords in its 2D video frame rather than their ranges & altitudes.

*.  Added prev_SignPost_framenumber member to SignPostsGroup class.

*.  In SignPostsGroup::project_SignPosts_into_video_plane(), turn off
temporal filtering for first few movie frames to avoid temporally polluting
position and velocities from movie's end with those at its beginning.

*.  In mathfunc::angle_and_axis_between_unitvectors(), we now test whether
cross product between two input u_hat and v_hat unitvectors vanishes.  If
so, they are colinear.  In this case, we arbitrarily return z_hat as the
rotation axis.  Should fix core dump problem in program RAYTRACE.

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Mar 5 at 7:24
am on VISION laptop (pfiles3_5c.tgz)

============================================================================
VISION code changes made on Weds, Feb 25, 2009:

*.  Added Predator_altitude member to MODELSGROUP along with set method.

*.  Fixed bug in RayTracer::get_curr_transmitter_posn().  Program RAYTRACE
now again shows green/red LOS between transmitter and receiver.

============================================================================
VISION code changes made on Mon, Feb 23, 2009:

*.  Updated README.Boston_ISAT_demo notes to include instructions for
moving laptop on/off private network and running flightpath_sender emulator
program.

============================================================================
VISION code changes made on Sunday, Feb 22, 2009 & early Mon, Feb 23, 2009:

*.  Eliminated FeaturesGroup::reset_colors() and
PointsGroup::reset_colors() in favor of GeometricalsGroup::reset_colors().

*.  Added Point::set_color() which calls set_crosshairs_color().

*.  PointFinder::find_smallest_relative_angle_world_point() is meant to be
called for point picking within photos shot by ground cameras.  It selects
candidate 3D points within a ladar cloud whose angles relative to input
ray_ehat are minimal.  This method subsequently sorts the 3D candidates
according to their ranges relative to input ray_basepoint weighted by their
angles wrt ray_ehat.  The candidate 3D point with the smallest weighted
range is returned within closest_worldspace_point.

*.  FeaturesGroup::backproject_2D_features_into_3D() first retrieves the
projection matrix corresponding to the current video frame number.  It then
backprojects every 2D feature which has been manually picked and finds a
corresponding 3D worldspace point in a ladar cloud.  A new, stationary 3D
feature within *FeaturesGroup_3D_ptr is instantiated.  The 3D feature is
subsequently reprojected back into the 2D UV image plane for all dynamic
video frames to guarantee a valid relationship between 3D and 2D feature
tiepoints.  Hopefully, the reprojected UV coordinates are close to the
initially selected UV coordinates for the 2D feature.  The 2D feature is
annotated with its 3D counterpart's range and altitude.

*.  mains/sift/PICKER pops open a 2D window in which a video can play and a
3D window in which a corresponding ladar point cloud is displayed.
User-selected features within the 2D window are backprojected into the
ladar point cloud.  3D feature tiepoint counterparts are blinked within the
ladar cloud and reprojected into all video frames.  3D range and altitude
information is displayed in the video window next to each 2D feature.

*.  Discovered hard and painful way that member var height_offset of
PassInfo was not previously initialized to zero.  We now do so within
PassInfo::initialize_member_objects().

*.  ISDS demos and standard pgms seem to work OK as of Mon, Feb 23 at 10:20
am on VISION laptop (pfiles_2_23c.tgz)

============================================================================
VISION code changes made on Fri, Feb 20, 2009:

*.  Added README.Boston_ISAT_demo to repository.

============================================================================
VISION code changes made on Sat, February 14, 2009, Sun, Feb 15, 2009, 
Mon, Feb 16, 2009 & early Tues, Feb 17:

*.  ISDS demos and standard pgms seem to work OK as of Sat, Feb 14 at 9:50
am on VISION laptop (pfiles_2_14a.tgz)

*.  Auxilliary method MODELSGROUP::recover_UTM_posn() takes in a vector of
strings which is assumed to contain longitude, latitude and altitude
coordinates.  It forms a geopoint and returns the Cartesian coordinates in
the EarthRegionsGroup specified UTM zone.

*.  movers_group::compute_passed_ground_targets() takes in some current UAV
position along with an original UAV flight path stored within the mover for
UAV labeled by input UAV_ID within *UAV_movers_group_ptr.  It first finds
point along the original flight path polyline lying closest to the current
UAV's position and computes a fractional UAV polyline distance.  This
method subsequently loops over all ROI vertex locations along the original
flight path and computes their fractional polyline distances.  We assume
that any ROI whose fractional distance is less than the current UAV's has
previously been overflown.  The IDs for such ROIs are added to the
encountered_ROI_IDs STL vector member.

*. photogroup::set_photo_order() reads in a file which is assumed to
contain integer pairs of photo order vs photo ID.  It fills STL vector
member photo_order with this information.  We wrote this little utility to
avoid having to import and process expensive SIFT feature information in
program LADARPAN.

*.  Added STL vector member graphical_counter_ptrs_vector member to
Graphicals group to hold Graphical pointers as a function of counter index
(as opposed to Graphical ID which is stored within member
*graphical_ID_ptrs_map_ptr.)  GraphicalsGroup::get_Graphical_ptr(int n)
const now simply returns graphical_counter_ptrs_vector[n] which is much
faster than iterating through *graphical_ID_ptrs_map_ptr.

*.  Added frustum_sidelength & movie_downrange_distance members to
photograph class along with set/get methods.

*.  Added virtual_horiz_FOV membr to PassesGroup along with get method.
Pass this variable argument into PANCITIES.

*. Wrote OBSFRUSTUM::compute_movie_downrange_distance(double
pyramid_sidelength) counterpart to
OBSFRUSTUM::compute_pyramid_sidelength().

*.  Eliminated
OBSFRUSTUM:initialize_frustum_with_movie(movie_downrange_distance) in favor
of
initialize_frustum_with_movie(frustum_sidelength,movie_downrange_distance).

*.  ISDS demos and standard pgms seem to work OK as of Mon, Feb 16 at 11:55
am on VISION laptop (pfiles_2_16f.tgz).

*.  PointsGroup now inherits from GeometricalsGroup rather than from
GraphicalsGroup.

*.  Added MoviesGroup_ptr, PointFinder_ptr & FeaturesGroup_3D_ptr members
to FeaturesGroup class.  Eliminated unused tty_devname member from
FeaturesGroup.

*.  Globally renamed feature_ptr as Feature_ptr in FeaturesGroup and
FeaturePickHandler classes.  Renamed generate_new_feature() as
generate_new_Feature().  Deleted ancient
FeaturesGroup::display_XY_samples().  Rewrote generate_new_Feature() and
wrote private initialize_new_Feature() method to match all other
GraphicalsGroups'.  Eliminated odd get_or_create_feature_geode() method.

*.  GraphicalPickHandler::instantiate_Graphical() no longer calls
GraphicalsGroup::initialize_Graphical() but rather
Graphical_ptr->set_UVW_coords().

*.  SignPost picking on blue marble no longer works.  Not sure when it last
worked OK...

*.  Moved optimizer::rescale_focal_lengths() into photogroup class.

*.  Cleaned up RectanglesGroup::generate_new_Rectangle() and added private
initialize_new_Rectangle() method.

*.  ISDS demos and standard pgms seem to work OK as of Tues, Feb 17 at 8:20
 on VISION laptop (pfiles_2_17a.tgz).

============================================================================
VISION code changes made on Friday, February 13, 2009:

*. In EarthRegionsGroup::generate_PointCloud_EarthRegion(), we now search
for longitude/latitude bounding box passed as input pass parameters.  If no
such bbox is specified, use ladar point cloud's bounding box to establish
LatLongGrid extents.

*.  No longer recompute UTM or latlong coords within geopoint << method.

*.  Geopoint UTM zone number specification currently messsed up.

============================================================================
VISION code changes made on Thurs, Feb 12 in early morning:

*.  Baghdad demo within SVN version 1716, 1717 & 1718 works OK.
Baghdad demo within SVN version 1719 fails.

*.  Code tree compiles OK on VISION as of Feb 12 at 6:45 am
(pfiles2_12a.tgz).

*.  Discovered to our horror that OSGREGIONS_DIR was not cleaned out when
we chant make bigclean or fusionclean.  This was the reason why
GeometricalsGroup caused yesterday's Baghdad demo failure.  After fixing
this bag bug in our Makefile, everything seems to work OK again.

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Feb 12 at 9
am on VISION laptop (pfiles_2_12c.tgz

============================================================================
VISION code changes made on Tues, Feb 10:

*.  Graphical::get_size() and get_scale() are now const methods.

*.  Geometrical::copy_size() transfers scale, size and text size parameters
from *input_Geometrical_ptr to *this.

============================================================================
VISION code changes made on Saturday, February 7, 2009, Sun, Feb 8, 2009
& early Mon, Feb 9, 2009:

*.  optimizer::group_bundle_adjust_for_rotating_camera() allows all parameters
for photos labeled by indices 0 through input curr_n_photos to vary.

*.  Empirically determined z_camera = 5 meters rather than 2.6 meters for
Jan 6 2009, Lobby7 video sequence.  

*.  Added FOV_u and FOV_v members to camera class.
camera::compute_fields_of_view() calculates the horizontal and vertical
fields-of-view using the focal length and camera center parameters.

*.  Added min{max}_U{V} members to photograph class along with get
methods.  Set these params within photograph::compute_UV_bounds().

*. photograph::set_image_dimensions() temporarily instantiates an OSG image
object in order to extract the current photograph's horizontal and vertical
pixel dimensions.  Use this method only when photograph dimensions cannot
be extracted from exif metadata.

*.  optimizer::rescale_focal_lengths() multiplies the focal parameters for all
calibrated photos' within *photogroup_ptr by the input scale_factor.  It
then computes rough compensating relative rotations between each photo pair
which keep tiepoint pairs aligned.  Finally, this method performs bundle
adjustment on both the focal parameters and relative rotations to find a
reasonable set which maintains a rescaled panorama's internal alignment.

*.  optimizer::compute_world_and_imagespace_feature_rays() converts the
feature world-space coordinates in member STL vector XYZ_manual into
world-space rays relative to the panorama camera's position.  It also
computes corresponding average rays in imagespace coordinates for each
feature.  The results are stored in member STL vectors worldspace_ray and
imagespace_ray.

*.  optimizer::compute_scalefactor_between_world_and_imagespace_rays()
calculates (n_features choose 2) angles between pairs of worldspace rays
and their imagespace ray counterparts.  This method subsequently reports
the mean and standard deviation of the ratios of worldspace ray pair angles
to corresponding imagespace ray pair angles.
 
*.  optimizer::globally_rotate_imagespace_rays_onto_world_rays()
calculates the best-fit rotation R_global which maps the bundle of rays
within member STL vector imagespace_ray onto their counterparts in STL
vector worldspace_ray.  Once a panorama has been properly rescaled, the
global rotation subsequently aligns it with a 3D point cloud.  This method
applies R_global to each camera for each photo within *photogroup_ptr.

*.  Program LADARPAN reads in package files for a group of panoramic photo
stills which have previously been mosaiced via main program PANORAMA.  It
also reads in SIFT feature tiepoints generated by program TIEPOINTS as well
as manually established tiepoints selected between a ladar point cloud and
some small number of photo stills.  LADARPAN can compute a constant angular
scale factor by which the constellation of manually extracted image space
feature rays needs to be multiplied by in order to match the angular extent
spanned by the corresponding world space rays derived from the ladar point
cloud.  A new set of package files can be written out to disk for
subsequent processing.  LADARPAN also computes the global rotation which
maps the rescaled image space ray constellation onto the ladar rays in
absolute world space coordinates.  After an improved second set of rotated
and rescaled package files are written to disk, they can be directly
imported into programs VIDPANMATCH and PANCITIES in order to align the
panorama with the ladar point cloud.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Feb 9 at 10 am
on VISION laptop (pfiles_2_9a.tgz)

============================================================================
VISION code changes made early on Fri, Feb 6, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Fri, Feb 6 at 8:45
am on VISION laptop (pfiles_2_6b.tgz)

============================================================================
VISION code changes made on Thurs, Feb 5, 2009:

*.  Upgraded CLAPACK to version 3.1.1.1 on VISION, touchy2 and touchy3.
Eliminated -lF77 and -lI77 in favor of -lf2c in Makefile_w_sift.

============================================================================
VISION code changes made on Weds, February 4, 2009:

*.  Eliminated virtual method PolyLine::set_local_colors().

*.  Restored "dumb" lines in Movie::get_camera_ptr() previously removed on
2/2/09 s.t. ESB car video example works!

*.  ISDS demos and standard pgms seem to work OK as of Weds, Feb 4 at 4:30 
pm on VISION laptop (pfiles_2_4f.tgz).

============================================================================
VISION code changes made on Mon, February 2, 2009, Tues, February 3, 2009 &
Weds, February 4, 2009:

*.  In Movie::get_camera_ptr(), eliminated dumb lines in favor of single
efficient call.

*.  Added Makefile_w_sift and Makefile_sans_sift to repository.

*.  MODELSGROUP::recolor_UAV_track() assigns the flight path's RGB color to
input track *UAV_track_ptr.

*.  Added vector<osg::Vec4> segment_colors member to track class along with
push_back and get methods.

*.  Added fade_UAV_track_color_flag bool member to MODELSGROUP along with
set method.

*.  No longer hardwire Path_PolyLinesGroup width in
MODELSGROUP::initialize_Path_PolyLinesGroup().  Instead, explicitly set
this param in QTCITIES.

*.  PolyLine::compute_color_fading() loops over all PolyLine vertices within
*this.  At each point, it multiplies the value V for the track's HSV triple
by a piecewise-linear decreasing function of cumulative polyline length.
We wrote this specialized method in Feb 2009 in order to fade down dynamic
UAV tracks computed by Luca Bertucelli's Consensus Based Bundle Algorithm
which are more trustworthy near the track's beginning than at its end.

*.  Bluegrass demo speed coloring of truth tracks is messed up!

============================================================================
VISION code changes made on Sat, January 31, Sun, February 1, 2009 & early
Mon, Feb 2, 2009:

*.  photogroup::export_photo_parameters() now writes camera positions to
output packages files.

*.  Added Movie::set_camera_ptr(camera* c_ptr).

*.  Eliminated
OBSFRUSTAGROUP::generate_still_imagery_frusta_from_camera_params() in favor
of generate_still_imagery_frusta_for_photogroup().  

*.  Moved GraphicalsGroup_name="GraphicalsGroup" out of
GraphicalsGroup::generate_new_OSGsubPAT() into
GraphicalsGroup::initialize_member_objects().

*.  Remembered hard and painful way that initially_mask_all_frusta_flag
must equal FALSE in program PANCITIES!

*.  Added photogroup::get_camera_ptr(int p).

*.  photogroup::export_photo_parameters() now calls
photograph::export_camera_parameters().

*.  In photogroup class, eliminated all specialized set/get methods for
individual camera params.  (e.g. set_fu() and get_fu()).  In optimizer and
optimizer_funcs, now access camera params through
get_photograph_ptr(n)->get_camera_ptr().

*.  camera::compute_az_el_roll_from_Rcamera() sets camera member vars
rel_az, rel_el, rel_roll based upon *R_camera_ptr decomposition.
camera::set_rel_az[el]{roll}() now also updates *R_camera_ptr member.

*.  Eliminated unused vector<threevector> n_hats from optimizer class.

*.  Generalized optimizer class and optimizer_funcs namespace to handle
n_photos*4+3 trans parameters.

*.  Recall that first photo's ID does not necessarily equal 0.  So
photogroup::get_first_photo_ID() searches for and returns the smallest,
nonnegative ID which corresponds to a photo in *this.

*.  In Messenger::sendTextMessage(), perform explicit check for
msg_ptr==NULL.  If so, print error message and return.

*.  ISDS demos and extended pgms seem to work OK as of Mon, Feb 2 at 8:20
am on VISION laptop (pfiles_2_2c.tgz).

============================================================================
VISION code changes made on Fri, January 30, 2009:

*.  ISDS demos and standard pgms seem to work OK as of Fri, Jan 30 at 3:30
pm on VISION laptop (pfiles_1_30d.tgz).  Parsing of TDP files on VISION now
works!

============================================================================
VISION code changes made early on Friday, January 30, 2009:

*. Generalized FeaturesGroup::write_feature_html_file() so that it no
longer assumes that single pass has ID number 0.  Also write photograph and
more general pass features to html files with different names.

============================================================================
VISION code changes made on Weds, Jan 28 & early, Thurs, Jan 29:

*.  rotation::rotation_between_rays() implements the ray approach described
in section 8 of "Minimal solutions for panoramic stitching" by Brown,
Hartley and Nister to estimate the relative rotation between two sets of
corresponding ray bundles.

*.  OBSFRUSTAGROUP::generate_still_imagery_frusta_from_camera_params()
loops over all video passes and extracts their intrinsic camera calibration
parameters as well as their az, el and roll rotation parameters.  It
instantiates an OBSFRUSTUM for each image for which such camera calibration
information is specified at the command line.  This method returns the
number of such OBSFRUSTA which are reconstucted.

*.  Removed apparently unused references to virtual_camera OBSFRUSTA from
OBSFRUSTAGROUP::update_display().

*.  Reworked 3 versions of FeaturesGroup::write_feature_html_file().

*.  FeaturesGroup::generate_features_map_for_photos() reads in 2D feature
coordinates for all photos contained inside input *photogroup_ptr.  It
parses this information into input FEATURES_MAP features_map for subsequent
processing.

*.  High-level FeaturesGroup::read_in_photo_features() reads in feature
files for input photos within *photogroup_ptr.  It then fills a features
map with pass number, U, V as a function of feature ID.  Feature coordinate
measurements are accumulated inside *this.  Rows correspond to distinct
feature IDs, while columns correspond to individual passes.

*.  FeaturesGroup::convert_2D_coords_to_3D_rays() takes in *photogroup_ptr
which is assumed to contain calibrated cameras for each of its photo
members.  For each photograph, this method loops over the 2D feature
coordinates within *this and calculates corresponding 3D ray directions.

*.  ISDS demos and standard pgms seem to work OK as of Thurs, Jan 29 at 11
am on VISION laptop (pfiles_1_29g.tgz).  But parsing of TDP files on VISION
currently fails!

============================================================================
VISION code changes made early on Weds, Jan 28:

*.  ISDS demos and standard pgms seem to work OK as of Weds, Jan 28 at 8 am
on VISION laptop (pfiles_1_28a.tgz).  But parsing of TDP files on VISION
currently fails!

============================================================================
VISION code changes made on Sat, Jan 24 2009 & Sun, Jan 25, 2009:

*.  Added continuously_update_UAV_paths_flag bool member PassesGroup along
with get method.

*.  Added explicit UAV_movers_group_ptr->get_n_UAVs()==0 check within
movers_group::check_for_UAV_ground_target_encounters().

*.  ISDS demos and standard pgms seem to work OK as of Sat, Jan 24 at 4:23
pm on VISION laptop (pfiles_1_24e.tgz).  But parsing of TDP files on VISION
currently fails!

*.  Split off Messenger::generate_TextMessage() from sendTextMessage().

*.  GraphicalsGroup::retrieve_messages() loops over all Messengers and
extracts their messages into the GraphicalsGroup's message_queue.  Private
method GraphicalsGroup::retrieve_messages(int i) performs this operation
for the ith Messenger.

*.  In movers_group::issue_add_track_message(), pad key index n with
leading zeros so that ActiveMQ's alphabetical ordering of its messages
coincides with numerical ordering of track waypoints.

============================================================================
VISION code changes made on Weds, Jan 21 and Thurs, Jan 22:

*.  Inlined stringfunc::first_substring_location().

*.  Bluegrass demo seems to work OK as of Thurs, Jan 22 at 6:05 am
(pfiles_1_22a.tgz).

*.  Overloaded version of BluegrassClient::retrieve_mover_tracks() was
generalized in Jan 2009 to allow for Bluegrass truth tracks to be
superposed on Baghdad for UAV path planning with dynamic ground movers.  It
takes in old and new origin offsets (corresponding to Lubbock and Baghdad)
as well as a scale factor by which mover positions are stretched relative
to the new origin.

*.  Starting to work with Bluegrass truth movers inside QTCITIES run as
Baghdad program.

============================================================================
VISION code changes made on Weds, Jan 14, Thurs, Jan 15, Fri, Jan 16, Sat,
Jan 17, Sun, Jan 18, & Mon, Jan 19:

*.  Added bool member mask_nonselected_OSGsubPATs_flag to
OBSFRUSTUMPickHandler class with default true value and set method.  Set to
false in 3DVIDEO in order to simultaneously display static panorama and
dynamic video OBSFRUSTA following picking.

*.  mains/sift/3DVIDEO can now play a dynamic Quicktime movie whose
OBSFRUSTUM moves wrt static panoramic background.

*.  sift_detector::maximal_number_forward_feature_matches() takes in index
i labeling some dynamic video frame and indices jstart & jstop labeling
static panoramic photos.  This method counts numbers of forward feature
matches between the former with each of the photos in the specified
interval.  It returns a pair of integers where the first contains the
maximal number of feature matches and the second contains the corresponding
panoramic photo index.

*.  sift_detector::identify_candidate_feature_ray_matches() takes in
integer i labeling a dynamic video frame whose features are to be matched
onto the subset of panoramic stills whose indices are contained within
input STL vector overlapping_image_indices.  This method forms an STL map
of the video frame's features.  It then loops over each panoramic still and
erases from the STL map those features which it matches.  The feature
tiepoints are returned within member STL vector candidate_tiepoint_pairs.

*.  sift_detector::ray_feature_homography() reconstructs the 3x3
homogeneous matrix H which maps 3D panoramic rays to 2D (U,V) features.
This method returns the number of 3D-2D tiepoint pairs.

*.  Privatized sift_detector::bin_features_into_quadrants() and eliminated
irrelevant input image index argument.

*.  Added Tensor::get_e_ptr() in order to avoid having to copy 128-dim sift
vectors within ann_analyzer::find_nearest_neighbor().

*.  Streamlined ann_analyzer::match_feature_descriptor() so that it runs as
fast as possible.

*. We empirically observed that m_nFrames for the Jan 2009 Lobby 7
Quicktime movie was 100 times too large.  So we wrote a hack member
function FFMPEGVideo::recompute_nframes() which tries to compute a
denominator factor by which the naive m_nFrames should be divided in order
to yield a genuine number of frames within movies parsed by FFMPEG.

*.  VIDPANMATCH is starting to yield decent results for Jan 2009 Lobby7
example.  Processed all 1600 video frames at approximately 11 secs/frame.

*.  In sift_detector::extract_features(), we discovered the hard and
painful way that SiftGPU sometimes returns garbage within the
128-dimensional feature descriptor vectors.  So we now explicitly check
whether any D-vector component == NAN.  If so, we jettison the entire
feature!

*.  Added string members package_subdir and package_filename_prefix to
OBSFRUSTAGROUP class along with set methods.  Use these members to pass
package info into OBSFRUSTAGROUP::reset_OBSFRUSTUM_from_package_file()
which is called by OBSFRUSTAGROUP::update_display().

*.  texture_rectangle::convert_color_image_to_greyscale() loops over all
pixels within the current texture rectangle.  For each pixel, this
method first computes the h,s,v color coordinates corresponding to
the pixel's RGB coordinates.  It then resets the pixel's color to
just the greyscale value corresponding to v.  We wrote this method
in Jan 2009 in order to transform colored 3D panoramic mosaics into
black-and-white backdrops for dynamic, colored 3D videos.

*.  Added package_subdir and package_filename_prefix members to PassInfo
along with set/get methods.  Made necessary modifications to PassesGroup in
order to read in these parameters into 3DVIDEO.

*.  ViewerManager::rescale_viewer_FOV() multiples OSG Producer's default
horizontal and vertical fields-of-view by the input angular scale factor.

*.  In sift_detector::identify_candidate_feature_matches(), we now try to
avoid RANSAC from entering effective infinite loop.  If a candidate
homography has not been found after 10*max_n_good_iters, then reduce
bbox_area by factor of 2 and try again.

*.  Call sift_detector::export_feature_tracks(i) iteratively from
identify_candidate_feature_matches() rather than all at end of TIEPOINTS.
All results are then not lost when TIEPOINTS is terminated before
completion.

*.  We learned the painful and hard way on Jan 19 that we should be sure to
save all photos' reconstructed 3D parameters in program PANORAMA *before*
attempting to instantiate OBSFRUSTA!

*.  ISDS demos and standard pgms seem to work OK as of Mon, Jan 19 at 9 pm
on VISION laptop (pfiles_1_19f.tgz).  But parsing of TDP files on VISION
currently fails!

============================================================================
VISION code changes made on Mon, Jan 12, Tues, Jan 13 and early Weds, Jan 14:

*.  OBSFRUSTUM::build_current_frustum() takes in the current positions of a
square viewing pyramid's apex and base vertices.  (The viewing pyramid must
be a simple square pyramid and not some more complicated form when it
partially intersects a ground Z-plane.)  This method builds the current
*ViewingPyramidAboveZplane_ptr and optionally ViewingPyramid_ptr.

*. mains/sift/3DVIDEO is a testing grounds for playing an OBSFRUSTUM movie
against a static 3D panorama mosaic.

*.  pyramid::lies_above_Zplane_check() loops over all pyramid vertices.  If
any one has a z component that lies below the input z argument, this
boolean method returns false.  Otherwise, it returns true.
OBSFRUSTUM::compute_viewing_pyramid_above_Zplane() calls this method and
sets *viewing_pyramid_above_Zplane_ptr = *viewing_pyramid if it returns
true.

*.  In pyramid::docopy(), now check whether p.base_ptr [p.zplane_face_ptr]
== NULL before attempting to copy *p.base_ptr [*p.zplane_face_ptr] onto
this->base_ptr[zplane_face_ptr].

*.  OBSFRUSTAGROUP::reset_OBSFRUSTUM_from_package_file() searches for a
package whose filename corresponds to the input OBSFRUSTUM's movie.  If a
package file is found, this method extracts its 3x4 projection matrix P.  P
is subsequently used to build the current frustum.

*.  In OBSFRUSTUM::absolute_position(), added
viewing_pyramid_above_zplane_ptr->absolute_position(absolute_posn) which is
analog to viewing_pyramid_ptr->absolute_position(absolute_posn) that
previously existed.  Also added absolute_posn lines for ViewingPyramid_ptr
& ViewingPyramidAboveZplane_ptr.  Have not yet made similar changes within
OBSFRUSTUM::absolute_position_and_orientation().

*.  Renamed OBSFRUSTAGROUP::generate_still_imagery_frusta() as
generate_still_imagery_frusta_from_projection_matrices().

*.  ISDS demos and extended pgms seem to work OK as of Weds, Jan 14 at 8:40 am
on VISION laptop (pfiles1_14b.tgz).

============================================================================
VISION code changes made on Fri, Jan 9, Sun, Jan 11 and early Mon, Jan 12:

*.  Split off sift_detector::extract_features(photograph*) from
sift_detector::extract_features().

*.  sift_detector::count_candidate_forward_feature_matches() loops over
sets of image features labeled by input indices istart through istop.  For
each image i within this interval, this method performs forward ANN
matching with image number labeled by final index n_images-1.  It returns
the image index for which the number of candidate forward feature matches
is maximal.

We wrote this utility method in order to determine which panoramic
component image has the greatest overlap with an input video frame (which
is assumed to be the final member of a photogroup.)

*.  sift_detector::destroy_allocated_features_for_specified_image() loops
over all feature pairs for image i.  It destroys both the first *F_ptr and
second *D_ptr components of each feature.  We need to call this method
whenever we're done processing the features for an image prior to starting
another one in order to avoid running out of memory!

*.  Moved OSG image manipulation lines of code out of sift_detector class
into photograph::read_image_from_file() and
photograph::rescale_image_size().  Eliminated horiz[vert]_scale_factor and
image_width[height] STL vector members from sift_detector class.

*. Added  osg::ref_ptr<osg::Image> image_refptr member to photograph class
along with get_photograph_ptr() method.

============================================================================
VISION code changes made on Mon, Jan 5, Thurs, Jan 8 & early Fri, Jan 9:

*.  sift_detector::rename_feature_IDs() now propagates valid 3D
backprojected ray information among different images.

*.  homography::project_ray_to_image_plane() takes in 3D direction vector
r_hat and multiplies it by *H_ptr.  This method returns the U & V
coordinates corresponding to r_hat.  We wrote this method in Jan 2009 for
video frame - panorama still matching purposes.

*.  Eliminated redundant camera::set_P() in favor of
camera::set_projection_matrix().  Also eliminated unnecessary
camera::fill_projection_matrix_entries(genmatrix& Q) which can be performed
instead with simple matrix equality operation.

*.  In program NEW_FOV, eliminated unnecessary OBSFRUSTA_PTRS vector in
favor of OBSFRUSTAGROUP.  Also cleaned up OBSFRUSTA construction in
NEW_FOV.

*.  In PassInfo::allocate_member_objects(), no longer automatically
allocate P_ptr.  Instead, generate genmatrix *P_ptr in PassInfo::docopy()
and set_projection_matrix().  Test for NULL genmatrix pointer values in
PassInfo::docopy().

*.  Boolean member function OBSFRUSTAGROUP::extract_still_imagery_info()
now returns false if input videopass has a NULL 3x4 projection
matrix pointer.

*.  For the static panorama/dynamic video project, we want to force the
selected OBSFRUSTUM to correspond to the video so that it can be faded
up/down wrt the background panorama.  Pressing 'g' within
OBSFRUSTAKeyHandler now implements this selection.

*.  sift_detector::compute_projection_matrix() reconstructs the 3x3
homogeneous matrix H which maps 3D panoramic rays to 2D (U,V) features in
photograph i.  Assuming that the camera lies at (0,0,0), this method
returns 3x4 projection matrix P = [H | 0].

*.  3D matching of video images to background panoramas is starting to work!

*.  ISDS demos and standard pgms seem to work OK as of Fri, Jan 9 at 6:15
am on VISION laptop (pfiles_1_9a.tgz).  But parsing of TDP files on VISION
currently fails!

*. Boolean photograph::parse_Exif_metadata() returns false if no exif
metadata is extracted from the current photograph.

============================================================================
VISION code changes made on Fri, Dec 12, Sat Dec 13, Sun, Dec 14, Sat Jan
3, Sun, Jan 4 & early Mon, Jan 5:

*. Streamlined processing for TIEPOINTS & PANORAMA programs.

*.  Created new osgRegions subdir with RegionPolyLine,
RegionPolyLinesGroup, RegionPolyLineKeyHandler and
RegionPolyLinePickHandler variants of PolyLine classes.

*.  Moved recolor_encountered_ROI_PolyLines() out of PolyLinesGroup class
into RegionPolyLinesGroup.

*.  In QTCITIES, ROIPolyLinesGroup and KOZPolyLinesGroup are now instances
of RegionPolyLinesGroup.

*.  Added process_pick_flag to RegionPolyLinePickHandler class along with
set method.  Do not process any pick operations if this flag==false.
Deconflicts picking of ROIs and KOZs.

*.  Added ROILinePickHandler_ptr and KOZLinePickHandler_ptr members along
with set methods to OSGButtonServer class.

*. Added movers_group::get_MoverType_string(mover* mover_ptr) which
converts MoverType into a standardized output string for ActiveMQ messages.

*.  In movers_group::generate_new_ROI() and generate_new_KOZ(), we now call
spatially_fixed_tracks_group_ptr->generate_new_track() with NO input ID
value.  ROIs and KOZs should now always receive unique, non-clashing IDs.

*.  Added STL bounding_box vector member bbox to track class.

*.  Compute KOZ bbox in RegionPolyLinePickHandler::doubleclick() if
RegionPolyLinesGroup_ptr->get_KOZ_PolyLinesGroup_flag().

*.  KOZ input and messaging appears to be working OK for program QTCITIES
as of Mon, Dec 15.  We have not had time to completely test all of our
programs to make sure that everything is working OK after making several
structural changes over the weekend prior to leaving for India.  We'll need
to perform a careful check of all our programs once we return from India.

*.  In texture_rectangle::write_curr_frame(), make sure height and width
for exported frame do not exceed those for input image.

*.  Fixed photograph filename output ordering in
photogroup::export_photo_parameters().

*.  Set zoomin_prohibited_flag to false for TerrainManipulator in main
programs china/NEW_FOV and sift/PANORAMA so that we can take closer look at
3D panoramas.

*.  Added retrieve_XYZs as new Application Type in HiresDataVisitor class.

*.  Cleaned up write_single_xyz_point() and write_single_xyzp_point()
methods in xyzpfuncs namespace.

*.  In PointCloud::build_datagraph_tree(), we now explicitly check whether
input argument colors_ptr==NULL before attempting to compute its size to
avoid segmentation faults.

*.  In RegionPolyLinePickHandler::doubleclick(), added explicit check on
n_RegionPolyLines==0 and KOZ_mover_ptr==NULL to avoid seg faults when
running QTCITIES for Bluegrass demo.

*.  ISDS demos and standard pgms seem to work OK as of Sun, Jan 4, 2009 at
11:22 am on VISION laptop (pfiles_1_4e.tgz).  But parsing of TDP files on
VISION currently fails!

*.  Previously hardwired tiepoint identification parameters are now set
within TIEPOINTS program.

*.  In photogroup class, changed PHOTO_MAP from map<int,photograph> to
map<int,photograph*>

*.  photograph objects are now automatically constructed with dynamically
allocated camera objects.

*.  photogroup::read_photographs() takes in a PassesGroup as its argument
and extracts out the names for all input photos.  It dynamically generates
photograph objects for each photo filename and adds them to the photogroup.
This method also parses internal and external camera parameters passed as
arguments in package files.  It initializes each photo's camera with these
input parameters.

*.  Added bool calibration_flag member to camera class along with set & get
methods.

*. In Terrain_Manipulator translate() & rotate() member functions, relax
constraints when rotate_about_current_eyepoint_flag==true in order to allow
for detailed viewing of 3D mosaics of 2D photos.  Restrict these
manipulator motions only if zoomin_prohibited_flag==true (recall
zoomin_prohibited_flag is set to false in programs PANORAMA and NEW_FOV):

*.  Starting to compute backprojected 3D rays for 2D features in photos
whose cameras are calibrated.

*.  In sift_detector::extract_features(), explicitly check if current (U,V)
coordinates already exist within some previous extracted feature.  If so,
skip processing current feature.

*.  Baghdad demo program crashes if a flight path is cleared while the
corresponding UAV is selected!

*.  ISDS demos and standard pgms seem to work OK as of Mon, Jan 5 at 10 am
on VISION laptop (pfiles_1_5d.tgz).  But parsing of TDP files on VISION
currently fails!

============================================================================
VISION code changes made on Sun, Dec 7, Weds, Dec 10, Thurs, Dec 11 & Fri,
Dec 12:

*.  Added changes_vision.txt to repository.

*.  Fixed n_columns counting in FeaturesGroup::write_feature_html_file()

*.  Moved bundle adjustment loop out of PANORAMA into
bundle_adjust_for_rotating_camera() &
iterative_bundle_adjust_for_rotating_camera() members of optimzer class.

*.  Eliminated get_relative_az(), get_fu(), etc methods from optimizer.
Added get_photogroup_ptr() to optimizer.  Renamed photogroup::get_rel_az()
as get_relative_az().

*.  optimizer::estimate_relative_rotation() implements the ray approach
described in section 8 of "Minimal solutions for panoramic stitching" by
Brown, Hartley and Nister for determining the relative rotation between
photos labeled by input ordering indices p and q.  On 12/10/08, we followed
Noah Snavely's suggestion to use this approach which does not depend upon
potentially noisy homography matrices.

*.  Perform mini-bundle adjustment between photos p and q in order to
derive refined (and much more accurate) estimates for relative angles
between these two photos.  

*.  In PANORAMA, we now reorient the entire 3D mosaic so that it's oriented
along the positive X axis and is relatively level to the Z-plane.

*. TIEPOINTS & PANORAMA now appear to be returning reasonable results for 4
different sets of mosaics.

*.  ISDS demos and standard pgms seem to work OK as of Fri, Dec 12 at 3:12
pm on VISION laptop (pfiles12_12g.tgz). 

============================================================================
VISION code changes made on Fri, Dec 5 & Sun, Dec 7:

*.  Generalized geometry/bounding_box.cc class from 2 to 3 dims.

*.  Added KOZLinesGroup_ptr member to EarthRegion and OSGButtonServer
classes.

*.  Defined KOZ as new enumerated mover type in mover class.

*.  Added KOZ analogs of ROI members and methods to movers_group class.

*.  Renamed imagefunc::crop_jpegimage() as crop_image().

*.  imagefunc::recolor_image() utilizes ImageMagick's recolor matrix in
order to alter the relative RGB values within an input image.  Every RGB
value is multipled by 3x3 genmatrix *RGB_transform_ptr before the output
file is rewritten on top of the input file.  We wrote this method in Dec
2008 in order to increase red and decrease blue content in OSG screen
captures.  Empirically we found that RGB_transform = diag (1.25 , 1 , 0.85)
appears to yield reasonable coloring results.

============================================================================
VISION code changes made on Weds pm, Dec 3, Thurs, Dec 4 & Fri, Dec 5:

*.  Eliminated hardcoding of u0=0.66 and v0=0.5 within
optimizer_func::set_camera_params().

*.  homography::parse_homography_inputs() now returns false if there are
insufficient tiepoint pair inputs to actually compute a homography.

*.  Changed from cho to postgres user in most GIS package files on VISION.
Database access on VISION now seems to work OK.

*.  ISDS demos and standard pgms seem to work OK as of Fri, Dec 5 at 3 pm
on VISION laptop (pfiles12_5b.tgz).  All programs including those needing
databases have been tested.

============================================================================
VISION code changes made on Weds, Dec 3:

*.  Eliminated STL vector camera_params member from optimizer class.

*.  optimizer::estimate_internal_and_relative_rotation_params() works with
previously computed values for camera internal and external parameters if
they exist.  If input parameter curr_n_photos > 2, this method searches for
the previously composited photograph which has the greatest number of
feature overlaps with the curr_n_photo'th photograph.  It then computes the
homography relating these two latter photos.  After decomposing the
homography into its rotational part, this method assigns relative az, el
and roll values to the curr_n_photo'th photo.

*.  Program PANORAMA now sequentially form 2, 3, 4, ... , n_photo mosaics.
Hold fitted camera parameters for previous n-1 photos fixed when
iteratively solving for internal and external parameters for nth photo.
After this loop is completed, perform one final bundle adjustment where all
parameters for all cameras are allowed to vary.

============================================================================
VISION code changes made on Tues, Nov 25 and Sun, Nov 30, Mon Dec 1 and
Tues, Dec 2:

*.  Started to implement symmetric homography score function from automatic
panorama paper by Lowe and Brown.

*.  mathfunc::moment_of_inertia_bbox_area() takes in a set of twovectors R
along with their origin and axes' direction vectors Imin_hat and Imax_hat.
It loops over each twovector and computes its coordinates along the two
axes.  The bounding box enclosing all the input twovectors which is aligned
with the axes is found, and its area is returned by this method.

*.  Created new video/photogroup classes.  Eliminated STL vector of
photographs in main PANORAMA program in favor of new photogroup object.

*.  Added rel_az, rel_el & rel_roll members to camera class along with
set/get methods.

============================================================================
VISION code changes made on Fri, Nov 21, Sat, Nov 22, Sun, Nov 23 & Mon,
Nov 24:

*.  Iteratively perform bundle adjustment using previous solution as
starting point for current search.  Panorama results for 5 MIT Dome photos
are starting to look encouraging.

*.  Changed ordering of internal and external camera parameters within
optimizer class and optimizer_funcs namespace so that U0 and V0 params can
be more easily removed from optimization loops.

*.  Experimented with holding U0=0.666 and V0=0.5 for 2 photo mosaics.
Results look much worse than when U0 and V0 are allowed to vary.

*.  genmatrix::project_rotation() performs a Singular Value Decomposition
on *this so that *this = U D Vtrans.  Recall U and V are orthogonal
matrices, while D is a nonnegative diagonal matrix.  In order for *this to
represent a true rotation, D must in fact equal the identity.  So we return
R = U * Vtrans as the best fit rotation projection from *this.

*.  Overloaded FeaturesGroup::write_feature_html_file() to take in an STL
vector of photographs as well as a vector indicating the order in which
these photographs should be displayed within the columns of an output html
table.  The columns are labeled by the names of the photos.

*.  instantaneous_obs::get_pass_numbers() fills and returns an STL vector
containing integer pass numbers for the current instantaneous observation.

*.  PANORAMA can now accept and process input photos specified in any
order.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Nov 24 at 1 pm
on VISION laptop (pfiles11_24g.tgz).  Can't yet test nyroads or bluegrass
demo programs, for we're still missing all databases on VISION.

============================================================================
VISION code changes made on Weds, Nov 19, Thurs, Nov 20 and Fri, Nov 21:

*. Eliminated dependence of FeaturesGroup upon unused and deprecated
TextDialog class.

*. FeaturesGroup::count_tiepoints() loops over all pass pairs and returns
numbers of feature tiepoints for a specified input time.

*.  Reorganized and moved contents of mains/mit/MIT_dome into mains/sift.
Added to SVN repository.

*.  FeaturesGroup::construct_tiepoint_map() determines the order in which
input passes should be composited in order to maximize their feature
tiepoint overlap.  Using the tiepoint count results stored in
*ntiepoints_matrix_ptr, it first identifies the pair of passes which have
the greatest tiepoint overlap.  It then sequentially adds more passes so
that at each stage the total tiepoint count is maximal.

*.  Created new class src/optimum/optimizer.cc.  Started transferring
several methods out of optimizer_funcs namespace into optimizer class.

============================================================================
VISION code changes made on Mon, Nov 17, Tues, Nov 18 & Weds, Nov 19:

*.  Moved bundle adjustment code out of PANORAMA into optimizer_func.
Latter now depends upon Levenberg-Marquadt libraries which currently only
exist on VISION laptop.

*.  Do not print out blank rows in XML table class.

*.  Turned protected section into private within instantaneous_obs class.

*.  Replaced private deque members (except for multiple_image_attitude) in
 instantaneous_obs with STL maps for much faster retrieval.

*.  Added operator=, copy constructor and nontrivial docopy members to
instantaneous_obs class.

*.  We learned that NUM_LOCK key may need to be toggled in order for NYC
demo OBSFRUSTA to appear when they're entered via the number pad.

*.  ISDS demos and standard pgms seem to work OK as of Weds, Nov 19 at 3 pm
on VISION laptop (pfiles11_19j.tgz).  Can't yet test nyroads of bluegrass
demo programs, for we're still missing all databases on VISION.

============================================================================
VISION code changes made on Sat, Nov 15, Sun, Nov 16 & early Mon, Nov 17:

*.  Fixed up labeling of SIFT features existing within tracks across
multiple images.

*.  Export features belonging to tracks to ascii text files sorted
according to feature ID.

*.  Program TIEPOINT now exports feature files which can be directly read
in by program VIDEO.  Program PANORAMA can read in features files and run
to completion.

*.  Added Kinv_ptr member to camera class.  Initialize within
camera::construct_internal_parameter_K_matrix().

*.  Moved photograph.h and .cc from image to video subdir.

*.  In homography::initialize_member_objects(), set *H_ptr and *Hinv_ptr to
3x3 identity matrices.

*.  In FeaturesGroup class, define FEATURES_MAP type consisting of integer
feature ID keys with STL vector values holding fourvectors of pass number
and two/threevector feature coordinates.  

*.  FeaturesGroup::accumulate_feature_info() takes in a FEATURES_MAP
containing feature ID keys and an STL vector of fourvectors (which
in turn consist of pass numbers along with twovector or threevector
feature coordinates).  Iterating over all FEATURES_MAP
entries, this method instantiates features and loads their
multi-pass UVW coordinates.  This method runs *much* faster than
deprecated member consolidate_instantaneous_observations().


============================================================================
VISION code changes made on Sun, Nov 9, Mon, Nov 10, Tues, Nov 11, Weds Nov
12, Thurs, Nov 13 & Fri, Nov 14:

*.  Created src/video/sift_detector class which runs SiftGPU library to
automatically extract SIFT features from images.  New class also contains
RANSAC member functions for identifying inlier bijective tiepoint pairs.

*.  Wrote new ann_analyzer class within src/kdtree.  This class
encapsulates David Mount's ANN_sample main program.

*.  Use osg::Image class to perform image subsampling within
mains/src/mit/MIT_dome/TIEPOINTS.

*.  Rewrote modified version of imagefunc::moment_of_inertia() methods
within mathfunc::moment_of_inertia_2D().

*.  mains/mit/MITdome/PANORAMA.cc now displays fitted camera intrinsic and
rotation values using OBSFRUSTA.

*.  TIEPOINTS can now generate (buggy!) feature text files which can be
used to view SIFT output with VIDEO.  Tightened several parameters after
seeing several incorrect autogenerated tiepoint pairs.

============================================================================
VISION code changes made on Mon, Nov 3, Tues, Nov 4, & Friday, Nov 7:

*.  Added private Rx_ptr, Ry_ptr and Rz_ptr genmatrix members to rotation
class.  Also changed public Rx() member function to private generate_Rx().

*.  optimizer_func::set_camera_params() takes in integer p which labels
some photograph along with double array input_param[] which holds all
independent parameters (i.e. fu,u0,v0,az,el,roll for each image).  This
method constructs a camera from the pth image's parameters, forms its
extrinsic K and intrinsic R matrices, and returns R,Rinv,K and Kinv.

*.  optimizer_func::get_prefactor() returns (fu_p/fu_q)^(2/3).

*. On 11/6/08, we remembered the hard and painful way that that the
camera.set_Rcamera() member function introduces a preliminary R0 rotation
prior to calling rotation_from_az_el_roll().  So in optimizer func
namespace, we must include R0 whenever we compute camera rotation
derivatives wrt azimuth, elevation and roll.

*.  Added R0_ptr member to camera class.

*.  Performing bundle adjustment on 3 MIT Green building photos using
Jacobian formulas finally yields reasonable (though slow) results!

============================================================================
VISION code changes made on Thurs, Oct 30, Fri, Oct 31 & early Mon, Nov 3:

*.  Started to write derivative functions for homography score function in
optimizer_func namespace.

*.  Started to add 2nd CylindersGroup into QTCITIES to store KOZ
information.

*.  Added ENTER_KOZ and CLEAR_KOZs buttons to Baghdad_demo menu.

*.  Added KOZ_CylindersGroup_ptr member to OSGButtonsServer class.

*.  ISDS demos and standard pgms seem to work OK as of Mon, Nov 3 at 5:30
am on VISION laptop (pfiles11_3a.tgz).  Working with new 500 GByte Lacie
drive #1 holding contents of old 100 GByte drive.  Can't yet test bluegrass
demo for we're still missing all databases on VISION.

============================================================================
VISION code changes made on Weds, Oct 29 & Thurs, Oct 30:

*.  Changed R_camera_ptr from genmatrix to rotation member of camera class.
Converted several other genmatrices to rotations within this class.

*.  Eliminated genmatrix(alpha,beta,gamma) constructor.

*.  Overloaded homography::parse_homography_inputs() to take in (U,V)
feature coordinates within input genmatrices *u_meas_ptr and *v_meas_ptr.
Rows within these genmatrices correspond to different features, while
columns correspond to different photos.  Missing data are indicated by -1
sentinel values.  This member function computes the homography that maps
features for image p1 to their counterparts in image p2.
   
*.  Performed quasi-successful bundle adjustment of 3 MIT photos with
differing zoom levels via a homography based score function.

============================================================================
VISION code changes made on Tues, Oct 28 & early Weds, Oct 29:

*.  Added dRdx, dRdy, dRdz, dRdaz, dRdel and dRdroll member functions to
rotations class.

*.  Created new src/optimum subdir along with liboptimum.a.  Moved
optimizer_funcs.cc from src/numerical into src/optimum.  

*.  Specialized method optimizer_func::parse_camera_params_file() extracts
internal and external camera params from input text file defined by
Lourakis and Argeros in their sparse bundle adjustment paper.

*.  Changed several (though not all!) genmatrix(3,3) in OBSFRUSTUM and
ObsFrustum classes to rotations.

*.  Added README.ubuntu to repository.

*.  ISDS demos and standard pgms seem to work OK as of Weds, Oct 29 at 3 pm
on VISION laptop (pfiles10_29g.tgz).  Can't yet test bluegrass demo for
lacie disk can't be seen by VISION.

============================================================================
VISION code changes made on Mon, Oct 27:

*. Rewrote osgfunc::genmatrix_to_quaternion() as rotation_to_quaternion().

*.  Moved all rotation methods out of mathfuncs into rotation class.  Left
orthogonal matrix and quaternion methods inside of mathfuncs.

============================================================================
VISION code changes made on Sun, Oct 26 & early Mon, Oct 27:

*.  math/rotation.cc subclasses from math/genmatrix.cc.  Started to move
rotation methods out of mathfuncs into this new class.

*. Eliminated unused genmatrix(const threevector& axis_direction,double
alpha) constructor.

*.  Eliminated awkward mathfuncs method
quaternion_corresponding_to_rotation(const genmatrix& R,fourvector& q) in
favor of counterpart which simply returns q.

*.  Wrote wrapper member function genmatrix::determinant() which returns
det as an output rather than altering input argument.

*.  Added genmatrix constructor which takes rotation as input.

*.  Moved rotation_from_az_el_roll() and az_el_roll_from_rotation() from
mathfuncs namespace into rotation class.

============================================================================
VISION code changes made on Tues, Oct 21 & Weds, Oct 22:

*.  FeaturesGroup::write_GPUSIFT_feature_file() outputs multi-pass
coordinates for every feature within *this to an ascii file which can be
read in by GPUSIFT.  In each row, this method first writes the XYZ world
coordinates for a feature followed by one or more sets of UV image plane
coordinates.

============================================================================
VISION code changes made on Mon, Oct 20:

*.  Added note about selecting linksys wireless network for iPod to
README.bluegrass_demo.

*.  FeaturesGroup::backproject_rays() takes in time t and some feature ID
along with internal camera parameters for multiple video passes.  It
reconstructs the rays in world-space for each individual photo and then
averages together their phi and theta angles.  The averaged ray's world
coordinates are stored as instantaneous observation number n_video_passes.

*.  Added caption member to xml/table.cc class along with set methods for
content and coloring.

============================================================================
VISION code changes made on Fri, Oct 17:

*.  FeaturesGroup::write_feature_html_file() outputs multi-pass coordinates
for every feature within *this to an html table which can be viewed with
any web browser.

*.  Graphical::get_all_particular_time_observations() takes in a time t.
It iterates over all entries within *coords_map_ptr and extracts those
whose times match t.  This method returns an instantaneous observation
which correspond to time t.

*.  FeaturesGroup::get_max_n_passes() performs a brute force search over
all features' instantaneous observations for input time t.  It returns the
maximum number of different observations = maximum number of passes for
time t.

============================================================================
VISION code changes made on Thurs, Oct 16 & early Fri, Oct 17:

*.  FeaturesGroup::consolidate_feature_coords() takes in times curr_t and
other_t corresponding to FeaturesGroups *this and *other_FeaturesGroup_ptr.
Looping over each feature within *this, it looks for a counterpart feature
within *other_FeaturesGroup_ptr with the same ID.  If a counterpart feature
is found, its coordinates are pushed onto the current feature's observation
list.

*.  FusionGroup::consolidate_XYZ_and_UV_feature_info() now calls
FeaturesGroup::consolidate_feature_coords().

*.  Created new table class within new xml subdir.

============================================================================
VISION code changes made on Tues, Oct 14:

*.  Link libsba, liblapack, libblas, libF77 and libI77 within Makefile.

*.  Repackaged Lourakis' auto-generated MAPLE image projection C routines
into video subdir namespace imageprojfuncs.cc.  Added Lourakis' read
parameter methods as readparamfuncs.cc namespace

*.  Rewrote bundle adjustment C demo program as C++
mains/bundle/adjustbundle.cc.  Added mains/bundle as new subdir to repository

============================================================================
VISION code changes made on Sat, Oct 11:

*.  Added reset_nbins() and decrement_nbins() to param_range class.

============================================================================
VISION code changes made on Fri, Oct 10:

*.  Performed initial matching of just 2 MIT Dome photos taken from top of
Green building; Can view results with NEW_FOV

============================================================================
VISION code changes made on Sun July 27:

*.  Moved broadcast_subpacket() & broadcast_track_statevector() member
functions out of EarthRegion into Geometrical 

*.  Added get_robots_Messenger_ptr() member to EarthRegion class.

*. Replaced postgis_database object with pointer in VIDEOCITIES.  Should
make same replacement in QTCITIES.

*.  Added tracks_group_ptr member to MODELSGROUP and track_ptr member to
MODEL along with set & get methods.

*. MODELSGROUP::generate_Predator_Model_for_flight_PolyLine() now generates
and fills a track for the Model based upon its flight Polyline.

*.  Renamed Messenger::generate_message(textMessage_ptr) as
print_sent_message_contents().

*.  Added string description member to track class along with set/get
methods.  Default value = "Ground Target".  In
MODELSGROUP::generate_Predator_Model_for_flight_PolyLine(), set value to
"Airborne Sensor".

*.  In MODELSGROUP::update_display(), broadcast current statevector info
via ActiveMQ for *MODEL_ptr if its track has been instantiated.
