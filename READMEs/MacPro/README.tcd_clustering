===========================================================================
TCD image chip clustering
===========================================================================
Last updated on 3/14/16; 3/15/16; 4/5/16; 4/6/16
===========================================================================

*.  As of Feb 2016, Zhaoyi, Weiyu and Michael are working on a set of
O(150K) traffic signs which need to be refined.

  > db.detection.find({"run_id" : "M5_TCD_RC2_sign"}).count()
  150827

A subset containing O(28K) of these chips is of highest priority:

  > db.detection.find({"run_id" : "M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919"}).count()
  28518

O(150K) image chips appear to be sitting in subdirs of 

   /startown-gpfs/sputnik03/supersize/labeling_resources/20151112_bayarea//M5/bv_76111

O(28K) image chips appear to be sitting in subdirs of 

   /startown-gpfs/sputnik03/supersize/labeling_resources/20151105_bayarea//M5/bv_76101

We've copied O(150K) jpg image chips into
/data/peter_stuff/imagery/tcd_chips/ on our ThinkMate.

*.  On 3/14/16, we dumped the 28518 traffic sign entries within Zhaoyi,
Weiyu and Michael's Mongo collection on fly14 corresponding to the M5
project:

> db.detection.find({"run_id" : "M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919"}).count()
  28518

mongodump -h flyover1/10.182.141.180,10.182.141.181,10.182.141.182 -u 'pr' -p 'rind451,jute' -d pr -c detection -q '{run_id:"M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919"}'


The mongo dump file is sitting on ThinkMate in /data/peter_stuff/mongo_db/2016/Mar/ . 


We restored this mongo dump to ThinkMate's "pr" database by chanting from
within /data/peter_stuff/mongo_db/2016/Mar/M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919/

	mongorestore --db pr --collection detection ./dump/pr/detection.bson

We can also remove and restore all 28515 entries within fly14's detection
collection by chanting from inside mongo (talking to fly14)

db.detection.remove({"run_id" : "M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919"})

Then from outside mongo, cd to
/data/peter_stuff/mongo_db/2016/Mar/M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919/
and chant 

mongorestore -h flyover1/10.182.141.180,10.182.141.181,10.182.141.182 -u 'pr' -p 'rind451,jute' -d pr -c detection ./dump/pr/detection.bson


*.  Command to find mongo detections with assigned cluster IDs:

>  db.detection.find({cluster_id:{$exists:true}}).count()
15

>  db.detection.find({cluster_id:4}).count()
3

> db.detection.find({attribute:{$exists:true}}).count()

> db.detection.find({attribute:"cluster_rep"}).count()




*.  mains/machine_learning/clustering/CROP_SINGLE_TCD_CHIPS imports a set
of TCD chips generated by Weiyu et al.  Each chip has a large view on its
left and two smaller views vertically aligned on the
right. CROP_SINGLE_TCD_CHIPS performs vertical profiling to search for a
column of red pixels which separates the large view on the left from the
two small views on the right.  The program then exports just the large view
on the left to an output jpg file with a simplified basename.

*.  Follow first few steps within README.imagesearch up to thumbnail
generation.

*.  Generate thumbnails whose min pixel dim = 230 [or max pixel dim = 256]
via run_thumbnails.

*.  Program mains/machine_learning/caffe/GENERATE_FILE_LIST imports all
image files from a specified folder.  It exports a text file containing
their full paths which is needed as input to caffe's feature extractor
binary.

*.  Copy file_list.txt into ~/software/caffe_public/examples/_temp/

*.  Delete ~/software/caffe_public/examples/_temp/features/.  Modify number
of minibatches (e.g. 6421) within command line to equal number of input
thumbnails:

time ./build/tools/extract_features.bin \
./models/VGG16/VGG_ILSVRC_16_layers.caffemodel \
./models/VGG16/vgg_val.prototxt fc7 \
./examples/_temp/features 6421 lmdb GPU

Then from within ~/software/caffe/, execute modified version of
run_caffe_features from within ~/software/caffe/ .

Note: Processing 6421 roadsign thumbnails (of max size 256) took just a few
minutes on Thinkmate GPU.

Processing 31690 roadsign thumbnails (of max size 256) took 14 minutes on
Thinkmate's GPU.

Processing 140736 roadsign thumbnails took 1 hour on Thinkmate's GPU

*.  mains/machine_learning/clustering/EXTRACT_FEATURES imports LMDB
database files generated by caffe's file extraction binary.  It retrieves
each "gist-like" global descriptor and exports their contents to output
text file "global_features.dat".


*.  mains/machine_learning/clustering/RANDOM_REDUCE imports global
"gist-like" global image descriptors for a set of images generated by caffe
from a text file exported by EXTRACT_FEATURES.  It assembles all the
feature descriptors into an n_feature_vectors x n_feature_dims matrix X.
RANDOM_REDUCE then generates a random matrix R which reduces the number of
feature dimension down to a user-specified value K.  The product X_reduced
= R * X contains the reduced representation for the global image
descriptors.  The reduced global descriptors are exported in dense text and
binary formats to an output file within the same subdirectory as the input
original global descriptors.


*.  Manually copy graph_XY_coords.fm3_layout from
caffe_public/examples/_temp/features_XXX/ into bundler/XXX/graphs/

*.  Manually copy edgelist.dat into bundler/XXX/graphs/ subdirectory.

*.  Execute run_kmeans_clusters step in Image Search pipeline.


*.  

> db.detection.find({cluster_id:{$exists:true}}).count()  

> db.detection.find({cluster_id:{$exists:true}, project_name:"M5"}).count()  
0

> db.detection.find({"run_id" : "M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919", cluster_id:{$exists:true}}).count()
0


  > db.detection.find({"run_id" : "M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919"}).count()
  28518

  > db.detection.find({cluster_id:{$exists:true}, "run_id" : "M5_GT_160203_79915_79912_other_traffic_sign_Merge_79919"}).count()
  28518



db.detection.find({"_id":ObjectId("56b3e1d364b94a44a34e3480")}).toArray()

*.  Create mongo index for "cluster_id" field:

	db.detection.ensureIndex({cluster_id : 1})


=================================================================================
Sacramento road signs (April 2016)
=================================================================================

Verification project 20160325_sacramento_benchmark_rdn

  > db.detection.find({"run_id" : "/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
435904

  > db.detection.find({sub_type:"R_stop", "run_id" : "/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
37114


> db.detection.find({"verification_value":{$exists:true}, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
66311

> db.detection.find({"verification_value":{$exists:true}, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_verified1.xml"}).count()
66311

Use Mongo "dot" notation in order to count how many verification values
correspond to correct, incorrect and undetermined:


		"verification_values" : {
			"sub_type" : [
				{
					"user" : ObjectId("56217c831c47d16e7ec50a48"),
					"created" : ISODate("2016-03-29T16:07:29.341Z"),
					"value" : "correct"
				},
				{
					"user" : ObjectId("564396b026e07d7ab679a791"),
					"created" : ISODate("2016-04-04T13:14:50.065Z"),
					"value" : "correct"
				}
			]
		},
		"verification_value" : {
			"sub_type" : "correct"
		}
	}


> db.detection.find({"verification_value.sub_type":"correct", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
62095 (on fly14)

> db.detection.find({"verification_value.sub_type":"correct", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_verified1.xml"}).count()


> db.detection.find({"verification_value.sub_type":"incorrect", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
4053

> db.detection.find({"verification_value.sub_type":"not_traffic_sign", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_verified1.xml"}).count()
4053

> db.detection.find({"verification_value.sub_type":"undetermined", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
203

> db.detection.find({"verification_value.sub_type":"undetermined", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_verified1.xml"}).count()
203



On 4/6/16, Weiyu told us that "incorrect" verification labels are NOT
cloned by pwin via his pr_ebbox_list_write_to_mongo() method.  Instead,
"incorrect" is exported into mongo as "not_traffic_sign".



Return just the patch_path field for all chips verified as "undetermined":

> db.detection.find({"verification_value.sub_type":"undetermined", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"},
{patch_path:1}).toArray()

> db.detection.find({"verification_value.sub_type":"correct", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"},
{patch_path:1, sub_type:1}).limit(100).toArray()

> db.detection.find({"verification_value.sub_type":"incorrect", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).limit(10).toArray()

> db.detection.distinct("verification_values.sub_type.user",{"verification_value.sub_type":"incorrect", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"})




======================================

Create mongo clone of Sacramento roadsigns project with run_id  = 
/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml
  

> db.detection.find({"run_id" : "/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
435904

> db.detection.find({"verification_value":{$exists:true}, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
66311

> db.detection.find({"verification_value.sub_type":"incorrect", "run_id" : "/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()
4053


> db.detection.find({"verification_value.sub_type":"incorrect", "run_id" : "/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419.xml"}).count()





On 4/7/16, Carlos Folgar showed us that we can retrieve the Mongo Object ID
for image chips within the thumbs up/down browser window by right clicking
on the chip and selecting "Inspect Element".  The Mongo ID then appears in
the bottom browser subwindow after "data_id = 570697a21d41c86b9e2b52de".  


db.detection.find({"_id":ObjectId("570697a21d41c86b9e2b52de")}).toArray()

db.detection.find({"_id":ObjectId("570697a21d41c86b9e2b54c4")}).toArray()




> db.detection.find({"verification_value.sub_type":"not_traffic_sign", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"}).count()
4053

> db.detection.find({cluster_id:{$exists:true}, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"}).count()
4053


> db.detection.find({"verification_value.cluster_id":"correct", "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"}).count()
3162 (as of Mon Apr 11 at 9:39 am)



> db.detection.find({"run_id" :"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_clusters.xml"}).count()
3162


> db.detection.find({cluster_id:{$exists:true}, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_clusters.xml"}).count()
3162



>db.detection.find({cluster_id:{$exists:true}, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"},{cluster_id:1}).toArray()


db.detection.distinct("cluster_id", {"run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"},{cluster_id:1}).length
> 262


> db.detection.distinct("cluster_id", {"run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"},{cluster_id:1}).count()

154,155,30,33,31,-1,90,68,13,2,55,156,9,56,10,157,28,38,76,41,16,57,3,91,158,63,113,159,64,24,46,160,11,17,161,1,12,14,18,5,162,47,114,163,164,15,165,115,92,36,166,116,167,168,169,93,170,94,117,171,172,173,77,78,174,175,118,42,50,79,119,176,177,120,121,122,123,178,179,58,180,181,182,183,59,124,184,4,185,80,19,34,186,51,187,188,125,43,60,61,37,189,81,126,23,127,95,44,190,32,191,128,192,129,193,130,194,96,131,195,196,97,65,35,197,52,198,98,69,8,39,27,20,26,132,199,66,99,200,201,202,100,203,204,205,133,206,101,134,102,103,207,208,104,209,40,210,211,70,212,213,214,82,215,216,217,25,218,219,135,105,136,137,138,139,220,221,106,48,222,223,224,83,29,140,225,6,67,226,62,141,142,227,228,84,107,45,229,230,231,108,53,232,233,234,235,143,236,237,7,21,238,22,85,239,144,49,145,240,146,241,109,242,54,110,86,243,111,244,147,71,245,148,72,73,149,246,150,151,247,248,87,249,74,250,75,251,112,252,88,253,254,255,256,257,89,258,259,152,260,261,153 has no method 'count'


db.detection.find({cluster_id:2, "run_id" :
"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"},{patch_path:1}).count()
227


Dumped cloned set of thumbsdown roadsigns after cluster IDs had been
assigned.  Mongo dump now sits on Thinkmate in /data/peter_stuff/mongo_db/2016/Apr/Apr7

mongodump -h flyover1/10.182.141.180,10.182.141.181,10.182.141.182 -u 'pr' -p 'rind451,jute' -d pr -c detection -q '{run_id:"/startown-gpfs/sputnik01/distrib_batch_prj/prjdb_ballervm_sacramento_benchmark_rdn_160324_212419_thumbsdown1.xml"}'

