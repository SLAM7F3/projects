=============================================================================
PWIN notes
=============================================================================
Last updated on 11/30/16; 12/7/16; 1/19/17; 1/20/17
=============================================================================

*.  In order to avoid having to chant "c3 lab_pcho" at a pwin command
prompt, we can instead launch pwin with a specified initial command:

		p -do "c3 lab_pcho"

*.  Invoke the "-nowin" argument in order to avoid having a pwin window pop open:

e.g. 

/home/pcho/sputnik/pwin/build/linux64/pwin -vv -nowin -do "c3 lab_pcho "

*.  Comment from pano.c:

// After lots of trial and error on Mon, Feb 3, 2014, we empirically found
// that the "RGB24" mode appears to be able to work with many arbitrary internet
// jpg images:

   p_read_scaled_imf(im_yv12, input_filename, P_IMF_RGB24, verbose_flag);

// Set 16-bit RGB display:

   p_lut(-1);

*.  According to Viktor, p_read_imf can only be called when the allocated
buffer contains exactly the number of bytes needed to hold the input image.
On the other hand, p_read_scaled_imf can be used to import images whose
byte size does not precisely equal that of the buff.

*.  XML file which contains metadata needed to generate a 3D city map sits
on a server and is accessible in a webbrowser via a URL like

    http://flyover.geo.apple.com/prjdb/FlightOps/project/belfast/xml

*.  On 2/5/14, Rahul noticed that there was an erroneous empty shape line
within belfast.xml:

 <resource_library>
    <resource name="belfast">
      <tileset name="/startown-gpfs/ssdws03/conf/shapes/belfast/belfast_build_scan.shape" type="shape"/>
      <usershape name="/startown-gpfs/ssdws03/conf/shapes/belfast/tile_area.shape" type="shape"/>
      <usershape name="/startown-gpfs/sputnik02/supersize/data/belfast/belfast/tiletest/test_failed_test_file_exists.shape" type="shape"/>
      <pshape name="" type="shape"/>
      <imdata cathegory="aerial" name="/startown-gpfs/sputnik01/supersize/conf/imdata/belfast/belfast_20130914_cc_k2/part1"/>
.
.
.

The empty "pshape" line entry caused project loading to fail since it
searched for a shape file whose name equaled our current working directory.
Rahul modified a web page which regenerated the belfast xml file without
this blank pshape line.

*.  real distance versus mercator distance

sreal = distance in meters
smerc = distance in mercator coordinates

mpp = meters per pixel (?)

*.  Satellite images are imported into pwin by specifying their lat/lon
geocoords along with a meter-per-pixel rather than via a specific project.

*.  On 2/5/14, Viktor told us that we should generally avoid tinkering with
"private" parts of structures if possible.  Instead, it's preferable to use
"setter" methods which work with "public" structure members.

*.  On 3/4/14, Fredrick told us that we should use the da_size() macro
instead of accessing the "private" n_items member of a dynamic array.

*.  On 2/7/14, Martin pointed out that a kbd_app struct contains kbm and
kbd "objects" within it.

*.  On 2/11/14, Viktor recommended that we generally try to use
g_copy2/g_copy3/etc macros to copy vector coordinates into structs (see
gcamera.h)

*.  In order to find output generated by build pipeline, Rahul told us that
we should first login to the Flyover Admin webpage
(https://flyover.st.geo.apple.com/admin/).  Then select Project Database ->
Project tab.  Within search field in upper right hand corner, enter some
substring corresponding to a particular build which we've performed
(e.g. paris_build_lab_pcho).  The Path to the output is then displayed
(e.g.

/startown-gpfs/ssdws03/supersize/devtest/pwin_labs/build_labs/paris_pcho/omni

*.  Check out pwin/lib/keyboard.h for predefined values for various keys:
(e.g. K_RIGHT for right-arrow key, K_CTRL_A for cntrl-A, etc)

*.  When in Gui2D mode, control-mouse-scrollwheel can be used to zoom in/out.
Moreover, holding down the shift key causes lateral geocoords corresponding
to current mouse position to be displayed.

*.  In SFM GUI, help files are mode dependent !

*.  When working with SFM GUI's 2D mode, double click on a rig in order to
select one of its cameras.  Then press "3" in order to display camera's
corresponding image.

*.  Press 'e' within matching view #4 of SFM GUI in order to toggle
epipolar line display.

*.  In order to adjust any parameter value within Pwin, chant "esc x" to
enter into command line mode.  Then type parameter name and return to see
parameter's current value.  Chant parameter name followed by new value to
assign new value to parameter.

*.  In SFM GUI mode #3 (keypoint detection), target_det parameter governs
how many keypoints are detected.

*.  In SFM GUI mode #4, "v" toggles between having all tiepoint pairs
indicated by tielines, having only tiepoint pairs currently close to mouse
location displayed, and displaying just all keypoints with no tielines.

*.  On Fri Feb 14, 2014, Martin told us that the "geo_conv3" and
"geo_conv6" macros defined in geo_conv.h are high-level functions which
should be called in order to convert between one geocoord system and
another.  (Other functions such as geo_convert_coord_euler()) are
lower-level and should be avoided in favor of geo_conv6.)

*.  In /hypersonic/devtest/resource/boston/boston_20100731_dt/ , the file
imdata.cam1 contains GPS and IMU information for the aircraft:

<imdata>
  <comment>boston_20100731_dt 20100731</comment>
  <coord name="UTM19,EGM96"/>
  <env name="calibration.cal" camera="1"/>
  <columns count="16">
    VALID NAME X Y Z YAW PITCH ROLL TIME SHUTTER VX VY VZ VYAW VPITCH VROLL
  </columns>
  <data count="960">
1 camera1-Cam1/RUN19/000949-073110162415-Cam1.JPG 4690050.236 327920.542 -621.062   1.539510  0.008651 -0.024058 577455.442545  0.00050000   2.753025  50.062349 -0.593323 -0.004781 -0.020311 -0.035201
1 camera1-Cam1/RUN19/000950-073110162417-Cam1.JPG 4690052.536 327990.836 -620.900   1.556821 -0.029213 -0.023580 577456.843532  0.00050000   2.970239  50.254628  0.993524 -0.001565 -0.010011  0.011001
1 camera1-Cam1/RUN19/000951-073110162418-Cam1.JPG 4690055.135 328060.262 -618.720   1.543601 -0.0354


*.  In /hypersonic/devtest/resource/boston/boston_20100731_dt/ , the file
calibration.cal contains the transformation between the IMU ( which
effectively specifies the aircraft's orientation) and the individual
cameras within the rig.  For example, camera 1 is pitched down by 90 degs
(and its yaw + roll effectively cancel out).  Cameras 2 - 5 are all
approximately pitched down by 60 degrees, and their yaws are all spaced
apart by 90 degrees.  

# pos
      {  0.0000, 0.0000, 0.0000,  -48.625259,  -89.937524,   48.899160 },
      {  0.1241,-0.0089, 0.2149,  178.755636,  -65.571449, -179.463668 },
      {  0.0078, 0.1247, 0.1242,  -90.690384,  -58.845123,  179.947007 },
      { -0.1247, 0.0071, 0.2147,   -0.223024,  -64.225163,  179.525839 },
      { -0.0082,-0.1256, 0.1232,   88.852276,  -58.675928, -179.417458 },

#proj
      { 0, 38.3632, 26.1136, -0.12627, -0.05140, 0.19541, -0.00353, -0.00042, 0.00187, -0.00138 },
      { 0, 38.3204, 26.0839, -0.12090, -0.08077, 0.23908, 0.00376, -0.00555, -0.00290,  0.00285 },
      { 0, 38.2916, 26.0632, -0.12079, -0.06686, 0.20808, -0.00289, -0.00505, 0.00039,  0.00358 },
      { 0, 38.3271, 26.0894, -0.11246, -0.12564,  0.29505, 0.00032, -0.00182, -0.00345, -0.00078 },
      { 0, 38.2721, 26.0596, -0.16699,  0.14817, -0.06833, 0.00157, -0.01003, -0.00047,  0.00727 }


#yawcorr xcorr ycorr
0.0
0.0
0.0


#td
0.0
-0.002688

#acc
0.5

# camera corrections
0.0 0.0 0.0
0.0 0.0 0.0
0.0 0.0 0.0
0.0 0.0 0.0
0.0 0.0 0.0

*.  On 2/14/14, Martin told us that the following relationships hold
between image and world coordinates for ALL geocoordinate systems:

Define world coordinates by upper-case letters X,Y,Z.  Canonical
orientation of camera with zero angular orientation has camera looking down
world-X axis (which can be thought of as oriented into page) with world-Y
axis oriented towards right and world-Z axis pointing downwards.

[X, Y, Z] --projects onto--> [Y/X, Z/X] propto [pu, pv] propto [U, 1-V]


	So   pwin Y_hat --> +U_hat

	     pwin Z_hat --> -V_hat


*.  On 2/21/14, Frederick Larson taught us that pf_rvf() within lib/base/pf_rvf.c 
implements a "rank value filter" function which can be used to perform
median filtering on an image.  It 


*.  Comment on line 203 of p_image.h is WRONG!  It should read


 *               Example, copy an image:
 *
 *                      P_FOREACH2(im_dst, im_src, *_p1 = *_p2);
 *


rather than 

			P_FOREACH2(im_dst, im_src, *_p1 = _*p2);

*.  Copying images via pf_copy(im_src, im_dst) is faster than P_FOREACH2.

*.  On Mon Feb 24, 2014, Viktor Kolbe reconfirmed that all flyover jpg
images are in 12-bit YV12 format (and not 24-bit RGB format).  Look at
pf_filt.h for functions which convert back and forth between YV12 and RGB 


*.  	"p" functions generally perform [ low-level ] image processing

	"pf" functions are faster versions of "p" functions (sometimes involving
	  low-level machine-like coding)

	"g" functions generally perform geometry manipulations


*.  Looking for pf_scale type functions which can be used to downsample
input flyover jpg images.

*.  Chant "make -j pwin OPT=3" in order to compile pwin with optimization
level set to 3.

*.  On 3/2/14, Viktor suggested looking at misc/hash_map.h as a reasonable
pwin analog of an STL map.

*.  Generally avoid creating nontrivial structures within loops for
performance purposes.  But parallelized-for loops do require objects
to be created inside loops rather than outside them.

*.  Viktor suggests that we pass our p_image_rgb type as a "pointer"
rather than as an "array":

	void get_pixel_RGB_values(
	  int px, int py, p_image *RGB_image, int *R, int *G, int *B)

instead of 

	void get_pixel_RGB_values(
	  int px, int py, p_rgb_image RGB_image, int *R, int *G, int *B)

*.  Viktor says that method names should stand by themselves with white
space surrounding them.  Method arguments should be physically isolated
from method names:


void coarse_region_rgb_statistics(double coarse_contour_area_sum, p_image_rgb rgb_image, 
                                  p_image *coarse_water_mask, hash_map_t *water_region_map, 
                                  double_list_t *reds, double_list_t *greens, double_list_t *blues)
{
  int n_seeds = 0;

*.  pf_imset is faster than p_foreach.

*.  pf_copy is faster than p_foreach2.

*.  pf_shrink downsizes images by factors of 2 and is faster than pf_scale.

*.  Viktor again insists that capital letters (RGB, ID) should be avoided
in variable names.  Only macros should be capitalized.  

*.  "Pwin namespaces" are indicated by prefixes such as "g_", "f3d_",
"m3d_", etc for both file and function names.

// "p_" = basic image processing (e.g. allocating)
// base = really basic image processing 


*.  HOG features can be extracted via functions in lib/feat/feat_hog.h
Use 2 dense integral image HOG methods when computing HOG features densely!

*.  Hamid's bank of 17 features are sitting in lib/feat/feat_filterbank.h

*.  Most compiler flags (e.g. CUNIT_FLG) refered to within build/pwin.mak are
defined in build/pwin_all.mak.

*.  Add OPENCV=1 flag in order to enable OpenCV methods (e.g. MSER) to be 
called from within pwin:

e.g. ~/bin/makepwin should read 

/bin/rm /home/pcho/sputnik/pwin/build/linux64/lab_pcho.o
cd /home/pcho/sputnik/pwin/build/linux64/
make -s -j pwin OPT=3 OPENCV=1


*.  Within pr_gui (and c3_viewer), can measure pixel (world) distances by
holding down shift key and dragging mouse.  


*.  In early May 2014, startown connectivity was lost several times within
a few days.  Viktor taught us that we need to chant the following in order
to kill hung pwin jobs once startown connectivity returns:


		pkill -9 sshfs  [ Should free up unix commands which previously were locked
				  waiting for startown I/O ]

Note that jobs such as pwin which expect startown I/O can NOT be killed via
kill -9 commands until the previous command is issued!

		fusermount -z -u /startown-gpfs  [ force /startown-gpsf mount point to be unmounted]

		~/sputnik/scripts/sshfs_mount.sh /startown-gpfs

In early Jun 2014, Viktor wrote the above script which takes the place of
the command below:

sshfs -p 2022 rd17d01ls-geo0838.rd.geo.apple.com:/gpfs /startown-gpfs  [remount /startown-gpfs]

or "mount_startown"

*.  For PR work, we often don't need access to startown.  So even if
connectivity with startown is lost, we can still work locally with pwin by
chanting something like:

/home/pcho/sputnik/pwin/build/linux64/pwin -vv -cfg /home/pcho/sputnik/pwin/build/stripped.dcfg -nogpfs \
-do1 "pr gui -dir /hypersonic/devtest/pr_test_images/house_numbers/van/ -dver 1003"


*.  In order to run DDD gui front end to GDB debugger, we've followed
Andreas Bockert and created a small script called /home/bin/dddpwin which
contains

		ddd /home/pcho/sputnik/pwin/build/linux64/pwin

Once this brings up ddd, then issue a "run" followed by a pwin command with all its arguments
such as 


run -vv -cfg /home/pcho/sputnik/pwin/build/stripped.dcfg -nogpfs -do1 "pr gui -dir /hypersonic/devtest/pr_test_images/house_numbers/van/ -dver 1003"


or


run -vv -nowin -do1 'pr classify -dver 1004 -stop_st 3 -nochk -prjdb /startown-gpfs/sputnik01/supersize/mercury/prj/pr_prjdb.xml -prj pilot_knob -sno 8 -sst 0'


Ibrahim taught us (and he is correct) that we should turn OFF optimization
level O3 in our "makepwin" script when we're compiling in order to help
find true locations for bugs within the stack trace !

*.  On 6/16/14, Fredrik Larsson taught us that pwin includes some
statistics commands which can be used to generating timing information.


See for example the following 2 lines within mopt_refine_tile() of mopt.c :

      ps_tile_stat("mopt_time", t_mopt/1000000.0, PS_LOG_INFO | PS_WRITE_XML | PS_MEAN | PS_SUM);
      ps_tile_stats_write(savefn);

*.  Some basic filename/string manipulation methods are contained within
misc/cstr.c

   
*.  On 7/1/14, Martin Byrod showed us that we can enable emacs ctags by
chanting make tags.  We should then be able to find the definition of any
currently highlighted symbol by pressing "Meta-." = "alt period".  Then
"Meta-*" = "alt *" should return us back to the original highlighted symbol
location.

See http://www.emacswiki.org/emacs/EmacsTags

*.  On 7/30/14, we experienced the following "fdistrib" bug when we tried
to PR GUI:

> Tonight I tried to run the script below which has worked fine for the past month:
>
> /home/pcho/sputnik/pwin/build/linux64/pwin -v -cfg /home/pcho/sputnik/pwin/build/stripped.dcfg -nogpfs \
> -do1 "pr gui \
> -prjdb /cc2-gpfs/storage/dev/g3d/project.xml \
> -prj 20140305_v4_lidar_v2 \
> -imstep 25 -dver 100"
>
>
> But this command now produces the following error messages:
>
> RROR  : "fdistrib" cannot write to "/cc2-gpfs/storage/dev/g3d/model/20140305_v4_lidar_v2/geom"
> ERROR  : "fdistrib" cannot write to "/cc2-gpfs/storage/dev/g3d/model/20140305_v4_lidar_v2/treegeom"
> ERROR  : Project is invalid. Exiting.
>
> Has something changed in the past day with the Mar 5, 2014 San Francisco ladar data?  This pwin command worked fine yesterday....
>
>
> Peter
>

Andreas told us to be sure to add the "-nochk" flag inside the do1 quoted
section.  This eliminated the fdistrib check, and the above PR GUI command
worked again.

*.  On 8/14/14, Abhishek taught us that the following two log_verbose lines
are basically equivalent:

  log_verbose("inside pr_save_detections_to_mongo() \n");
  log_verbose("inside %s \n", __FUNCTION__);

But the second line is more general.

*. On 9/10/14, we learned from Rahul some basic nomenclature conventions
regarding projects, models and resources:

darray_t = ancient dynamic array (essentially STL vector of objects)

map_envdata2_t = datastructure associated with resources

imdata = array of map_envdata2_t = array of resouces

model contains an imdata

project contains a single model

envdata (= darray_t) is typically project->model.imdata = set of all
resources

*.  In 10/10/14, we had lots of trouble with populating a list of strings.
After talking with Sam and Abhishek and looking at some code written by
Weiyu, we finally got the following to work:

      string_list_t telephone_labels = {};
	.
	.
	.
      int n_telephone_labels = da_size(&telephone_labels);
      da_add_empty(&telephone_labels);
      *da_get(&telephone_labels, n_telephone_labels) = (char*)calloc(sizeof(char*), sizeof(ebbox.label));
      sprintf(*da_get(&telephone_labels, n_telephone_labels), "%s", ebbox.label);
      
	.
	.
	.
      da_foreach(&telephone_labels, free(*_x));
      da_free(&telephone_labels);

*.  On 12/11/15, Ibrahim pointed out that there is a new string_list_add()
method which makes working with string_lists much easier:

  int s;
  string_list_t subtype_labels = {};

  string_list_add(&subtype_labels, "other");
  string_list_add(&subtype_labels, "HOV_diamond");
  string_list_add(&subtype_labels, "straight_arrow");
  string_list_add(&subtype_labels, "STOP");

  for(s = 0; s < da_size(&subtype_labels); s++){
    log_verbose("s = %d  subtype = %s \n", s, *da_get(&subtype_labels, s));
  }

*.  On 12/1/2014, we learned from Viktor that if we set a memory quota
(e.g. -mq 50 ) and also include a verbose flag within a pwin command, then
pwin will periodically output memory usage and display an ascii graph of
RAM usage as a function of time till now:

/home/pcho/sputnik/pwin/build/linux64/pwin -vv -nowin -mq 50 \
-do "pr build -build_ver 21050 -dver_db 0 -start_rig 100 -stop_rig 104 -misc_par_str -org -detect \
-mongodb -mongo_local -resume \
-prjdb /startown-gpfs/sputnik01/distrib_batch_prj/prjdb_abhishek-sharma-MacPro_new_york_kitty_hawk_141130_200209.xml \
-prj new_york_kitty_hawk -nochk -area 14 1 9113 9452"


  47.50|                                                                      |
  42.50|                                                                      |
  37.50|                                                                      |
  32.50|                                                                      |
  27.50|                                                                      |
  22.50|                                            **************************|
  17.50|                           *******************************************|
  12.50|                           *******************************************|
   7.50|         *************************************************************|
   2.50|         *************************************************************|
       +----------------------------------------------------------------------+
pmem statistics: 0.00 gb allocated, 0 blocks, 0 refs
SPAM   : mem usage: 23.133862 Gb, cpu: 26.0%
SPAM   : mem usage: 23.236572 Gb, cpu: 119.0%
SPAM   : mem usage: 23.236572 Gb, cpu: 124.5%
SPAM   : mem usage: 23.236572 Gb, cpu: 133.0%
SPAM   : mem usage: 23.236572 Gb, cpu: 135.5%
SPAM   : mem usage: 23.236572 Gb, cpu: 143.0%
SPAM   : mem usage: 23.265869 Gb, cpu: 150.5%


*.  On 12/16/14, Viktor told us that "env" = "environment" is synonomous
with "resource".

*.  On 1/14/14, Fredrik mentioned "xmllint" which is a command utility for 
finding bugs in XML files.

*.  Digisat imagery can be viewed in a browser by accessing an apple server
via the following call:

http://imagery.geo.apple.com/tile?style=7&v=prod&y=3034&x=2477&z=13

Non-image apple maps can be viewed in a browser by accessing a different
apple server via the call

http://tile.dev.geo.apple.com/tile?style=0&y=3034&x=2477&z=13	// Pure vector
http://tile.dev.geo.apple.com/tile?style=6&y=3034&x=2477&z=13	// Fused vector + raster


*.  On 6/12/15, Tom Annen showed us that the downloaded images coming from
the tile.dev.geo.apple.com server are in PNG rather than JPG format.

curl 'http://tile.dev.geo.apple.com/tile?style=0&y=3034&x=2477&z=13' > tile.png


*.  On 3/17/15, Sam Friedman reminded us about c3_view_debug_yv12() and
c3_view_debug_rgb() commands.  [Need to #include gui_dbg.h in order to use
this debug call.]  When calling these, make sure to NOT include -nowin
within our command line pwin call!  Press 'q' in order to have program
continue after c3_view_debug_yv12() call.

*.  On 4/30/15, Fredrik Larsson taught us about da_remove_if() which is an
efficient means for removing elements from a dynamic array that satisfy
some condition.  For example, following line eliminates all aerial rigs from
a rig list containing both ground and aerial rigs:

   da_remove_if(&rig_list, _x->tag == PRJ_IMDATA_AERIAL);


*.  To copy large numbers of images from startown to subdirs of cc2-gpfs, login
to a distrib node (e.g. cn0099) and chant the following "udr" command
(which runs rsync in parallel) over multiple subdirectories of images:

/gpfs/sputnik01/tools/transfers/udr -c /usr/local/bin/udr rsync -rlpt \
/startown-gpfs/sputnik04/supersize/copyprocess/resource/m131317/m131317-a87-20150502_155318-h8 \
cc02l00ls-copy0001.geo.apple.com:/gpfs/storage/dev/g3d/images/new_building

/gpfs/sputnik01/tools/transfers/udr -c /usr/local/bin/udr rsync -rlpt \
/startown-gpfs/sputnik04/supersize/copyprocess/resource/m131317/m131317-a97-20150502_155318-h8 \
cc02l00ls-copy0001.geo.apple.com:/gpfs/storage/dev/g3d/images/new_building

*.  On 7/30/15, we empirically found that rsync is significantly faster
than sftp to transfer large numbers of pano jpgs from startown to cc2-gpfs:


/gpfs/sputnik01/tools/transfers/udr -c /usr/local/bin/udr rsync -rlpt \
/startown-gpfs/ssdws03/devdata/panoramas/bay_area_Hwy_87 \
cc02l00ls-copy0001.geo.apple.com:/gpfs/storage/dev/users/pcho/panos/bay_area_5k_Hwy_87

/gpfs/sputnik01/tools/transfers/udr -c /usr/local/bin/udr rsync -rlpt \
/startown-gpfs/ssdws03/devdata/panoramas/bay_area_5k_Hwy_280 \
cc02l00ls-copy0001.geo.apple.com:/gpfs/storage/dev/users/pcho/panos/bay_area_5k_Hwy_280

/gpfs/sputnik01/tools/transfers/udr -c /usr/local/bin/udr rsync -rlpt \
/startown-gpfs/ssdws03/devdata/panoramas/bay_area_Hwy_101 \
cc02l00ls-copy0001.geo.apple.com:/gpfs/storage/dev/users/pcho/panos/bay_area_5k_Hwy_101


*.  On 1/17/16, we used the following command issued on TITAN1 from within
/data/peter_stuff/imagery/syntext/numbers/16/ to pull 500K jpeg files from
Thinkmate:

 rsync -avzh pcho@17.228.154.239:/data/peter_stuff/imagery/syntext/numbers_Jan16 .

*.  On 9/3/15, we used the following rsync command to transfer large
numbers of files from local MacPro to GPU box titan 1:

 rsync -avzh pcho@17.228.153.244:/data/peter_stuff/text_in_wild/scripts/Chicago/hn_segmentation/ /data/imagery

*.  On 9/28/15, we used the following rsync command to transfer large
numbers of png files from GPU box titan1 to our local MacPro:

 rsync -avzh pcho@17.228.154.84://data/imagery/john_wood/20150924_Hwy_650_ortho/SegmentationClass .


*.  On 6/23/15, we learned from Viktor Kolbe a reasonably simple way to
change the path prefixes for all project images.  Loading images from
startown is painfully slow.  So we copied over O(10K * 6 cameras) from
startown to a subdir of cc2-gpfs.  Within our command line, we needed to
add an "-env tag" flag outside the quotation marks:


/home/pcho/sputnik/pwin/build/linux64/pwin -vv -env new_building \
-do "rdn rdn_on_map  \
-opath /data/peter_stuff/road_networks/ortho_tiles \
-prjdb http://flyover.geo.apple.com/prjdb/FlightOps/project/mathilda_0502-2018/xml \
-prj mathilda_0502-2018" 

We next modified method env_update_path() within env.c so that any image
path beginning with the prefix
/startown-gpfs/sputnik04/supersize/copyprocess/resource/ is replaced by the
prefix /cc2-gpfs/storage/dev/g3d/images/ .  The latter subdirectory
structure on cc2-gpfs must mirror that on startown.  

After making these changes, on RDN map gui loads images corresponding to a
selected rig and camera noticeably (but not blindingly) faster than when
they have to be fetched from startown :)


*.  Example of hash map with integer keys and p_image_yv12 values:

  hash_map_t rig_panos_map;		// Hash map holding allocated rig panos

.
.
.


  hash_map_create(&gui_group->rig_panos_map, sizeof(int), sizeof(p_image_yv12));

.
.
.

  if(*da_get(&gui_group->rig_panos_allocated, r) == 0){
    p_image_yv12 pano_yv12;

    p_info_imf(image_filename, &xdim, &ydim);

// Force xdim and ydim to both be even before importing 
// input YV12 image:
    
    xdim = 2 * (xdim / 2);
    ydim = 2 * (ydim / 2);

// Allocate YV12 image areas to hold input panorama:

    p_alloc_yv12(pano_yv12, xdim, ydim);
    p_read_scaled_imf(pano_yv12, image_filename, P_IMF_RGB24, 0);

    hash_map_add(&gui_group->rig_panos_map, &r, pano_yv12);
  }

  return hash_map_find(&gui_group->rig_panos_map, &r);
}

*.  RGB565 values:

red: RGB565(255,0,0) = 63488 
green: RGB565(0,255,0) = 2016 
blue: RGB565(0,0,255) = 31 
yellow: RGB565(255,255,0) = 65504 
cyan: RGB565(0,255,255) = 2047 
purple: RGB565(255,0,255) = 63519 
white: RGB565(255,255,255) = 65535

*.  On 10/7/15, Petter showed us that "LNK" variables appearing within
pwin.mak are actually defined inside pwin_all.mak

*.  On 10/8/15, Martin Byrod told us that "app" codes should be "main-like"
and not have other codes which depend upon them.  In contrast, "lib" codes
should in general have other methods which call them.

*.  On 10/14/15, Andreas Bockert told us that the rw_write_da_binary()
method can only be called on structures which do NOT contain any pointers.
Such structures correspond to contiguous chunks of memory.

*.  On 10/30/15, Viktor told us that there exist RGB2Y, RGB2U and RGB2V
macros which convert RGB triples (specified from 0 - 255) into
corresponding YUV triples.  Note that black does NOT correspond to Y=U=V=0.
Instead greyscale values correspond to Y ranging from 0 to 255, U = V = 128!

See 3 color planes above "Numerical approximations" in
https://en.wikipedia.org/wiki/YUV for visualization of YUV color space.

*.  On 10/30/15, Tho taught us how to generate a distrib binary with gpu
processing enabled:

	~/sputnik/scripts/deploy.sh ~/sputnik/ -pwin -gpu -par RDN=1

*.  As of 1/17/17, we apparently can chant 

	/home/pcho/sputnik/scripts/deploy.sh ~/sputnik/ -latest 

in order to build production master binaries.

*.  On 11/4/15, Ibahim Musba told us that nightly "regression" projects are
not visible within the database which the c3-viewer accesses by default.
In order to see such regression projects, we must start the viewer by
chanting

	umask 2; /home/pcho/sputnik/pwin/build/linux64/pwin -vv \
	-da view -prjdb http://flyover.geo.apple.com/prjdb/regression

Nightly "Regression" projects are also visible under flyover admin, but
only to users who have been added to the "regression" group.

*.  On 11/4/15, John Wood showed us that we can find see the basic output
directory for a particular project by running the c3viewer and looking at
text output within the console window.  

For example, here is some of the text output which the c3viewer printed out
for project "dev_highway_5k_imusba_151014_110838_rdn_rdn_coyote"

.
.
.
VERBOSE: Using bboxes at level: 10.
VERBOSE: lname /startown-gpfs/sputnik02/supersize/devtest/g3d/regression_tests/rdn_nightly/dev_highway_5k_imusba_151014_110838_rdn_rdn_coyote/model/omni/0
VERBOSE: lname /startown-gpfs/sputnik02/supersize/devtest/g3d/regression_tests/rdn_nightly/dev_highway_5k_imusba_151014_110838_rdn_rdn_coyote/model/omni/1
INFO   : One root node exists
VERBOSE: r /startown-gpfs/sputnik02/supersize/devtest/g3d/regression_tests/rdn_nightly/dev_highway_5k_imusba_151014_110838_rdn_rdn_coyote/model/omni/1/0/map_1_0_0.rip (1203731 us)
INFO   : Projects:
INFO   :  dev_highway_5k_imusba_151014_110838_rdn_rdn_coyote
VERBOSE: Paths:
VERBOSE:  /startown-gpfs/sputnik02/supersize/devtest/g3d/regression_tests/rdn_nightly/dev_highway_5k_im


Based upon this text output, we infer that output using this particular
project is exported to subdirs of 

/startown-gpfs/sputnik02/supersize/devtest/g3d/regression_tests/rdn_nightly/dev_highway_5k_imusba_151014_110838_rdn_rdn_coyote/

*. On 12/3/15, we learned the hard and painful way that p_subim() is
currently called with subimages that are located OUTSIDE an original image
by p_allocate_yv12() and p_allocate_rgb().  Aside from these methods, all
other calls to p_subim() should have the upper left and lower right corners
of the subimage lying INSIDE the original image.  If not, then the calling
method is in error!


  if(!P_INSIDE(im_org, x0, y0)){
    if(x0 == 0 && y0 == im_org->y_size){
// p_alloc_yv12 for im[1] case      
    }
    else if(x0 == im_org->x_size / 2 && y0 == im_org->y_size){
// p_alloc_yv12 for im[2] case      
    }
    else if(x0 == 0 && y0 == 2 * im_org->y_size ){
// p_alloc_rgb case
    }
    else{
      printf("Getting subimage before upper left corner of original image !! \n");
      printf("Original image: x_size = %d  y_size = %d \n", im_org->x_size, im_org->y_size);
      printf("Pixel coords for subimage's left corner: x0 = %d  y0 = %d \n", x0, y0);
      printf("Pixel coords for subimage's right corner: x0+xs-1 = %d  y0+ys-1 = %d \n", x0+xs-1, y0+ys-1);
      printf("Sub image: x_size = %d  y_size = %d \n\n", xs, ys);
    }    
  }
  if(!P_INSIDE(im_org, x0+xs-1, y0+ys-1)){
    if(x0 == 0 && y0 == im_org->y_size){
// p_alloc_yv12 for im[1] case      
    }
    else if(x0 == im_org->x_size / 2 && y0 == im_org->y_size){
// p_alloc_yv12 for im[2] case      
    }
    else if(x0 == 0 && y0 == 2 * im_org->y_size ){
// p_alloc_rgb case
    }
    else{
      printf("Getting subimage after lower right corner of original image !! \n");
      printf("Original image: x_size = %d  y_size = %d \n", im_org->x_size, im_org->y_size);
      printf("Pixel coords for subimage's left corner: x0 = %d  y0 = %d \n", x0, y0);
      printf("Pixel coords for subimage's right corner: x0+xs-1 = %d  y0+ys-1 = %d \n", x0+xs-1, y0+ys-1);
      printf("Sub image: x_size = %d  y_size = %d \n\n", xs, ys);
    }
  }
*/


*.  On 4/19/16, Andreas Bockert told us hash maps containing da lists as
values must have those lists allocated dynamically on the heap and not as
local, static variables:

GOOD:

  int_list_t *ebboxes_ids = (int_list_t*) calloc(1, sizeof(int_list_t));
  da_addv(ebboxes_ids, query_id);
  hash_map_add_str(&streets_network->streetnames_map, nearby_streetname, ebboxes_ids);
  free(ebboxes_ids);

BAD:

  int_list_t ebboxes_ids = {};
  da_addv(&ebboxes_ids, query_id);
  hash_map_add_str(&streets_network->streetnames_map, nearby_streetname, &ebboxes_ids);
  da_free(&ebboxes_ids);   // Performing this free leads to core dump!

*.  On 5/31/16, Andreas Bockert explained to us that da's themslves take up
just a relatively few bytes in stack memory.  On the other hand, they point
to generally much larger chunks of heap memory where data is actually
stored.  When da_free() is called, it destroys the heap memory chunk where
data is stored.  When an object such as an int_list goes out of scope, the
small number of bytes in stack memory are freed.

*.  On 7/22/16, Andreas Bockert told us about an existing image caching
structure sitting inside p_imcache.h.  He also told us that the following
pair of da commands

  da_create(&cache->images, n_img);                         [1]
  da_add_empty_n(&cache->images, n_img);                    [2]


[1] performs a malloc while [2] performs a memset.  [1] is analogous to an
STL vector reserve call.  [2] actually populates the da with zero-valued
entries.  In general, we should ALWAYS call da_create() whenever we have a
dynamic array as a field inside some struct which we cannot initialize
using {} as we always do for local-variable da's.  

*.  On 7/28/16, Weiyu showed us that we can use da_add_empty() to
effectively create and retrieve a pointer from a dynamic array.  We may
then work with the retrieved pointer by first dynamically allocated any
memory which the new object needs and then populating its member fields.
We should NOT destroy any part of the new object when we leave the method
which created the new pointer.  

For example in m2d_to_polygons() inside s2d_edit_gui.c, 

for(p = 0; p < n_polygons; p++){
    m2d_poly_t *curr_m2d_polygon = darray_get(&m2d_shape->poly, p);
    darray_t m2d_vertices = curr_m2d_polygon->vert;
    int v, n_vertices = darray_size(&m2d_vertices);

    polygon_t *curr_polygon = da_add_empty(&gui_group->polygon_list);
    g_polygon_initialize(curr_polygon);
    curr_polygon->n_vertices = n_vertices;

    for(v = 0; v < n_vertices; v++){
      m2d_vertex_t *curr_m2d_vertex = darray_get(&m2d_vertices, v);
      g_pos3_t V;
      g_set3(&V, curr_m2d_vertex->x, curr_m2d_vertex->y, curr_m2d_vertex->z);
      da_add(&curr_polygon->verts3d, &V);
    } // loop over index v labeling vertices within curr_m2d_polygon

    curr_polygon->id = p;
    curr_polygon->z = g_polygon_3d_z(&curr_polygon->verts3d);
    g_polygon_3d_to_2d(&curr_polygon->verts3d, &curr_polygon->verts2d);
  } // loop over index p labeling polygons in m2d_shape


*.  On 8/9/16, Daniel Ragnarsson told us that curl output in pwin can be
rendered more verbose when an error is encountered inside curl_load()
within http.c.  In particular, set CURLOPT_VERBOSE and CURLOPT_ERRORBUFFER
options.  


int curl_load(const char *url, mfile_buf_t *data)
{
  CURL *curl;
  long resp = 0;
  char errbuf[CURL_ERROR_SIZE] = { 0 };
  CURLcode res;

  printf("inside curl_load(), url = %s \n", url);

  mfile_buf_create(data, 0);

  curl = curl_easy_init();
  if(curl == NULL){
    return -1;
  }

  curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
  curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, errbuf);
  curl_easy_setopt(curl, CURLOPT_URL, url);
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
  curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)data);

  if((res = curl_easy_perform(curl)) != CURLE_OK){
    printf("%s", curl_easy_strerror(res));
    curl_easy_cleanup(curl);
    return -1;
  }

  curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &resp);

  curl_easy_cleanup(curl);
  return resp / 100 == 2 ? 0 : -1;
}

*.  On 11/30/16, Andreas Bockert told us about "mfiles" which act like
files in memory.  In particular he pointed us toward m3d_read_mem() inside
m3d_rw.c for an example which generates an "mfile" from a one-dimensional
array of bytes (containing jpeg imagery content).  A char* URL is generated
for this "mfile" which can then be passed into methods such as
"p_info_imf(url, &xdim, &ydim)" to recover horizontal & vertical image
dimensions.

*.  On 12/7/16, we learned from Petter and Vinay that projects can
generally contain imagery coming from either the "J125" and/or "T300"
hardware configurations.  

J125: 1 forward-right facing fisheye [0]. 1 right-side-facing camera [1],
1 backward-right facing fisheye [2], 1 backward-left facing fisheye [3],
1 left-side-facing camera [4], 1 forward-left facing fisheye [5].

T300: 1 forward-facing camera [0], 2 right-side-facing cameras [1, 2], 1
backward facing camera [3], 2 left-side-facing cameras [4, 5] and 2 fisheye
cameras looking upwards

Vinay pointed out that map_resource_t has a map_sensor_system_type_t
sensor_type field member.  

*.  On 1/19/17, we chanted on Thinkmate

   sudo apt-get install libjpeg62

in order to install /usr/lib/libjpeg.so.62 needed to run pwin production
binaries locally on Thinkmate.  libjpeg.so.62 was then installed into 
/usr/lib/x86_64-linux-gnu

We also followed the C3 Wiki instructions under the Common issues/questions
 section on the "Ubuntu installation and common issues" page.

*.  On 1/19/17, Gustav Hanning told us that to 
 “activate” mfiles, we need to define MFILE_NAME_WRAP before including
mfile.h:

#define MFILE_NAME_WRAP
#include "mfile.h"

All instances of fopen are then replaced by mfile_open, fgets -->
mfile_fgets, fclose --> mfile_fclose, etc.  The mfile_XXX methods are not
meant to be called directly.

*.  On 1/20/17, we asked Andreas Bockert for help with fixing several
memory problems related to hash maps and dynamic arrays in the hn panorama
gui tool:

static void initialize_hn_metadata(hn_metadata_t* hn_metadata)
{
  int c;
  hn_metadata->max_rig_cams = 10;
  hn_metadata->max_polygons_per_cam = 100;
  hash_map_create(&hn_metadata->semseg_polygon_map, sizeof(int), sizeof(g_pos2_lists_t));
  for(c = 0; c < hn_metadata->max_rig_cams; c++){

// Andreas said that we can initialize the hash map with vertex_lists
// containing zeros.  Actual vertex_lists with then be dynamically created
// later as needed:

    g_pos2_lists_t vertex_lists = {};      // list of multiple polygons per rig camera
    hash_map_add(&hn_metadata->semseg_polygon_map, &c, &vertex_lists);
    da_free(&vertex_lists);

// Alternatively, we could use da_create() to generate vertex_lists here:

//    g_pos2_lists_t vertex_lists;      // list of multiple polygons per rig camera
//    da_create(&vertex_lists, hn_metadata->max_polygons_per_cam);

// But then we must NOT call da_free(&verttex_lists) at this point !!

  }
}

/***** clear_cam_polygon_vertex_lists *****************************************
 * Description :  Iterate over all cameras within a rig.  For each camera, 
 *                retrieve list of semantic segmentation polygons.  Free each 
 *                polygon's g_pos2_list of vertices.  Then clear list of polygons 
 *                so that it can be repopulated for a new rig.
 *******************************************************************************/
static void clear_cam_polygon_vertex_lists(hn_metadata_t *hn_metadata)
{
  int c;
  for(c = 0; c < hn_metadata->max_rig_cams; c++){
    g_pos2_lists_t *vertex_lists = hash_map_find(&hn_metadata->semseg_polygon_map, &c);

    if(vertex_lists != NULL){
      da_foreach(vertex_lists, da_free(_x));
      da_clear(vertex_lists);
    }
  }
}


static void load_raw_rig_semsegs(int rig_id, hn_gui_group_t *gui_group)
{
.
.
.

  clear_cam_polygon_vertex_lists(&gui_group->hn_metadata);

  for(d = 0; d < da_size(&gui_group->raw_detections); d++){
    pr_ebbox_t *ebbox = da_get(&gui_group->raw_detections, d);
    g_pos2_list_t *polygon = &ebbox->polygon;
    int cam_id = ebbox->local_rig_list_index;
    int corrected_cam_id = cam_id;
    g_pos2_lists_t *vertex_lists;
    g_pos2_list_t *curr_vertex_list;
.
.
.
    vertex_lists = (g_pos2_lists_t *) hash_map_find(semseg_polygon_map, &corrected_cam_id);
    if(da_size(vertex_lists) >= gui_group->hn_metadata.max_polygons_per_cam) break;

    curr_vertex_list = da_add_empty(vertex_lists);
    da_clone(curr_vertex_list, polygon);
    
  } // loop over index d labeling raw detections
.
.
.
}
