=============================================================================
TAGGER2 notes
=============================================================================
Last updated on 8/19/16; 8/22/16; 9/8/16; 9/19/16
=============================================================================

*.  On 8/10/16, Tomas told us to compile the tagger-2 branch of gardn with
NO GARDN=1 argument 

*.  Modified 'makepwin' script including PWGL flag:

cd /home/pcho/sputnik/pwin/build/linux64/
make -s -j pwin OPT=3 OPENCL=1 OPENCV=1 DNN=1 LAPACK=1 RDN=1 WITH_GPU=1 PWGL=1 GDAL=1 GDAL_PATH=/opt/gdal-2.0.1/

*.  Command to launch tagger2:

/home/pcho/sputnik/pwin/build/linux64/pwin -vv -nogpfs -cfg ./eufori.dcfg \
-da tagger2

  This starts with a call to tagger2_cmd() within tagger2_cmd.cpp

*.  Tagger2 work flow:

 - Image manipulation starts with EDITOR in "Overview" mode.  

 -  Zoom into some object of interest by using left-mouse button to drag a
zoom box around it.  After zooming into the box, EDITOR mode then changes
to "Edit polyline"

 - Left-mouse click to draw polyline.  Press escape key to terminate and
discard polyline entry.  Or doubleclick to successfully terminate polyline
entry.  Polyline then closes into a polygon.

  - Left mouse click on a polygon's perimeter to select it.  Mouse click
away from polygon to deselect it.

  - Press "delete" key to delete a selected polygon.

  -  Use right mouse button to zoom away from region of interest.  Editor
mode reverts to Overview.

  -  Press "Command key" + left mouse button to translate 2D window without
     inputing any polyline metadata while in Edit polyline mode.

  -  Press "Command key" + mouse wheel to zoom in/out of 2D window.

  -  Press "Command key" + Z in order to undo an operation

*.  Browser input = https://flyover-admin.geo.apple.com/annotation/projects

Browser output = list of currently active annotation projects

[{"name": "pwin_dev_test_1", "id": "563aa01e573667b16d194444"}, {"name": "20160127_road_segmentation_sqtenx", "id": "56a959ae26e07d1d23b5a88b"}, {"name": "20160209_sign_mask", "id": "56ba37bf1c47d15d66c56ed2"}, {"name": "2016_05_19_Sacramento_S2D", "id": "573e148d1c47d1632e051661"}, {"name": "20160525_privacy_boston", "id": "5745dd3f1c47d13eaf79c8a1"}, {"name": "20160525_privacy_chicago", "id": "57460ac51c47d14f775b8cb1"}, {"name": "20160610_housenumber_boston2", "id": "575b017b26e07d4d4da56c49"}, {"name": "20160610_housenumber_el_paso", "id": "575b08711c47d14cc103efad"}, {"name": "20160624_s2d_suffolk_sf", "id": "576de8681c47d144cfee5139"}, {"name": "20160809_buildings_benchmark", "id": "57aa6bcd1c47d148314d53e8"}, {"name": "20160809_buildings_benchmark-1", "id": "57aa6e6a1c47d1482e5dbecc"}, {"name": "20160809_buildings_benchmark-2", "id": "57aa6e7d26e07d7cc59092bc"}, {"name": "20160809_lane_markings-2", "id": "57aa76d31c47d148314d5418"}, {"name": "20160809_lane_markings-3", "id": "57aa777d26e07d7cc1b2c3ae"}, {"name": "20160727_lane_markings_benchmark-1", "id": "57ab6b5a1c47d10d7c57e72b"}]

Viktor told us that the browser output is very likely dynamically generated
json corresponding to some database query.

Carlos showed us on 8/10/16 that how to activate/inactivate annotation
projects via Flyover Admin.  First select PR -> Annotation Project.  Then
toggle on the check box located on LHS for some project of interest.  Next
press the light blue "With selected" button located near upper right of
Annotation Project List webpage.  Then choose either the Activate of
Inactivate options within the drop-down menu.

*.  Dynamically generated list of active annotation projects is hardwired
into TGProject::init_project_list().


*.  Infinite "update()" event loop appears to be located within
TGEditor::update() inside tg_editor.cpp.

*.  In tg_editor.cpp, current mouse position is stored in _mousepos (posn
of mouse in Tagger2 window coords) and in _mousepos_img (posn of mouse in
current image pixel coords)

*.  In update() loop, execute command such as 
key_active(GLFW_KEY_S) to check if user has recently pressed the "s" key.

*.  Polylines appear to be stored within TGImage::polylines which is an STL
vector of polyline_t.  A polyline_t contains an STL vector g_pos2_t called
points.

*.  Tagger 2 window coords:

Upper left corner: x = 0, y = 0
Upper right corner: x = 1, y = 0
Lower left corner: x = 0, y = 1
Lower right corner: x = 1, y = 1

Note ehat_y is oriented in the downward vertical direction!

*.  Press command/windows key + Z in order to "undo" an editing operation
within tagger2.

mouse.lclick() == true when user presses down on left mouse button
!mouse().left == true when user releases left button mouse click

*.  For week of Mon Aug 22, 2016 where startown is inaccessible, we can use
Carlos Folgar's test_pv40 annotation project which has 33 images sitting
on the PV40 cluster.  Our gardn_s2d_Aug11 code which worked OK on Fri, Aug
19, 2016 seems to work OK with this PV40 annotation project.


=============================

Q0: What is the significance of a grey square near the upper left turning
red?

Q1:  What is the basic idea/purpose of the _mouse_blocked member of
TGEditor?  It seems to only be set to true within 
TGEditorModule_Polylines_TG2::update_crop_mode().  

A1: It was a quick hack to allow an "overlay" area with
prioritized/exclusive mouse access, so you can interact with the crop mode
bar (opens on left side if you press 'C') without manipulating any polygons
or other elements that happen to be visible underneath. We can hopefully
use it for other similar purposes if there's one (at most) layer of GUI on
top of the other default things. It's possible to make a more general
overlapped window system, but it might be needlessly complex if we don't
have a clear use case for it. The focus is still on simplicity, so we
should probably try to resist new features that lack a defined purpose. One
drawback is that preemption between modules will depend on update order, so
a module later in the list can't steal mouse focus from an earlier one
without using a different concept. It might be possible to support that
with a minor change that requires _mouse_blocked to be unset for two
consecutive frames before it's "released". That way any module can set it
and it will be visible to all others. Still, internal state must decide if
you should ignore or obey the block, so there's some argument in favor of
making it slightly more intelligent. Like "mouse_owned_by" set to the
name/pointer of the module, via request/release mouse ownership. Looks also
like the "mouse_owned" event has a similar role...

Q2:  In various update() callbacks, what purpose do the following lines
serve?
  if(event_occured("start_zoom"))
    take_focus();
  if(event_occured("crop_zoom"))
    take_focus();
  if(event_occured("reset_zoom"))
    lose_focus();

A2: The editor will trigger these events based on user navigation
actions. Some modules may want to take focus and start updating immediately
when one of these occur, such as the current "Add polyline" mode that
automatically triggers when you start zooming in from overview. Also,
zooming back out will stop that mode and go back to overview. Generally,
all such interesting events should be broadcast like this, so modules can
determine individually what, if anything, to do in response. There's also
an event for changing the image, which typically causes modules to
reset/initialize.

*.  Methods to encode/decode geo IDs are sitting in app/build/sxd_merge.c/
sxd_geo_id_encode() and sxd_geo_id_decode().

*.  On 9/19/16, we got lots of help from Daniel Raggarsson with getting
pwin to compile on our macbook.  In particular, Daniel showed us that
we really neede to chant

		xcode-select install

in order to download and install Xcode Command Line Tools.  After this
chant, /usr/include on our Macbook now contains stdio.h and many other
basic header files which it was previously missing.

Daniel also showed us that we must used clang-omp rather than just clang in
order to successfully compile pwin on our Macbook.  

*.  In order to compile pwin on our macbook, we changed our "makepwin" script
within ~/bin/makepwin to read as follows:

   cd /Users/cho/sputnik/pwin/build/mac 
   make  pwin OPT=3 RDN=1 TAGGER_DEV=1 PWGL=1


