=============================================================================
Python language notes
=============================================================================
Last updated on 10/5/16; 10/6/16; 10/7/16; 10/11/16
=============================================================================

*.  Be sure to include "shebang" line below

#! /usr/local/anaconda/bin/python

as very first line in any python script.  It will then use anaconda's
version of python to run the script.

*.  To load some python script into ipython, chant

%load path/to/your/file.py

*.  In order to execute a python script called "python_script.py" from
inside the python interpreter, chant

>>> execfile("python_script.py")

*.  Chant "sudo apt-get install python-pip" in order to install "pip".
Then chant 

"sudo pip install mpld3" 

in order to install python's matplotlib to browser package.

"sudo pip install traitlets"

*. In order to interactively import from the python interpreter all function
definitions from a python script file called char_level_models.py, chant

>>> from char_level_models import *

>>> lm = train_char_lm("shakespeare_input.txt", order=4)
>>> lm['ello']
[('!', 0.0068143100511073255), (' ', 0.013628620102214651), ("'", 0.017035775127768313), (',', 0.027257240204429302), ('.', 0.0068143100511073255), ('r', 0.059625212947189095), ('u', 0.03747870528109029), ('w', 0.817717206132879), ('n', 0.0017035775127768314), (':', 0.005110732538330494), ('?', 0.0068143100511073255)]

*.  In order to download caffe models, we had to install the yaml module
for python:

sudo apt-get install python-yaml

*.  In order for anaconda's version of python to find installed packages
(e.g. google-protobuf), we must use anaconda's version of PIP:


	sudo $ANACONDA_HOME/bin/pip install protobuf

        sudo /usr/local/anaconda/bin/pip install protobuf
        sudo /usr/local/anaconda/bin/pip install leveldb


*.  In order to see a list of locally installed modules, chant at a command-line

	pydoc modules

Alternatively from a python prompt, chant  

	help('modules')
 
*.  We need to install Anaconda directly within /usr/local/ . So first move
Anaconda installation script into /usr/local/  .  Then from within
/usr/local, chant something like

	sudo ./Anaconda2-2.4.1-Linux-x86.64.xh

When queried by script where to install Anaconda, reply something like

	/usr/local/anaconda2-2.4.1

Then create soft link 

	sudo ln -s /usr/local/anaconda2-2.4.1 /usr/local/anaconda

*.  If we include the full path to python in the top of an executable
python file, the python binary will be started before subsequent python
commands in the file are read:

#! /usr/local/anaconda/bin/python

print "Hello world";

*.  Complex vars:  j and J both equal sqrt(-1):

c = 2 + 3J
d = 1 - 2J
e = c+d
f = c*d

print c
print d
print e
print f

*.  Python lists:

Lists are the most versatile of Python's compound data types. A list
contains items separated by commas and enclosed within square brackets
([]). To some extent, lists are similar to arrays in C. One difference
between them is that all the items belonging to a list can be of different
data type.  

The values stored in a list can be accessed using the slice operator ([ ]
and [:]) with indexes starting at 0 in the beginning of the list and
working their way to end -1. The plus (+) sign is the list concatenation
operator, and the asterisk (*) is the repetition operator. 

*.  Python tuples:

A tuple is another sequence data type that is similar to the list. A tuple
consists of a number of values separated by commas. Unlike lists, however,
tuples are enclosed within parentheses.

The main differences between lists and tuples are: Lists are enclosed in
brackets ( [ ] ) and their elements and size can be changed, while tuples
are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be
thought of as read-only lists.

*.  Python dictionaries:

Python's dictionaries are kind of hash table type. They work like
associative arrays or hashes found in Perl and consist of key-value
pairs. A dictionary key can be almost any Python type, but are usually
numbers or strings. Values, on the other hand, can be any arbitrary Python
object.

Dictionaries are enclosed by curly braces ({ }) and values can be assigned
and accessed using square braces ([]).

*.  Python versions

Chant 

  python --version 

to see which version of python is being run from the current shell. 

Important note!:

On Thinkmate from within tcsh:
  python --version   --> Python 2.7.11 :: Anaconda 2.4.1 (64-bit)

On Thinkmate from bash:
  python --version   --> Python 2.7.6

On Thinkmate from tcsh:

  sudo which python --> /usr/bin/python

*.  In order to install scipy under virtual python environment, we had to
first download gfortran package onto Thinkmate:

		sudo apt-get install gfortran

*.  For discussion of virtual environments under anaconda, see
https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/

1.  Chant conda -V

       conda 4.1.11   (as of Aug 2016)

2.  Chant sudo /usr/local/anaconda/bin/conda update conda

3.  Chant conda create -n my_env python=2.7 anaconda

4a.  Chant conda info -e
Warning: could not import binstar_client ('args' object has no attribute 'site')# conda environments:
#
my_env                *  /home/pcho/.conda/envs/my_env
root                     /usr/local/anaconda2-2.4.1

4b.  Change to bash.  Then chant source activate my_env

pcho@ubuntu:~/software/cnn-vis$ source activate my_env
(my_env) pcho@ubuntu:~/software/cnn-vis$ 

5.  conda install --file requirements.txt 

*.  In order to see all currently installed anaconda python packages, chant

	conda list

	
*.  General anaconda info is returned by chanting

	conda info -a

*.  Byte-compiled python scripts end with .pyc suffixes.  They run faster
than non byte-compiled scripts.

*.  range(n) returns integers starting at 0 up to but not including n

>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> range(1, 10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

*.  In order to generate a uniformly distributed random var over [0,1),
chant

from random import uniform
.
.
.
frand = uniform(0,1)    

*.  Bool type in python takes values "True" and "False"

*.  For string input from console keyboard, use raw_input() rather than
input()

		 input_str = raw_input("Enter input string: ")

*.  Use "and"/"or" instead of "&&"/"!!" in python

*.  Recall there is no increment operator such as i++ in python.  Instead
use, i += 1

*.  Use insert(0,...) to prepend a new element to front of a list:

		self.pegDisks[toPeg].insert(0,currDisk)

*.  Use pop(0) to pop off element from front of a list:

		 self.pegDisks[fromPeg].pop(0)

*.  Use lst.pop() or del lst[-1] to pop off last element from list lst.

*.  "!=" means "not equals" in python.  But use "not flag" rather than
"!flag" to negate a boolean variable in python.

*.  Swap two items in python by chanting

	a, b = b, a

*.  Python methods can take default argument values.  But it does not
appear that their method names can be overloaded as in C++.

*.  Sort a list of integers A by chanting

	A.sort()

*.  In order to return multiple values from a method in python, we can use
tuples:

def binary_search(search_value, A, min_index, max_index):
    if search_value < A[min_index]:
        return (-1, min_index, max_index)
.
.
.

*.  We can call our own methods (e.g. random_sequence sitting inside
mymath.py) from another python file (e.g. binary_search.py) by including 

	from mymath import random_sequence

at top of python file which performs the method call

*.  Call sys.exit(1) in order to exit python from within a script

*.  Initialize dictionary as

sDict = {}

Query dictionary to see if it already contains a value corresponding to key
= s[c]:

        s_key = s[c]
        s_val = sDict.get(s_key)
        
        if s_val == None:
            sDict[s_key] = t[c]
        else:
            if s_val != t[c]:
                isomorphic_strings = False
                break

*.  Use iteritems() to iterate over dictionary entries:

    dict = {i: i * 2 for i in range(10)}
    for key, value in dict.iteritems():
        print "key = ", key, " value = ", value

*.  pickle and cPickle – Python object serialization
Purpose:	Python object serialization
Available In:	pickle at least 1.4, cPickle 1.5

The pickle module implements an algorithm for turning an arbitrary Python
object into a series of bytes. This process is also called serializing” the
object. The byte stream representing the object can then be transmitted or
stored, and later reconstructed to create a new object with the same
characteristics.

The cPickle module implements the same algorithm, in C instead of
Python. It is many times faster than the Python implementation, but does
not allow the user to subclass from Pickle. If subclassing is not important
for your use, you probably want to use cPickle.

*.  In functional programming, iterating over a few things simultaneously
is called “zip”. Python has a built-in zip function.  It returns a list of
tuples, where the i-th tuple contains the i-th element from each of the
argument sequences or iterables:

a = [1,2,3]
b = ['a','b','c']
for i,j in zip(a,b):
    print i, j

1 a
2 b
3 c

mykeys = ['a', 'b', 'c']
myvalues = [1, 2, 3]
dict(zip(mykeys, myvalues))

{'a': 1, 'c': 3, 'b': 2}

colors = ['red', 'green', 'blue']
vals = [55, 89, 144, 233]
for col, val in zip(colors, vals):
     print(col, val)

('red', 55)
('green', 89)
('blue', 144)

*.  Python dictionaries and zip()

keys = ['spam', 'eggs']
vals = [42, 1729]
d = dict(zip(keys, vals))

{'eggs': 1729, 'spam': 42}

Invert dictionary (i.e. swap keys and values):

inv_d = dict(zip(d.values(), d.keys()))

{1729: 'eggs', 42: 'spam'}

*.  Sorting one list according to another:

alist = ['a4', 'a1', 'a5', 'a2', 'a6', 'a3']
blist = [4, 1, 5, 2, 6, 3]
    
a2list, b2list = (list(x) for x in zip(*sorted(zip(alist, blist))))

['a1', 'a2', 'a3', 'a4', 'a5', 'a6']
[1, 2, 3, 4, 5, 6]

*.  Python has a continue statement just like C/C++

*.  In order to perform a deepcopy of a list (and probably other python
objects), we need to explicitly invoke python's deepcopy() command:

from copy import deepcopy
.
.
.
def isValidSudoku(board):
    board1 = deepcopy(board)
    board2 = deepcopy(board)
    print id(board)
    print id(board1)
    print id(board2)

Python's id() command will return different values for deep copied
objects.
