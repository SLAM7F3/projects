========================================================================
Face classification
========================================================================
Last updated 7/25/16; 7/28/16; 7/29/16; 8/3/16
========================================================================

In this README, we define the following root directories:

  $faces_root= ~/programs/c++/svn/projects/src/mains/faces
  $deeplab_root= ~/programs/c++/svn/projects/src/mains/machine_learning/deeplab

*.  Program $faces_root/XML2TXT imports some XML file containing face and
hand annotations generated by Davis King's IMGLAB tool.  It extracts
bounding box metadata from Davis' objects.  It also assigns default unset
attribute values to gender and age_group attribute keys for all face
bounding boxes.  XML2TXT exports a text file containing all these metadata
which can later be imported by our own image labeling and classification
tools.

                              ./xml2txt

*. Program UPDATETXT combines together one old and one new labeled bboxes
text files.  The former is assumed to have contain gender attributes
assigned via program LABELIMAGES.  The latter is assumed to have been
generated via a call to XML2TXT and to correspond to an enlarged imagery
set whose attributes all equal "unset". UPDATETXT copies any nontrivial
attribute metadata from the old labeled bboxes text file into the new one
for bboxes whose labels and pixel coordinates precisely match.

                             ./updatetxt

*.  Program $faces_root/IMAGE_SIZES reads in a set of photo image filenames.
It calls ImageMagick's ping command to extract image width and height
measured in pixels.  Image size results are saved into output text file
image_sizes.dat.

                             ./image_sizes

*.  Program $faces_root/ATTRIBUTE_IMAGES is a variant of VIEWIMAGES.  It
needs to be invoked from a subdirectory containing some set of images.
ATTRIBUTE_IMAGES can be used to assign attributes such as gender to a set
of images annotated with bounding boxes by Davis King's IMGLAB tool.  Face
bbox information is converted via program XML2TXT into a format which can
be integested by this progrma.  ATTRIBUTE_IMAGES also takes a text file
generated by program IMAGE_SIZES containing pixel width and height for each
image to be attributed.

Given an image, ATTRIBUTE_IMAGES dymamically instantiates and
displays OSG rectangular PolyLines around previously-annotated
faces.  By default, XML2TXT assigns all attributes to "unset"
values.  The user may press "1", "2" or "0" on the number pad in
order to reset gender attributes for all bboxes in the current
image to male, female or unknown.  After an individual bbox is
selected via the mouse, its gender attribute may be changed to
male, female or unknown by pressing the "1", "2" and "~" keys near
the upper left corner of the keyboard.

ATTRIBUTE_IMAGES can scan through all image files contained within
the present working directory.  If all the input image files do not
have uniform pixel size, borders are dynamically added as necessary
to each input image so that effectively all images end up with the
same pixel widths and heights.  To minimize the need for
user-zooming, ATTRIBUTE_IMAGES also attempts to display each new
image in similar-sized 2D OSG windows.

ATTRIBUTE_IMAGES exports an updated text file each time an
attribute of a face bbox is altered.

			./attribute_images

*.  Program $faces_root/AUGMENT_CHIPS imports the text file containing
attributed face bounding box information generated by program
ATTRIBUTE_IMAGES.  Any face whose gender is unknown is effectively ignored.
Among the known-gender face chips, a small percentage are marked for
testing while a smaller percentage are designated as validation.  Data
augmentation (translation, hsv color modification, noise injection) is
performed on the remaining training images.  Female and male subdirectories
are formed within an output tree of training, validation and testing
folders.  All face chips are exported to one of these subdirectories after
their pixel sizes are constrained to not exceed 96 x 96.

                          ./augment_chips

*.  Program $faces_root/RESIZE_IMAGECHIPS imports image chips generated by
either EXTRACT_CHIPS or AUGMENT_CHIPS.  Any chip which has pixel width or
height greater than 106 is downsized so that its maximal pixel extent does
not exceed 106.  RESIZE_IMAGECHIPS then calls ImageMagick and superposes
the image chips onto black backgrounds which are 106x106 in size.

Note: We discovered the hard and painful way on 7/22/2016 that Caffe's
image --> LMDB converter appears to expect JPG [rather than PNG] imagery
input by default!

Run program RESIZE_IMAGECHIPS from within the subdirectory holding input
image chips:

                         ./resize_imagechips

After resized image chips are created, move them into a new subdir of
/data/caffe/faces/image_chips/:

e.g. mv ./resized_chips/*.* /data/caffe/faces/image_chips/Jul24_vgg_augmented/


*.  Program $faces_root/PREPARE_CLASSIFICATION_INPUTS imports a set of face
and non-face image chips from a specified subdirectory.  It generates a
text file containing the image chip files' full pathnames vs their class
IDs.  PREPARE_CLASSIFICATION_INPUTS then shuffles the pairs of pathnames vs
class IDs multiple times.  The shuffled text file becomes an input to Caffe
fine-tuning of VGG-16/Resnet networks.

                    ./prepare_classification_inputs

--------------------------
RUNNING CAFFE TRAINING
--------------------------

*.  Within $caffe/experiments, unpack new_faces_experiment.tgz.  Then
rename the unpacked "new_faces/" subdir to a new folder containing today's
date:

		e.g. mv new_faces ./072416_mf_faces

Be sure $caffe/experiments/DATED_TEXT_DIR/list/VGG16/dataset.txt points to
LATEST version of shuffled training/validation input imagery text file
within /data/peter_stuff/imagery/syntext !

*.  Unpack image chips into a dated subdir of
/data/peter_stuff/imagery/faces/image_chips/

*.  After caffe finetuning has essentially finished, copy
$caffe/experiments/faces/DATED_FACES_DIR/logs/VGG16/caffe.bin.INFO
into /data/caffe/faces/trained_models/DATED_SUBDIR on Thinkmate.

Program $root/machine_learning/caffe/TRAINING_PERFORMANCE imports a
caffe.bin.INFO file generated by caffe finetuning run on a GPU machine.  It
plots the loss function as a function of training epoch number for the
training set.  It also plots the accuracy value as a function of training
epoch number for the validation set.

			   training_performance

*.  Program $root/machine_learning/caffe/CLASSIFY_GENDERS is a variant of
the CLASSIFY_CHARS.  It takes in a caffe model trained from scratch along
with folder containing a set of input test images.  CLASSIFY_GENDERS loops
over each test image and prints out the label for the top class which the
trained caffe model predicts for the input image.  It exports correctly and
incorrectly classified image chips to separate subfolders.

./classify_genders \
/data/caffe/faces/trained_models/test_96.prototxt                     \
/data/caffe/faces/trained_models/Aug2_184K_T3/train_iter_200000.caffemodel \
/data/caffe/faces/image_chips/testing/Jul30_and_31_96x96
